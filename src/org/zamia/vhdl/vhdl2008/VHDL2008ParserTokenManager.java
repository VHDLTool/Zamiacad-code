/* Generated By:JavaCC: Do not edit this line. VHDL2008ParserTokenManager.java */
/* 
 * Copyright 2007-2009 by the authors indicated in the @author tags. 
 * All rights reserved. 
 * 
 * See the LICENSE file for details.
 * 
 * 
 */

package org.zamia.vhdl.vhdl2008;
import org.zamia.*;
import org.zamia.zdb.*;
import org.zamia.vhdl.ast.*;
import org.zamia.vhdl.ast.OperationMath.MathOp;
import org.zamia.vhdl.ast.OperationCompare.CompareOp;
import org.zamia.vhdl.ast.OperationLogic.LogicOp;
import org.zamia.vhdl.ast.OperationShift.ShiftOp;
import org.zamia.vhdl.ast.OperationLiteral.LiteralCat;
import org.zamia.vhdl.ast.EntityAspect.EntityAspectKind;
import org.zamia.instgraph.IGObject.OIDir;
import org.zamia.util.*;
import java.util.*;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;

/** Token Manager. */
public class VHDL2008ParserTokenManager implements VHDL2008ParserConstants
{
    // Required by SetState
    void backup(int n) { input_stream.backup(n); }

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 0:
         jjmatchedKind = 6;
         return jjMoveNfa_1(5, 0);
      case 8:
         jjmatchedKind = 5;
         return jjMoveNfa_1(5, 0);
      case 9:
         jjmatchedKind = 4;
         return jjMoveNfa_1(5, 0);
      case 10:
         jjmatchedKind = 2;
         return jjMoveNfa_1(5, 0);
      case 12:
         jjmatchedKind = 7;
         return jjMoveNfa_1(5, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_1(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_1(5, 0);
      case 38:
         jjmatchedKind = 139;
         return jjMoveNfa_1(5, 0);
      case 39:
         jjmatchedKind = 150;
         return jjMoveNfa_1(5, 0);
      case 40:
         jjmatchedKind = 151;
         return jjMoveNfa_1(5, 0);
      case 41:
         jjmatchedKind = 152;
         return jjMoveNfa_1(5, 0);
      case 42:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x40L);
      case 43:
         jjmatchedKind = 137;
         return jjMoveNfa_1(5, 0);
      case 44:
         jjmatchedKind = 147;
         return jjMoveNfa_1(5, 0);
      case 45:
         jjmatchedKind = 138;
         return jjMoveNfa_1(5, 0);
      case 46:
         jjmatchedKind = 156;
         return jjMoveNfa_1(5, 0);
      case 47:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x2000L);
      case 58:
         jjmatchedKind = 148;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x8000000L);
      case 59:
         jjmatchedKind = 146;
         return jjMoveNfa_1(5, 0);
      case 60:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x208000L);
      case 61:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x20000000L);
      case 62:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x0L, 0x4000L);
      case 65:
         return jjMoveStringLiteralDfa1_1(0x4800000070000000L, 0x100900000601L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_1(0x110000008000000L, 0x44L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_1(0x800000000000L, 0x1001202000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400002000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_1(0x84100000000000L, 0x10008L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_1(0x2000000040000L, 0x10000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x21200002L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_1(0x1000000000003800L, 0x40004000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_1(0x2040000000000000L, 0xe0000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_1(0x84000000L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_1(0x24d00000000L, 0x200000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_1(0x82000038000L, 0x10L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_1(0x8040000000000L, 0xe080500000L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_1(0x8000001003000000L, 0x4000040080a0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_1(0xf00000L, 0x8801900L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_1(0x20010000004000L, 0x20000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_1(0x400000000080000L, 0x840000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_1(0x201600000000000L, 0x0L, 0x0L);
      case 88:
         return jjMoveStringLiteralDfa1_1(0x8200000000L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 153;
         return jjMoveNfa_1(5, 0);
      case 93:
         jjmatchedKind = 154;
         return jjMoveNfa_1(5, 0);
      case 97:
         return jjMoveStringLiteralDfa1_1(0x4800000070000000L, 0x100900000601L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x110000008000000L, 0x44L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x800000000000L, 0x1001202000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400002000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x84100000000000L, 0x10008L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x2000000040000L, 0x10000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x21200002L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x1000000000003800L, 0x40004000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x2040000000000000L, 0xe0000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_1(0x84000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x24d00000000L, 0x200000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_1(0x82000038000L, 0x10L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_1(0x8040000000000L, 0xe080500000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x10000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x8000001003000000L, 0x4000040080a0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0xf00000L, 0x8801900L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x20010000004000L, 0x20000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_1(0x400000000080000L, 0x840000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x80000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x201600000000000L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_1(0x8200000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 159;
         return jjMoveNfa_1(5, 0);
      case 124:
         jjmatchedKind = 158;
         return jjMoveNfa_1(5, 0);
      case 125:
         jjmatchedKind = 160;
         return jjMoveNfa_1(5, 0);
      case 160:
         jjmatchedKind = 8;
         return jjMoveNfa_1(5, 0);
      case 65533:
         jjmatchedKind = 9;
         return jjMoveNfa_1(5, 0);
      default :
         return jjMoveNfa_1(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_1(active0, 0xa000a20004000000L, active1, 0x80000100000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x600L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_1(active0, 0x100001100000000L, active1, 0x60002c2081a0L, active2, 0L);
      case 70:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_1(active0, 0x200410000000000L, active1, 0x1000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_1(active0, 0x3000000000000L, active1, 0x4000e0800L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000010300000L, active1, 0xdL, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4000L, active2, 0L);
      case 78:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x1400108020000000L, active1, 0x840040010000L, active2, 0L);
      case 79:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x58000e83040000L, active1, 0x1001282002000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000c00000L, active1, 0x2e800400002L, active2, 0L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L, active1, 0x100000000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x100000010L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_1(active0, 0x46008000000L, active1, 0x10011800040L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0xa000a20004000000L, active1, 0x80000100000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x600L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x100001100000000L, active1, 0x60002c2081a0L, active2, 0L);
      case 102:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x200410000000000L, active1, 0x1000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_1(active0, 0x3000000000000L, active1, 0x4000e0800L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000010300000L, active1, 0xdL, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4000L, active2, 0L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x1400108020000000L, active1, 0x840040010000L, active2, 0L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x58000e83040000L, active1, 0x1001282002000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000c00000L, active1, 0x2e800400002L, active2, 0L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L, active1, 0x100000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x100000010L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x46008000000L, active1, 0x10011800040L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_1(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_1(5, 1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_1(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 1);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x70001001000L);
      case 66:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000000L, active1, 0x820000L);
      case 67:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x800108200L);
      case 68:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x490000000000L, active1, 0x40000000L);
      case 70:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x40L);
      case 71:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000000000L, active1, 0x4000800L);
      case 72:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa3_1(active0, 0x604200000000000L, active1, 0x1L);
      case 74:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x20L);
      case 76:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x2004000000000L, active1, 0x100L);
      case 77:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x200000000L);
      case 78:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000020000000000L, active1, 0x1032240000L);
      case 79:
         return jjMoveStringLiteralDfa3_1(active0, 0x1040008000000000L, active1, 0xe000400006L);
      case 80:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L, active1, 0x400000004000L);
      case 82:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x4008040000000000L, active1, 0x80000000400L);
      case 83:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x80800000000000L, active1, 0x100480000008L);
      case 84:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x801000000000000L, active1, 0x800100090080L);
      case 86:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x1000008000000L);
      case 87:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x2000L);
      case 88:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x200000000000L);
      case 97:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x70001001000L);
      case 98:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000000000000000L, active1, 0x820000L);
      case 99:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x800108200L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x10000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x490000000000L, active1, 0x40000000L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x40L);
      case 103:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000000000000L, active1, 0x4000800L);
      case 104:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x604200000000000L, active1, 0x1L);
      case 106:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x20L);
      case 108:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x2004000000000L, active1, 0x100L);
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x8000020000000000L, active1, 0x1032240000L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x1040008000000000L, active1, 0xe000400006L);
      case 112:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x20000000000000L, active1, 0x400000004000L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x4008040000000000L, active1, 0x80000000400L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x80800000000000L, active1, 0x100480000008L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0x801000000000000L, active1, 0x800100090080L);
      case 118:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x1000008000000L);
      case 119:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x2000L);
      case 120:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x200000000000L);
      default :
         break;
   }
   return jjMoveNfa_1(5, 2);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000000L, active1, 0x1L);
      case 67:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x6410400004L);
      case 68:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x2800000000000000L, active1, 0x1100028280330L);
      case 70:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x41000000040L);
      case 71:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000000L, active1, 0L);
      case 72:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x800000000L);
      case 73:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000000000L, active1, 0x880004010008L);
      case 75:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x140000L);
      case 76:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x30000002800L);
      case 79:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x400000008400L);
      case 80:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x200000000L);
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x141021000L);
      case 83:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x2000000L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000000L, active1, 0x8080800000L);
      case 85:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000000L, active1, 0x4082L);
      case 89:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x4000000000000000L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x6410400004L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x2800000000000000L, active1, 0x1100028280330L);
      case 102:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x41000000040L);
      case 103:
         return jjMoveStringLiteralDfa4_1(active0, 0x8000000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa4_1(active0, 0x100000000000000L, active1, 0x880004010008L);
      case 107:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x140000L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x200000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x30000002800L);
      case 111:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x400000008400L);
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x200000000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x141021000L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0L, active1, 0x2000000L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_1(active0, 0x400000000000000L, active1, 0x8080800000L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000000000000L, active1, 0x4082L);
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(5, 3);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80000160800L);
      case 67:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x120L);
      case 68:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1000000L);
      case 69:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0xe000401040L);
      case 70:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x40000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1900000000L);
      case 75:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         break;
      case 76:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         break;
      case 78:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x600000000L);
      case 80:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80000000L);
      case 82:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x50002828c090L);
      case 83:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x20004000600L);
      case 84:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x10052012000L);
      case 89:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80000160800L);
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x120L);
      case 100:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1000000L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0xe000401040L);
      case 102:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x40000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x1900000000L);
      case 107:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         break;
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         break;
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x600000000L);
      case 112:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x80000000L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x50002828c090L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x20004000600L);
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x10052012000L);
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_1(active0, 0L, active1, 0x800000L);
      default :
         break;
   }
   return jjMoveNfa_1(5, 4);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_1(active1, 0x22080000L);
      case 66:
         return jjMoveStringLiteralDfa6_1(active1, 0x80100000000L);
      case 67:
         return jjMoveStringLiteralDfa6_1(active1, 0x8000000000L);
      case 68:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x6000000000L);
      case 69:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x40001000000L);
      case 71:
         return jjMoveStringLiteralDfa6_1(active1, 0x1000140000L);
      case 73:
         return jjMoveStringLiteralDfa6_1(active1, 0x10058200000L);
      case 76:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
         }
         break;
      case 78:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x600000000L);
      case 79:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x80000000L);
      case 80:
         return jjMoveStringLiteralDfa6_1(active1, 0x20000800000L);
      case 82:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x20000L);
      case 83:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x400000L);
      case 84:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x804000000L);
      case 89:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_1(active1, 0x22080000L);
      case 98:
         return jjMoveStringLiteralDfa6_1(active1, 0x80100000000L);
      case 99:
         return jjMoveStringLiteralDfa6_1(active1, 0x8000000000L);
      case 100:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x6000000000L);
      case 101:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x40001000000L);
      case 103:
         return jjMoveStringLiteralDfa6_1(active1, 0x1000140000L);
      case 105:
         return jjMoveStringLiteralDfa6_1(active1, 0x10058200000L);
      case 108:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
         }
         break;
      case 110:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x600000000L);
      case 111:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa6_1(active1, 0x20000800000L);
      case 114:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x20000L);
      case 115:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x400000L);
      case 116:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_1(active1, 0x804000000L);
      case 121:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(5, 5);
}
private int jjMoveStringLiteralDfa6_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_1(active1, 0x40000000L);
      case 67:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active1, 0x40000000000L);
      case 68:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active1, 0xa04000000L);
      case 76:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active1, 0x80000000000L);
      case 78:
         return jjMoveStringLiteralDfa7_1(active1, 0x482000000L);
      case 79:
         return jjMoveStringLiteralDfa7_1(active1, 0x20010000000L);
      case 83:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa7_1(active1, 0x18028000000L);
      case 85:
         return jjMoveStringLiteralDfa7_1(active1, 0x7100000000L);
      case 89:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_1(active1, 0x40000000L);
      case 99:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active1, 0x40000000000L);
      case 100:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active1, 0xa04000000L);
      case 108:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_1(active1, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_1(active1, 0x482000000L);
      case 111:
         return jjMoveStringLiteralDfa7_1(active1, 0x20010000000L);
      case 115:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_1(active1, 0x18028000000L);
      case 117:
         return jjMoveStringLiteralDfa7_1(active1, 0x7100000000L);
      case 121:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(5, 6);
}
private int jjMoveStringLiteralDfa7_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 6);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_1(active1, 0x800000000L);
      case 69:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active1, 0x8480000000L);
      case 76:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active1, 0x200000000L);
      case 82:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active1, 0x27000000000L);
      case 84:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active1, 0x40100000000L);
      case 89:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa8_1(active1, 0x800000000L);
      case 101:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active1, 0x8480000000L);
      case 108:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active1, 0x200000000L);
      case 114:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active1, 0x27000000000L);
      case 116:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_1(active1, 0x40100000000L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(5, 7);
}
private int jjMoveStringLiteralDfa8_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_1(active1, 0x3000000000L);
      case 67:
         return jjMoveStringLiteralDfa9_1(active1, 0x400000000L);
      case 68:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
         }
         break;
      case 69:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active1, 0x40000000000L);
      case 84:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active1, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa9_1(active1, 0x3000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_1(active1, 0x400000000L);
      case 100:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active1, 0x40000000000L);
      case 116:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_1(active1, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_1(5, 8);
}
private int jjMoveStringLiteralDfa9_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 8);
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
         }
         break;
      case 76:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_1(active1, 0x1000000000L);
      case 85:
         return jjMoveStringLiteralDfa10_1(active1, 0x800000000L);
      case 100:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
         }
         break;
      case 108:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_1(active1, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa10_1(active1, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_1(5, 9);
}
private int jjMoveStringLiteralDfa10_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 9);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa11_1(active1, 0x1000000000L);
      case 82:
         return jjMoveStringLiteralDfa11_1(active1, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa11_1(active1, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_1(active1, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_1(5, 10);
}
private int jjMoveStringLiteralDfa11_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 10);
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 11;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa12_1(active1, 0x1000000000L);
      case 101:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 11;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa12_1(active1, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_1(5, 11);
}
private int jjMoveStringLiteralDfa12_1(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_1(5, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_1(5, 11);
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 12;
         }
         break;
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_1(5, 12);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x0L, 0x0L, 0xffffffff00000000L, 0xffffffffffffffffL
};
private int jjMoveNfa_1(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(10, 12);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if ((0xffffffff00003700L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 113)
                     kind = 113;
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 15:
                  if (curChar == 34 && kind > 124)
                     kind = 124;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjAddStates(16, 17);
                  break;
               case 22:
                  if ((0xfffffffb00003700L & l) != 0L)
                     jjAddStates(18, 20);
                  break;
               case 25:
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 27:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0xfffffffb00003700L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if (curChar == 34 && kind > 133)
                     kind = 133;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddStates(0, 6);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 33:
                  if (curChar == 35)
                     jjCheckNAddStates(24, 27);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAddStates(28, 30);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 39:
                  if (curChar != 35)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if (curChar == 43)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(43, 42);
                  break;
               case 44:
                  if (curChar == 45)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(46, 45);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddStates(31, 34);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddStates(35, 37);
                  break;
               case 53:
                  if (curChar == 43)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(55, 54);
                  break;
               case 56:
                  if (curChar == 45)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(58, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(24, 22);
                  if ((0x100800401008004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(10, 12);
                  break;
               case 8:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 11:
                  if ((0x100800401008004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 14:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(14, 13);
                  break;
               case 16:
               case 18:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if (curChar == 95)
                     jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 20:
                  if (curChar == 92)
                     jjCheckNAddStates(18, 20);
                  break;
               case 21:
               case 24:
                  if (curChar == 92)
                     jjCheckNAdd(20);
                  break;
               case 22:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 23:
                  if (curChar == 92 && kind > 132)
                     kind = 132;
                  break;
               case 28:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(7, 9);
                  break;
               case 31:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 95)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 37:
                  if (curChar == 95)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 43:
                  if (curChar == 95)
                     jjCheckNAdd(42);
                  break;
               case 46:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 55:
                  if (curChar == 95)
                     jjCheckNAdd(54);
                  break;
               case 58:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(10, 12);
                  break;
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 39);
                  break;
               case 22:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 20);
                  break;
               case 28:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 0:
         jjmatchedKind = 6;
         return jjMoveNfa_3(5, 0);
      case 8:
         jjmatchedKind = 5;
         return jjMoveNfa_3(5, 0);
      case 9:
         jjmatchedKind = 4;
         return jjMoveNfa_3(5, 0);
      case 10:
         jjmatchedKind = 2;
         return jjMoveNfa_3(5, 0);
      case 12:
         jjmatchedKind = 7;
         return jjMoveNfa_3(5, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_3(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_3(5, 0);
      case 33:
         jjmatchedKind = 321;
         return jjMoveNfa_3(5, 0);
      case 36:
         jjmatchedKind = 322;
         return jjMoveNfa_3(5, 0);
      case 38:
         jjmatchedKind = 291;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x4000000000000000L);
      case 39:
         jjmatchedKind = 325;
         return jjMoveNfa_3(5, 0);
      case 40:
         jjmatchedKind = 301;
         return jjMoveNfa_3(5, 0);
      case 41:
         jjmatchedKind = 302;
         return jjMoveNfa_3(5, 0);
      case 42:
         jjmatchedKind = 287;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x40000000L);
      case 43:
         jjmatchedKind = 289;
         return jjMoveNfa_3(5, 0);
      case 44:
         jjmatchedKind = 305;
         return jjMoveNfa_3(5, 0);
      case 45:
         jjmatchedKind = 290;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x200000000000000L);
      case 46:
         jjmatchedKind = 324;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x10000000000000L);
      case 47:
         jjmatchedKind = 288;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x2000000000L);
      case 58:
         jjmatchedKind = 307;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x20000000000000L);
      case 59:
         jjmatchedKind = 306;
         return jjMoveNfa_3(5, 0);
      case 60:
         jjmatchedKind = 297;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x100008000000000L);
      case 61:
         jjmatchedKind = 292;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x40000000000L);
      case 62:
         jjmatchedKind = 296;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x4000000000L);
      case 64:
         jjmatchedKind = 323;
         return jjMoveNfa_3(5, 0);
      case 65:
         jjmatchedKind = 188;
         return jjMoveStringLiteralDfa1_3(0xc018000800000000L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_3(0x80000000000000L, 0x0L, 0x0L);
      case 69:
         jjmatchedKind = 204;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x26000L, 0x0L);
      case 70:
         jjmatchedKind = 210;
         return jjMoveNfa_3(5, 0);
      case 71:
         jjmatchedKind = 213;
         return jjMoveNfa_3(5, 0);
      case 73:
         return jjMoveStringLiteralDfa1_3(0x800000000000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_3(0x2000000000000L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_3(0x2100c400000000L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_3(0x440001000000000L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_3(0x304c00000000000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_3(0x3c0000000000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_3(0x2000000000L, 0x0L, 0x0L);
      case 85:
         jjmatchedKind = 242;
         return jjMoveNfa_3(5, 0);
      case 86:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x100L);
      case 87:
         jjmatchedKind = 247;
         return jjMoveNfa_3(5, 0);
      case 88:
         jjmatchedKind = 249;
         return jjMoveStringLiteralDfa1_3(0x30000000000L, 0x400000000000000L, 0x0L);
      case 91:
         jjmatchedKind = 299;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x3c00000000000000L);
      case 93:
         jjmatchedKind = 300;
         return jjMoveNfa_3(5, 0);
      case 97:
         return jjMoveStringLiteralDfa1_3(0x2018000800000000L, 0x180000000000000fL, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x1f0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_3(0x0L, 0xe00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_3(0x80000000000000L, 0x2000000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x18000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x4000000000180000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x400000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_3(0x800000000000000L, 0x7800000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_3(0x2000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_3(0x2100c400000000L, 0x800003fff8000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_3(0x440001000000000L, 0x1c0000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x200000000000L, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa1_3(0x304c00000000000L, 0x400000000000L, 0xeL);
      case 115:
         return jjMoveStringLiteralDfa1_3(0x3c0000000000L, 0x1800000000000L, 0x30L);
      case 116:
         return jjMoveStringLiteralDfa1_3(0x2000000000L, 0x2000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x78000000000000L, 0x200L);
      case 118:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0xc0L);
      case 119:
         return jjMoveStringLiteralDfa1_3(0x0L, 0x100000000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_3(0x30000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 303;
         return jjMoveNfa_3(5, 0);
      case 124:
         jjmatchedKind = 320;
         return jjMoveStringLiteralDfa1_3(0x0L, 0x0L, 0x80c0000000000000L);
      case 125:
         jjmatchedKind = 304;
         return jjMoveNfa_3(5, 0);
      case 160:
         jjmatchedKind = 8;
         return jjMoveNfa_3(5, 0);
      case 65533:
         jjmatchedKind = 9;
         return jjMoveNfa_3(5, 0);
      default :
         return jjMoveNfa_3(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_3(long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 0);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 1;
         }
         break;
      case 38:
         if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0L, active4, 0x800000000000000L);
      case 45:
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0L, active4, 0x1140000000000000L);
      case 46:
         if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0L, active4, 0x80000000000000L);
      case 62:
         if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_3(active2, 0x100004000000000L, active3, 0L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_3(active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_3(active2, 0x205000000000000L, active3, 0L, active4, 0L);
      case 70:
         if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 1;
         }
         break;
      case 71:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 1;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa2_3(active2, 0x10140000000000L, active3, 0L, active4, 0L);
      case 78:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active2, 0x20800000000L, active3, 0L, active4, 0L);
      case 79:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active2, 0x82c18400000000L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_3(active2, 0x400000000000000L, active3, 0L, active4, 0L);
      case 82:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active2, 0x280000000000L, active3, 0L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_3(active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_3(active2, 0x20000000000000L, active3, 0L, active4, 0x100L);
      case 88:
         if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_3(active2, 0x100004000000000L, active3, 0x4000000000000000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_3(active2, 0x2008000000000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0x400000L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_3(active2, 0x205000000000000L, active3, 0xa000007ff80800f0L, active4, 0x1eL);
      case 105:
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_3(active2, 0x10140000000000L, active3, 0x201L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0L, active4, 0x40L);
      case 110:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active2, 0x20800000000L, active3, 0x780c0001808002L, active4, 0x200L);
      case 111:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active2, 0x82c18400000000L, active3, 0x2438000100d00L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_3(active2, 0x400000000000000L, active3, 0L, active4, 0x80L);
      case 114:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_3(active2, 0x280000000000L, active3, 0x300000000000L, active4, 0x1L);
      case 115:
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0x180000000600000cL, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_3(active2, 0x40000000000000L, active3, 0x800000000000L, active4, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa2_3(active2, 0x20000000000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0x10000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_3(active2, 0L, active3, 0x1000000000000L, active4, 0L);
      case 124:
         if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_3(5, 1);
}
private int jjMoveStringLiteralDfa2_3(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 1);
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         break;
      case 68:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 2;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa3_3(active2, 0x400000000000000L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_3(active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 76:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0x20000000000000L, active3, 0L, active4, 0L);
      case 77:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa3_3(active2, 0x100004000000000L, active3, 0L, active4, 0x100L);
      case 79:
         return jjMoveStringLiteralDfa3_3(active2, 0x20000000000L, active3, 0L, active4, 0L);
      case 82:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 2;
         }
         break;
      case 83:
         if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 2;
         }
         break;
      case 84:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0x200000000000000L, active3, 0L, active4, 0L);
      case 87:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0x80000000000000L, active3, 0L, active4, 0L);
      case 93:
         if ((active4 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x800000000000L, active4, 0L);
      case 98:
         if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 2;
         }
         break;
      case 100:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x8002L, active4, 0L);
      case 101:
         if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0x400000000000000L, active3, 0x2c0000010000L, active4, 0L);
      case 102:
         if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x20000000000000f0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_3(active2, 0x40000000000000L, active3, 0x1000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x4008000000000000L, active4, 0L);
      case 108:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0x20000000000000L, active3, 0x480000L, active4, 0L);
      case 109:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa3_3(active2, 0x100004000000000L, active3, 0x1018000000400L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_3(active2, 0x2000020000000000L, active3, 0x300L, active4, 0x41L);
      case 112:
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0L, active4, 0x2L);
      case 113:
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0L, active4, 0x10L);
      case 114:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x100000L, active4, 0xa0L);
      case 115:
         if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x1800400000000004L, active4, 0xcL);
      case 116:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0x200000000000000L, active3, 0x170020000000000L, active4, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x4000800L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x8000000L, active4, 0L);
      case 119:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_3(active2, 0x80000000000000L, active3, 0x1L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x8000007ff0000000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_3(active2, 0L, active3, 0x8L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 2);
}
private int jjMoveStringLiteralDfa3_3(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 2);
   }
   switch(curChar)
   {
      case 68:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa4_3(active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa4_3(active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0L, active4, 0x100L);
      case 76:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0x80000000000000L, active3, 0L, active4, 0L);
      case 82:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 3;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa4_3(active2, 0x200000000000000L, active3, 0L, active4, 0L);
      case 97:
         if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x2000000000100001L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x800000000000L, active4, 0L);
      case 99:
         if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x1000000000200L, active4, 0L);
      case 100:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x18000000000L, active4, 0x40L);
      case 101:
         if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0x40000000000000L, active3, 0x9008004L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_3(active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x1000c0000000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x70000000000000L, active4, 0x200L);
      case 108:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x100L, active4, 0L);
      case 110:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0x80000000000000L, active3, 0x4010808L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x80000000000f0L, active4, 0xa2L);
      case 112:
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0L, active4, 0x1L);
      case 114:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0x2000000000000000L, active3, 0x4000000000000000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x400L, active4, 0L);
      case 116:
         if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_3(active2, 0L, active3, 0x7ff0400000L, active4, 0xcL);
      case 117:
         return jjMoveStringLiteralDfa4_3(active2, 0x200000000000000L, active3, 0x1800000000000000L, active4, 0x10L);
      case 118:
         if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_3(5, 3);
}
private int jjMoveStringLiteralDfa4_3(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 3);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa5_3(active2, 0x240000000000000L, active3, 0L, active4, 0L);
      case 84:
         if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active2, 0x80000000000000L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x1007fe0000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x8L, active4, 0L);
      case 100:
         if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x18000000100L, active4, 0x11L);
      case 105:
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 107:
         if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x4000000L, active4, 0L);
      case 108:
         if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x70800000100000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x1800000000000000L, active4, 0L);
      case 110:
         if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x4000000000000000L, active4, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0xc0000000000L, active4, 0L);
      case 112:
         if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active2, 0x240000000000000L, active3, 0x10000f4L, active4, 0xeL);
      case 116:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_3(active2, 0x80000000000000L, active3, 0x10800L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x2000000000000000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_3(active2, 0L, active3, 0x400001L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 4);
}
private int jjMoveStringLiteralDfa5_3(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 4);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x40000000000000L, active4, 0L);
      case 78:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 5;
         }
         break;
      case 79:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 5;
         }
         break;
      case 83:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 5;
         }
         break;
      case 95:
         if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x8L, active4, 0L);
      case 97:
         if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x1000040000100L, active4, 0L);
      case 101:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x5000007f000000e0L, active4, 0L);
      case 103:
         if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x1000000L, active4, 0xcL);
      case 108:
         if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x2000000000000000L, active4, 0L);
      case 110:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x4000000L, active4, 0x10L);
      case 111:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x800L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x400000L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0L, active4, 0x1L);
      case 115:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 5;
         }
         break;
      case 116:
         if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x90000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_3(active2, 0L, active3, 0x10000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 5);
}
private int jjMoveStringLiteralDfa6_3(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 5);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_3(active3, 0x80L, active4, 0L);
      case 48:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 6;
         }
         break;
      case 95:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_3(active3, 0x1000010000000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_3(active3, 0x10008L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_3(active3, 0x1000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_3(active3, 0L, active4, 0x1cL);
      case 101:
         if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_3(active3, 0x800L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_3(active3, 0x4000000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_3(active3, 0x4000000000000000L, active4, 0L);
      case 116:
         if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_3(active3, 0L, active4, 0x1L);
      case 118:
         return jjMoveStringLiteralDfa7_3(active3, 0x7e00000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 6);
}
private int jjMoveStringLiteralDfa7_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 6);
   }
   switch(curChar)
   {
      case 95:
         if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 7;
         }
         break;
      case 98:
         return jjMoveStringLiteralDfa8_3(active3, 0x8L, active4, 0L);
      case 101:
         if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_3(active3, 0x7e00000800L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_3(active3, 0x1000000000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_3(active3, 0x10000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_3(active3, 0x1000000000000L, active4, 0L);
      case 115:
         if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_3(active3, 0L, active4, 0x8L);
      case 118:
         return jjMoveStringLiteralDfa8_3(active3, 0x10000000000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa8_3(active3, 0x4000000L, active4, 0L);
      case 121:
         if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_3(5, 7);
}
private int jjMoveStringLiteralDfa8_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 7);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_3(active3, 0L, active4, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa9_3(active3, 0x10000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_3(active3, 0x10000L, active4, 0L);
      case 110:
         if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_3(active3, 0x7e00000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_3(active3, 0x8L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_3(active3, 0x1000000000000L, active4, 0L);
      case 115:
         if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 8;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa9_3(active3, 0x1000000000000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 8);
}
private int jjMoveStringLiteralDfa9_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 8);
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_3(active3, 0x1000000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_3(active3, 0x10000000000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa10_3(active3, 0L, active4, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa10_3(active3, 0x8L, active4, 0L);
      case 116:
         if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_3(active3, 0x7c00000000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa10_3(active3, 0x10000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 9);
}
private int jjMoveStringLiteralDfa10_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 9);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 10;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa11_3(active3, 0x7800000000L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_3(active3, 0x1000000000000000L, active4, 0L);
      case 116:
         if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_3(active3, 0x10000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_3(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 10);
}
private int jjMoveStringLiteralDfa11_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 10);
   }
   switch(curChar)
   {
      case 97:
         if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_3(active3, 0x1000001000000000L, active4, 0x8L);
      case 101:
         if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_3(active3, 0x4000000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_3(active3, 0x10000000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 11);
}
private int jjMoveStringLiteralDfa12_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 11);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 12;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa13_3(active3, 0x1000000000000000L, active4, 0L);
      case 114:
         if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_3(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 12);
}
private int jjMoveStringLiteralDfa13_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 12);
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_3(active3, 0L, active4, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa14_3(active3, 0x1000000000000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 13);
}
private int jjMoveStringLiteralDfa14_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 13);
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa15_3(active3, 0x1000000000000000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa15_3(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 14);
}
private int jjMoveStringLiteralDfa15_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 14);
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 15;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa16_3(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 15);
}
private int jjMoveStringLiteralDfa16_3(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 15);
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_3(active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_3(5, 16);
}
private int jjMoveStringLiteralDfa17_3(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjMoveNfa_3(5, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_3(5, 16);
   }
   switch(curChar)
   {
      case 101:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_3(5, 17);
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 273)
                        kind = 273;
                     jjCheckNAddStates(46, 52);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(53, 55);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(10, 12);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 10:
                  if (curChar == 34 && kind > 276)
                     kind = 276;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 279)
                     kind = 279;
                  jjAddStates(59, 60);
                  break;
               case 17:
                  if ((0xfffffffb00003700L & l) != 0L)
                     jjAddStates(61, 63);
                  break;
               case 20:
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(53, 55);
                  break;
               case 22:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0xfffffffb00003700L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 24:
                  if (curChar == 34 && kind > 285)
                     kind = 285;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddStates(46, 52);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 28:
                  if (curChar == 35)
                     jjCheckNAddStates(67, 70);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 31:
                  if (curChar == 46)
                     jjCheckNAddStates(71, 73);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 34:
                  if (curChar != 35)
                     break;
                  if (kind > 272)
                     kind = 272;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if (curChar == 43)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 272)
                     kind = 272;
                  jjCheckNAddTwoStates(38, 37);
                  break;
               case 39:
                  if (curChar == 45)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 272)
                     kind = 272;
                  jjCheckNAddTwoStates(41, 40);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddStates(74, 77);
                  break;
               case 44:
                  if (curChar == 46)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddStates(78, 80);
                  break;
               case 48:
                  if (curChar == 43)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(50, 49);
                  break;
               case 51:
                  if (curChar == 45)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(53, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 279)
                        kind = 279;
                     jjCheckNAddTwoStates(12, 13);
                  }
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(19, 17);
                  if ((0x100800401008004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(10, 12);
                  break;
               case 6:
                  if ((0x100800401008004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 9:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(9, 8);
                  break;
               case 11:
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 279)
                     kind = 279;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if (curChar == 95)
                     jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 15:
                  if (curChar == 92)
                     jjCheckNAddStates(61, 63);
                  break;
               case 16:
               case 19:
                  if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 17:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 18:
                  if (curChar == 92 && kind > 284)
                     kind = 284;
                  break;
               case 23:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(53, 55);
                  break;
               case 26:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 95)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 32:
                  if (curChar == 95)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 38:
                  if (curChar == 95)
                     jjCheckNAdd(37);
                  break;
               case 41:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(84, 86);
                  break;
               case 50:
                  if (curChar == 95)
                     jjCheckNAdd(49);
                  break;
               case 53:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(10, 12);
                  break;
               case 17:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(61, 63);
                  break;
               case 23:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(53, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 0:
         jjmatchedKind = 6;
         return jjMoveNfa_2(5, 0);
      case 8:
         jjmatchedKind = 5;
         return jjMoveNfa_2(5, 0);
      case 9:
         jjmatchedKind = 4;
         return jjMoveNfa_2(5, 0);
      case 10:
         jjmatchedKind = 2;
         return jjMoveNfa_2(5, 0);
      case 12:
         jjmatchedKind = 7;
         return jjMoveNfa_2(5, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_2(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_2(5, 0);
      case 33:
         jjmatchedKind = 321;
         return jjMoveNfa_2(5, 0);
      case 36:
         jjmatchedKind = 322;
         return jjMoveNfa_2(5, 0);
      case 38:
         jjmatchedKind = 291;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x4000000000000000L);
      case 39:
         jjmatchedKind = 325;
         return jjMoveNfa_2(5, 0);
      case 40:
         jjmatchedKind = 301;
         return jjMoveNfa_2(5, 0);
      case 41:
         jjmatchedKind = 302;
         return jjMoveNfa_2(5, 0);
      case 42:
         jjmatchedKind = 287;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x40000000L);
      case 43:
         jjmatchedKind = 289;
         return jjMoveNfa_2(5, 0);
      case 44:
         jjmatchedKind = 305;
         return jjMoveNfa_2(5, 0);
      case 45:
         jjmatchedKind = 290;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x200000000000000L);
      case 46:
         jjmatchedKind = 324;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x10000000000000L);
      case 47:
         jjmatchedKind = 288;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x2000000000L);
      case 58:
         jjmatchedKind = 307;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x20000000000000L);
      case 59:
         jjmatchedKind = 306;
         return jjMoveNfa_2(5, 0);
      case 60:
         jjmatchedKind = 297;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x100008000000000L);
      case 61:
         jjmatchedKind = 292;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x40000000000L);
      case 62:
         jjmatchedKind = 296;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x4000000000L);
      case 64:
         jjmatchedKind = 323;
         return jjMoveNfa_2(5, 0);
      case 65:
         jjmatchedKind = 188;
         return jjMoveStringLiteralDfa1_2(0xc018000800000000L, 0x0L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_2(0x80000000000000L, 0x0L, 0x0L);
      case 69:
         jjmatchedKind = 204;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x26000L, 0x0L);
      case 70:
         jjmatchedKind = 210;
         return jjMoveNfa_2(5, 0);
      case 71:
         jjmatchedKind = 213;
         return jjMoveNfa_2(5, 0);
      case 73:
         return jjMoveStringLiteralDfa1_2(0x800000000000000L, 0x0L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_2(0x2000000000000L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_2(0x2100c400000000L, 0x0L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_2(0x440001000000000L, 0x0L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_2(0x304c00000000000L, 0x0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_2(0x3c0000000000L, 0x0L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_2(0x2000000000L, 0x0L, 0x0L);
      case 85:
         jjmatchedKind = 242;
         return jjMoveNfa_2(5, 0);
      case 86:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x100L);
      case 87:
         jjmatchedKind = 247;
         return jjMoveNfa_2(5, 0);
      case 88:
         jjmatchedKind = 249;
         return jjMoveStringLiteralDfa1_2(0x30000000000L, 0x400000000000000L, 0x0L);
      case 91:
         jjmatchedKind = 299;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x3c00000000000000L);
      case 93:
         jjmatchedKind = 300;
         return jjMoveNfa_2(5, 0);
      case 97:
         return jjMoveStringLiteralDfa1_2(0x2018000800000000L, 0x180000000000000fL, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x1f0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_2(0x0L, 0xe00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_2(0x80000000000000L, 0x2000000000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x18000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x4000000000180000L, 0x0L);
      case 104:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x400000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x800000000000000L, 0x7800000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_2(0x2000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_2(0x2100c400000000L, 0x800003fff8000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_2(0x440001000000000L, 0x1c0000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x200000000000L, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x304c00000000000L, 0x400000000000L, 0xeL);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x3c0000000000L, 0x1800000000000L, 0x30L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x2000000000L, 0x2000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x78000000000000L, 0x200L);
      case 118:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0xc0L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x0L, 0x100000000000000L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_2(0x30000000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 303;
         return jjMoveNfa_2(5, 0);
      case 124:
         jjmatchedKind = 320;
         return jjMoveStringLiteralDfa1_2(0x0L, 0x0L, 0x80c0000000000000L);
      case 125:
         jjmatchedKind = 304;
         return jjMoveNfa_2(5, 0);
      case 160:
         jjmatchedKind = 8;
         return jjMoveNfa_2(5, 0);
      case 65533:
         jjmatchedKind = 9;
         return jjMoveNfa_2(5, 0);
      default :
         return jjMoveNfa_2(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active2, long active3, long active4)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 0);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 250;
            jjmatchedPos = 1;
         }
         break;
      case 38:
         if ((active4 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 318;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active4 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 286;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 314;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0L, active4, 0x800000000000000L);
      case 45:
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0L, active4, 0x1140000000000000L);
      case 46:
         if ((active4 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 308;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active4 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 293;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 294;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 295;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 309;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 317;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0L, active4, 0x80000000000000L);
      case 62:
         if ((active4 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 298;
            jjmatchedPos = 1;
         }
         else if ((active4 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 313;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_2(active2, 0x100004000000000L, active3, 0L, active4, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_2(active2, 0x8000000000000L, active3, 0L, active4, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_2(active2, 0x205000000000000L, active3, 0L, active4, 0L);
      case 70:
         if ((active2 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 190;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x2000L) != 0L)
         {
            jjmatchedKind = 205;
            jjmatchedPos = 1;
         }
         break;
      case 71:
         if ((active2 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 191;
            jjmatchedPos = 1;
         }
         else if ((active3 & 0x4000L) != 0L)
         {
            jjmatchedKind = 206;
            jjmatchedPos = 1;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa2_2(active2, 0x10140000000000L, active3, 0L, active4, 0L);
      case 78:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active2, 0x20800000000L, active3, 0L, active4, 0L);
      case 79:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active2, 0x82c18400000000L, active3, 0L, active4, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_2(active2, 0x400000000000000L, active3, 0L, active4, 0L);
      case 82:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active2, 0x280000000000L, active3, 0L, active4, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_2(active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_2(active2, 0x20000000000000L, active3, 0L, active4, 0x100L);
      case 88:
         if ((active3 & 0x20000L) != 0L)
         {
            jjmatchedKind = 209;
            jjmatchedPos = 1;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa2_2(active2, 0x100004000000000L, active3, 0x4000000000000000L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_2(active2, 0x2008000000000000L, active3, 0L, active4, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0x400000L, active4, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active2, 0x205000000000000L, active3, 0xa000007ff80800f0L, active4, 0x1eL);
      case 105:
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_2(active2, 0x10140000000000L, active3, 0x201L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0L, active4, 0x40L);
      case 110:
         if ((active2 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 187;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active2, 0x20800000000L, active3, 0x780c0001808002L, active4, 0x200L);
      case 111:
         if ((active2 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 165;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active2, 0x82c18400000000L, active3, 0x2438000100d00L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_2(active2, 0x400000000000000L, active3, 0L, active4, 0x80L);
      case 114:
         if ((active2 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 164;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_2(active2, 0x280000000000L, active3, 0x300000000000L, active4, 0x1L);
      case 115:
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0x180000000600000cL, active4, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_2(active2, 0x40000000000000L, active3, 0x800000000000L, active4, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active2, 0x20000000000000L, active3, 0L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0x10000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_2(active2, 0L, active3, 0x1000000000000L, active4, 0L);
      case 124:
         if ((active4 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 319;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_2(5, 1);
}
private int jjMoveStringLiteralDfa2_2(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 1);
   }
   switch(curChar)
   {
      case 62:
         if ((active4 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 310;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 311;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 312;
            jjmatchedPos = 2;
         }
         else if ((active4 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 316;
            jjmatchedPos = 2;
         }
         break;
      case 65:
         if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         break;
      case 68:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 2;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa3_2(active2, 0x400000000000000L, active3, 0L, active4, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_2(active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 76:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0x20000000000000L, active3, 0L, active4, 0L);
      case 77:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         break;
      case 78:
         return jjMoveStringLiteralDfa3_2(active2, 0x100004000000000L, active3, 0L, active4, 0x100L);
      case 79:
         return jjMoveStringLiteralDfa3_2(active2, 0x20000000000L, active3, 0L, active4, 0L);
      case 82:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 2;
         }
         break;
      case 83:
         if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 2;
         }
         break;
      case 84:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0x200000000000000L, active3, 0L, active4, 0L);
      case 87:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0x80000000000000L, active3, 0L, active4, 0L);
      case 93:
         if ((active4 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 315;
            jjmatchedPos = 2;
         }
         break;
      case 97:
         if ((active2 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 172;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 173;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x800000000000L, active4, 0L);
      case 98:
         if ((active3 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 217;
            jjmatchedPos = 2;
         }
         break;
      case 100:
         if ((active2 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 163;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 177;
            jjmatchedPos = 2;
         }
         else if ((active3 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 236;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x8002L, active4, 0L);
      case 101:
         if ((active3 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 241;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0x400000000000000L, active3, 0x2c0000010000L, active4, 0L);
      case 102:
         if ((active3 & 0x800000L) != 0L)
         {
            jjmatchedKind = 215;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x20000000000000f0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_2(active2, 0x40000000000000L, active3, 0x1000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x4008000000000000L, active4, 0L);
      case 108:
         if ((active2 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 170;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 171;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 174;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 180;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0x20000000000000L, active3, 0x480000L, active4, 0L);
      case 109:
         if ((active2 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 178;
            jjmatchedPos = 2;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa3_2(active2, 0x100004000000000L, active3, 0x1018000000400L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_2(active2, 0x2000020000000000L, active3, 0x300L, active4, 0x41L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0L, active4, 0x2L);
      case 113:
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0L, active4, 0x10L);
      case 114:
         if ((active2 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 167;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 175;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x100000L, active4, 0xa0L);
      case 115:
         if ((active2 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 179;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x1800400000000004L, active4, 0xcL);
      case 116:
         if ((active2 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 162;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0x200000000000000L, active3, 0x170020000000000L, active4, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x4000800L, active4, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x8000000L, active4, 0L);
      case 119:
         if ((active2 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 176;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active2, 0x80000000000000L, active3, 0x1L, active4, 0L);
      case 120:
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x8000007ff0000000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_2(active2, 0L, active3, 0x8L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 2);
}
private int jjMoveStringLiteralDfa3_2(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 2);
   }
   switch(curChar)
   {
      case 68:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         return jjMoveStringLiteralDfa4_2(active2, 0x40000000000000L, active3, 0L, active4, 0L);
      case 71:
         return jjMoveStringLiteralDfa4_2(active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 73:
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0L, active4, 0x100L);
      case 76:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         break;
      case 78:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0x80000000000000L, active3, 0L, active4, 0L);
      case 82:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 3;
         }
         break;
      case 85:
         return jjMoveStringLiteralDfa4_2(active2, 0x200000000000000L, active3, 0L, active4, 0L);
      case 97:
         if ((active3 & 0x2L) != 0L)
         {
            jjmatchedKind = 193;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x2000000000100001L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x800000000000L, active4, 0L);
      case 99:
         if ((active3 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 233;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x1000000000200L, active4, 0L);
      case 100:
         if ((active2 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 166;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x18000000000L, active4, 0x40L);
      case 101:
         if ((active3 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 238;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0x40000000000000L, active3, 0x9008004L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_2(active2, 0x100000000000000L, active3, 0L, active4, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x1000c0000000000L, active4, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x70000000000000L, active4, 0x200L);
      case 108:
         if ((active2 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 181;
            jjmatchedPos = 3;
         }
         else if ((active3 & 0x80000L) != 0L)
         {
            jjmatchedKind = 211;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x100L, active4, 0L);
      case 110:
         if ((active2 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 186;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0x80000000000000L, active3, 0x4010808L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x80000000000f0L, active4, 0xa2L);
      case 112:
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0L, active4, 0x1L);
      case 114:
         if ((active2 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 169;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0x2000000000000000L, active3, 0x4000000000000000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x400L, active4, 0L);
      case 116:
         if ((active3 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 255;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active2, 0L, active3, 0x7ff0400000L, active4, 0xcL);
      case 117:
         return jjMoveStringLiteralDfa4_2(active2, 0x200000000000000L, active3, 0x1800000000000000L, active4, 0x10L);
      case 118:
         if ((active3 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 237;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_2(5, 3);
}
private int jjMoveStringLiteralDfa4_2(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 3);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 220;
            jjmatchedPos = 4;
         }
         break;
      case 69:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 4;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa5_2(active2, 0x240000000000000L, active3, 0L, active4, 0L);
      case 84:
         if ((active4 & 0x100L) != 0L)
         {
            jjmatchedKind = 264;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active2, 0x80000000000000L, active3, 0L, active4, 0L);
      case 95:
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x1007fe0000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x8L, active4, 0L);
      case 100:
         if ((active3 & 0x8000L) != 0L)
         {
            jjmatchedKind = 207;
            jjmatchedPos = 4;
         }
         break;
      case 101:
         if ((active2 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 184;
            jjmatchedPos = 4;
         }
         else if ((active4 & 0x40L) != 0L)
         {
            jjmatchedKind = 262;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x18000000100L, active4, 0x11L);
      case 105:
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x100000000000000L, active4, 0L);
      case 107:
         if ((active3 & 0x200L) != 0L)
         {
            jjmatchedKind = 201;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x4000000L, active4, 0L);
      case 108:
         if ((active4 & 0x200L) != 0L)
         {
            jjmatchedKind = 265;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x70800000100000L, active4, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x1800000000000000L, active4, 0L);
      case 110:
         if ((active3 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 243;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x4000000000000000L, active4, 0x20L);
      case 111:
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0xc0000000000L, active4, 0L);
      case 112:
         if ((active4 & 0x80L) != 0L)
         {
            jjmatchedKind = 263;
            jjmatchedPos = 4;
         }
         break;
      case 114:
         if ((active3 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 219;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active2, 0x240000000000000L, active3, 0x10000f4L, active4, 0xeL);
      case 116:
         if ((active2 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 189;
            jjmatchedPos = 4;
         }
         else if ((active3 & 0x400L) != 0L)
         {
            jjmatchedKind = 202;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_2(active2, 0x80000000000000L, active3, 0x10800L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x2000000000000000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_2(active2, 0L, active3, 0x400001L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 4);
}
private int jjMoveStringLiteralDfa5_2(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 4);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 245;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x40000000000000L, active4, 0L);
      case 78:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 5;
         }
         break;
      case 79:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 5;
         }
         break;
      case 83:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 5;
         }
         break;
      case 95:
         if ((active3 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 244;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x8L, active4, 0L);
      case 97:
         if ((active3 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 221;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x1000040000100L, active4, 0L);
      case 101:
         if ((active3 & 0x10L) != 0L)
         {
            jjmatchedKind = 196;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 223;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 239;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 251;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x5000007f000000e0L, active4, 0L);
      case 103:
         if ((active4 & 0x20L) != 0L)
         {
            jjmatchedKind = 261;
            jjmatchedPos = 5;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x1000000L, active4, 0xcL);
      case 108:
         if ((active3 & 0x100000L) != 0L)
         {
            jjmatchedKind = 212;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x2000000000000000L, active4, 0L);
      case 110:
         if ((active2 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 185;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 248;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x4000000L, active4, 0x10L);
      case 111:
         if ((active2 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 183;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x800L, active4, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x400000L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0L, active4, 0x1L);
      case 115:
         if ((active2 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x1L) != 0L)
         {
            jjmatchedKind = 192;
            jjmatchedPos = 5;
         }
         break;
      case 116:
         if ((active3 & 0x4L) != 0L)
         {
            jjmatchedKind = 194;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 231;
            jjmatchedPos = 5;
         }
         else if ((active3 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 234;
            jjmatchedPos = 5;
         }
         else if ((active4 & 0x2L) != 0L)
         {
            jjmatchedKind = 257;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x90000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_2(active2, 0L, active3, 0x10000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 5);
}
private int jjMoveStringLiteralDfa6_2(long old2, long active2, long old3, long active3, long old4, long active4)
{
   if (((active2 &= old2) | (active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 5);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x40L) != 0L)
         {
            jjmatchedKind = 198;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 222;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 224;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active3, 0x80L, active4, 0L);
      case 48:
         if ((active3 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 235;
            jjmatchedPos = 6;
         }
         break;
      case 95:
         if ((active3 & 0x20L) != 0L)
         {
            jjmatchedKind = 197;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 246;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active3, 0x1000010000000000L, active4, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_2(active3, 0x10008L, active4, 0L);
      case 98:
         return jjMoveStringLiteralDfa7_2(active3, 0x1000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_2(active3, 0L, active4, 0x1cL);
      case 101:
         if ((active3 & 0x400000L) != 0L)
         {
            jjmatchedKind = 214;
            jjmatchedPos = 6;
         }
         break;
      case 110:
         if ((active3 & 0x100L) != 0L)
         {
            jjmatchedKind = 200;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active3, 0x800L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_2(active3, 0x4000000L, active4, 0L);
      case 115:
         return jjMoveStringLiteralDfa7_2(active3, 0x4000000000000000L, active4, 0L);
      case 116:
         if ((active3 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 216;
            jjmatchedPos = 6;
         }
         else if ((active3 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 253;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_2(active3, 0L, active4, 0x1L);
      case 118:
         return jjMoveStringLiteralDfa7_2(active3, 0x7e00000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 6);
}
private int jjMoveStringLiteralDfa7_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 6);
   }
   switch(curChar)
   {
      case 95:
         if ((active3 & 0x80L) != 0L)
         {
            jjmatchedKind = 199;
            jjmatchedPos = 7;
         }
         break;
      case 98:
         return jjMoveStringLiteralDfa8_2(active3, 0x8L, active4, 0L);
      case 101:
         if ((active4 & 0x10L) != 0L)
         {
            jjmatchedKind = 260;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_2(active3, 0x7e00000800L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa8_2(active3, 0x1000000000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_2(active3, 0x10000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_2(active3, 0x1000000000000L, active4, 0L);
      case 115:
         if ((active3 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 254;
            jjmatchedPos = 7;
         }
         break;
      case 116:
         if ((active4 & 0x4L) != 0L)
         {
            jjmatchedKind = 258;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_2(active3, 0L, active4, 0x8L);
      case 118:
         return jjMoveStringLiteralDfa8_2(active3, 0x10000000000L, active4, 0L);
      case 119:
         return jjMoveStringLiteralDfa8_2(active3, 0x4000000L, active4, 0L);
      case 121:
         if ((active4 & 0x1L) != 0L)
         {
            jjmatchedKind = 256;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_2(5, 7);
}
private int jjMoveStringLiteralDfa8_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 7);
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_2(active3, 0L, active4, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa9_2(active3, 0x10000000000L, active4, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_2(active3, 0x10000L, active4, 0L);
      case 110:
         if ((active3 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 218;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_2(active3, 0x7e00000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa9_2(active3, 0x8L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_2(active3, 0x1000000000000L, active4, 0L);
      case 115:
         if ((active3 & 0x800L) != 0L)
         {
            jjmatchedKind = 203;
            jjmatchedPos = 8;
         }
         break;
      case 117:
         return jjMoveStringLiteralDfa9_2(active3, 0x1000000000000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 8);
}
private int jjMoveStringLiteralDfa9_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 8);
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_2(active3, 0x1000000000000000L, active4, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_2(active3, 0x10000000000L, active4, 0L);
      case 103:
         return jjMoveStringLiteralDfa10_2(active3, 0L, active4, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa10_2(active3, 0x8L, active4, 0L);
      case 116:
         if ((active3 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 225;
            jjmatchedPos = 9;
         }
         else if ((active3 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 240;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_2(active3, 0x7c00000000L, active4, 0L);
      case 121:
         return jjMoveStringLiteralDfa10_2(active3, 0x10000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 9);
}
private int jjMoveStringLiteralDfa10_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 9);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x10000L) != 0L)
         {
            jjmatchedKind = 208;
            jjmatchedPos = 10;
         }
         else if ((active3 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 226;
            jjmatchedPos = 10;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa11_2(active3, 0x7800000000L, active4, 0L);
      case 114:
         return jjMoveStringLiteralDfa11_2(active3, 0x1000000000000000L, active4, 0L);
      case 116:
         if ((active3 & 0x8L) != 0L)
         {
            jjmatchedKind = 195;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_2(active3, 0x10000000000L, active4, 0L);
      case 117:
         return jjMoveStringLiteralDfa11_2(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 10);
}
private int jjMoveStringLiteralDfa11_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 10);
   }
   switch(curChar)
   {
      case 97:
         if ((active3 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 227;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_2(active3, 0x1000001000000000L, active4, 0x8L);
      case 101:
         if ((active3 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 229;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_2(active3, 0x4000000000L, active4, 0L);
      case 111:
         return jjMoveStringLiteralDfa12_2(active3, 0x10000000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 11);
}
private int jjMoveStringLiteralDfa12_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 11);
   }
   switch(curChar)
   {
      case 33:
         if ((active3 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 228;
            jjmatchedPos = 12;
         }
         else if ((active3 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 230;
            jjmatchedPos = 12;
         }
         break;
      case 110:
         return jjMoveStringLiteralDfa13_2(active3, 0x1000000000000000L, active4, 0L);
      case 114:
         if ((active3 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 232;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_2(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 12);
}
private int jjMoveStringLiteralDfa13_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 12);
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_2(active3, 0L, active4, 0x8L);
      case 116:
         return jjMoveStringLiteralDfa14_2(active3, 0x1000000000000000L, active4, 0L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 13);
}
private int jjMoveStringLiteralDfa14_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 13);
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa15_2(active3, 0x1000000000000000L, active4, 0L);
      case 110:
         return jjMoveStringLiteralDfa15_2(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 14);
}
private int jjMoveStringLiteralDfa15_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 14);
   }
   switch(curChar)
   {
      case 101:
         if ((active3 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 252;
            jjmatchedPos = 15;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa16_2(active3, 0L, active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 15);
}
private int jjMoveStringLiteralDfa16_2(long old3, long active3, long old4, long active4)
{
   if (((active3 &= old3) | (active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 15);
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa17_2(active4, 0x8L);
      default :
         break;
   }
   return jjMoveNfa_2(5, 16);
}
private int jjMoveStringLiteralDfa17_2(long old4, long active4)
{
   if (((active4 &= old4)) == 0L)
      return jjMoveNfa_2(5, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_2(5, 16);
   }
   switch(curChar)
   {
      case 101:
         if ((active4 & 0x8L) != 0L)
         {
            jjmatchedKind = 259;
            jjmatchedPos = 17;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_2(5, 17);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 273)
                        kind = 273;
                     jjCheckNAddStates(0, 6);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(7, 8);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(10, 12);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 7:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(7, 8);
                  break;
               case 8:
                  if ((0xffffffff00003700L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 39 && kind > 161)
                     kind = 161;
                  break;
               case 12:
                  if (curChar == 34)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 15:
                  if (curChar == 34 && kind > 276)
                     kind = 276;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 279)
                     kind = 279;
                  jjAddStates(16, 17);
                  break;
               case 22:
                  if ((0xfffffffb00003700L & l) != 0L)
                     jjAddStates(18, 20);
                  break;
               case 25:
               case 26:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 27:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0xfffffffb00003700L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 29:
                  if (curChar == 34 && kind > 285)
                     kind = 285;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddStates(0, 6);
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 33:
                  if (curChar == 35)
                     jjCheckNAddStates(24, 27);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAddStates(28, 30);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 39:
                  if (curChar != 35)
                     break;
                  if (kind > 272)
                     kind = 272;
                  jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 41:
                  if (curChar == 43)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 272)
                     kind = 272;
                  jjCheckNAddTwoStates(43, 42);
                  break;
               case 44:
                  if (curChar == 45)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 272)
                     kind = 272;
                  jjCheckNAddTwoStates(46, 45);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddStates(31, 34);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddStates(35, 37);
                  break;
               case 53:
                  if (curChar == 43)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(55, 54);
                  break;
               case 56:
                  if (curChar == 45)
                     jjCheckNAdd(57);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 273)
                     kind = 273;
                  jjCheckNAddTwoStates(58, 57);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 279)
                        kind = 279;
                     jjCheckNAddTwoStates(17, 18);
                  }
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(24, 22);
                  if ((0x100800401008004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(10, 12);
                  break;
               case 8:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(38, 39);
                  break;
               case 11:
                  if ((0x100800401008004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 14:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(14, 13);
                  break;
               case 16:
               case 18:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 279)
                     kind = 279;
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if (curChar == 95)
                     jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(24, 22);
                  break;
               case 20:
                  if (curChar == 92)
                     jjCheckNAddStates(18, 20);
                  break;
               case 21:
               case 24:
                  if (curChar == 92)
                     jjCheckNAdd(20);
                  break;
               case 22:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(18, 20);
                  break;
               case 23:
                  if (curChar == 92 && kind > 284)
                     kind = 284;
                  break;
               case 28:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(7, 9);
                  break;
               case 31:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if (curChar == 95)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(24, 27);
                  break;
               case 37:
                  if (curChar == 95)
                     jjCheckNAdd(38);
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(28, 30);
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(40, 42);
                  break;
               case 43:
                  if (curChar == 95)
                     jjCheckNAdd(42);
                  break;
               case 46:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(43, 45);
                  break;
               case 55:
                  if (curChar == 95)
                     jjCheckNAdd(54);
                  break;
               case 58:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(10, 12);
                  break;
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 39);
                  break;
               case 22:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 20);
                  break;
               case 28:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 0:
         jjmatchedKind = 6;
         return jjMoveNfa_0(5, 0);
      case 8:
         jjmatchedKind = 5;
         return jjMoveNfa_0(5, 0);
      case 9:
         jjmatchedKind = 4;
         return jjMoveNfa_0(5, 0);
      case 10:
         jjmatchedKind = 2;
         return jjMoveNfa_0(5, 0);
      case 12:
         jjmatchedKind = 7;
         return jjMoveNfa_0(5, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_0(5, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(5, 0);
      case 38:
         jjmatchedKind = 139;
         return jjMoveNfa_0(5, 0);
      case 39:
         jjmatchedKind = 150;
         return jjMoveNfa_0(5, 0);
      case 40:
         jjmatchedKind = 151;
         return jjMoveNfa_0(5, 0);
      case 41:
         jjmatchedKind = 152;
         return jjMoveNfa_0(5, 0);
      case 42:
         jjmatchedKind = 135;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40L);
      case 43:
         jjmatchedKind = 137;
         return jjMoveNfa_0(5, 0);
      case 44:
         jjmatchedKind = 147;
         return jjMoveNfa_0(5, 0);
      case 45:
         jjmatchedKind = 138;
         return jjMoveNfa_0(5, 0);
      case 46:
         jjmatchedKind = 156;
         return jjMoveNfa_0(5, 0);
      case 47:
         jjmatchedKind = 136;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000L);
      case 58:
         jjmatchedKind = 148;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000L);
      case 59:
         jjmatchedKind = 146;
         return jjMoveNfa_0(5, 0);
      case 60:
         jjmatchedKind = 145;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x208000L);
      case 61:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000000L);
      case 62:
         jjmatchedKind = 144;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4800000070000000L, 0x100900000601L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x110000008000000L, 0x44L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x1001202000000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400002000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x84100000000000L, 0x10008L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x2000000040000L, 0x10000000L, 0x0L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x21200002L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x1000000000003800L, 0x40004000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x2040000000000000L, 0xe0000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x84000000L, 0x0L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x24d00000000L, 0x200000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x82000038000L, 0x10L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x8040000000000L, 0xe080500000L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x8000001003000000L, 0x4000040080a0L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0xf00000L, 0x8801900L, 0x0L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x20010000004000L, 0x20000000000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x400000000080000L, 0x840000000000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x201600000000000L, 0x0L, 0x0L);
      case 88:
         return jjMoveStringLiteralDfa1_0(0x8200000000L, 0x0L, 0x0L);
      case 91:
         jjmatchedKind = 153;
         return jjMoveNfa_0(5, 0);
      case 93:
         jjmatchedKind = 154;
         return jjMoveNfa_0(5, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4800000070000000L, 0x100900000601L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x110000008000000L, 0x44L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x1001202000000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400002000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x84100000000000L, 0x10008L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000040000L, 0x10000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x21200002L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1000000000003800L, 0x40004000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x2040000000000000L, 0xe0000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x84000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x24d00000000L, 0x200000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x82000038000L, 0x10L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8040000000000L, 0xe080500000L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x8000001003000000L, 0x4000040080a0L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0xf00000L, 0x8801900L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20010000004000L, 0x20000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x400000000080000L, 0x840000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x201600000000000L, 0x0L, 0x0L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x8200000000L, 0x0L, 0x0L);
      case 123:
         jjmatchedKind = 159;
         return jjMoveNfa_0(5, 0);
      case 124:
         jjmatchedKind = 158;
         return jjMoveNfa_0(5, 0);
      case 125:
         jjmatchedKind = 160;
         return jjMoveNfa_0(5, 0);
      case 160:
         jjmatchedKind = 8;
         return jjMoveNfa_0(5, 0);
      case 65533:
         jjmatchedKind = 9;
         return jjMoveNfa_0(5, 0);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 0);
   }
   switch(curChar)
   {
      case 42:
         if ((active2 & 0x40L) != 0L)
         {
            jjmatchedKind = 134;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active2 & 0x2000L) != 0L)
         {
            jjmatchedKind = 141;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x4000L) != 0L)
         {
            jjmatchedKind = 142;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000L) != 0L)
         {
            jjmatchedKind = 143;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 155;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 1;
         }
         else if ((active2 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 157;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000a20004000000L, active1, 0x80000100000L, active2, 0L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x600L, active2, 0L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001100000000L, active1, 0x60002c2081a0L, active2, 0L);
      case 70:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x200410000000000L, active1, 0x1000L, active2, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0x4000e0800L, active2, 0L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000010300000L, active1, 0xdL, active2, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 78:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1400108020000000L, active1, 0x840040010000L, active2, 0L);
      case 79:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x58000e83040000L, active1, 0x1001282002000L, active2, 0L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 82:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000c00000L, active1, 0x2e800400002L, active2, 0L);
      case 83:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x100000000000L, active2, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000010L, active2, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x46008000000L, active1, 0x10011800040L, active2, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0xa000a20004000000L, active1, 0x80000100000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x600L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001100000000L, active1, 0x60002c2081a0L, active2, 0L);
      case 102:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x200410000000000L, active1, 0x1000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000000L, active1, 0x4000e0800L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000010300000L, active1, 0xdL, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000L, active2, 0L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1400108020000000L, active1, 0x840040010000L, active2, 0L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x58000e83040000L, active1, 0x1001282002000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 114:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000c00000L, active1, 0x2e800400002L, active2, 0L);
      case 115:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x100000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000010L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x46008000000L, active1, 0x10011800040L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjMoveNfa_0(5, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 1);
   }
   switch(curChar)
   {
      case 65:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x70001001000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x820000L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800108200L);
      case 68:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x490000000000L, active1, 0x40000000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x4000800L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x604200000000000L, active1, 0x1L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 76:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000000L, active1, 0x100L);
      case 77:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000020000000000L, active1, 0x1032240000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040008000000000L, active1, 0xe000400006L);
      case 80:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x400000004000L);
      case 82:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4008040000000000L, active1, 0x80000000400L);
      case 83:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000000000L, active1, 0x100480000008L);
      case 84:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x801000000000000L, active1, 0x800100090080L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000008000000L);
      case 87:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 88:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L);
      case 97:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x70001001000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x820000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800108200L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x490000000000L, active1, 0x40000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000000L, active1, 0x4000800L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x604200000000000L, active1, 0x1L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 108:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2004000000000L, active1, 0x100L);
      case 109:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000020000000000L, active1, 0x1032240000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1040008000000000L, active1, 0xe000400006L);
      case 112:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0x400000004000L);
      case 114:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x4008040000000000L, active1, 0x80000000400L);
      case 115:
         if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000000000L, active1, 0x100480000008L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x801000000000000L, active1, 0x800100090080L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000008000000L);
      case 119:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x1L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6410400004L);
      case 68:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         break;
      case 69:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2800000000000000L, active1, 0x1100028280330L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x41000000040L);
      case 71:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 72:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x880004010008L);
      case 75:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x140000L);
      case 76:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000002800L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000008400L);
      case 80:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L);
      case 82:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x141021000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x8080800000L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x4082L);
      case 89:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x6410400004L);
      case 100:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 3;
         }
         break;
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2800000000000000L, active1, 0x1100028280330L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x41000000040L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0x880004010008L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x140000L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x30000002800L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000008400L);
      case 112:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000L);
      case 114:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x141021000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x8080800000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x4082L);
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000160800L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x120L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 69:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xe000401040L);
      case 70:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1900000000L);
      case 75:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         break;
      case 76:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         break;
      case 78:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x600000000L);
      case 80:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 82:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x50002828c090L);
      case 83:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20004000600L);
      case 84:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10052012000L);
      case 89:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000160800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x120L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000L);
      case 101:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xe000401040L);
      case 102:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1900000000L);
      case 107:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
         }
         break;
      case 108:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 4;
         }
         break;
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x600000000L);
      case 112:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x50002828c090L);
      case 115:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20004000600L);
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10052012000L);
      case 121:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active1, 0x22080000L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active1, 0x80100000000L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active1, 0x8000000000L);
      case 68:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x6000000000L);
      case 69:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x40001000000L);
      case 71:
         return jjMoveStringLiteralDfa6_0(active1, 0x1000140000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active1, 0x10058200000L);
      case 76:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
         }
         break;
      case 78:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x600000000L);
      case 79:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x80000000L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active1, 0x20000800000L);
      case 82:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x20000L);
      case 83:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x400000L);
      case 84:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x804000000L);
      case 89:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active1, 0x22080000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active1, 0x80100000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active1, 0x8000000000L);
      case 100:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x6000000000L);
      case 101:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x40001000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active1, 0x1000140000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active1, 0x10058200000L);
      case 108:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 5;
         }
         break;
      case 110:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x600000000L);
      case 111:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x80000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active1, 0x20000800000L);
      case 114:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x20000L);
      case 115:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x400000L);
      case 116:
         if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active1, 0x804000000L);
      case 121:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 5);
}
private int jjMoveStringLiteralDfa6_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active1, 0x40000000L);
      case 67:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x40000000000L);
      case 68:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         break;
      case 69:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0xa04000000L);
      case 76:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x80000000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active1, 0x482000000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active1, 0x20010000000L);
      case 83:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa7_0(active1, 0x18028000000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active1, 0x7100000000L);
      case 89:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active1, 0x40000000L);
      case 99:
         if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x40000000000L);
      case 100:
         if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 6;
         }
         break;
      case 101:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0xa04000000L);
      case 108:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active1, 0x80000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active1, 0x482000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active1, 0x20010000000L);
      case 115:
         if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa7_0(active1, 0x18028000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active1, 0x7100000000L);
      case 121:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 6);
}
private int jjMoveStringLiteralDfa7_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 6);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active1, 0x800000000L);
      case 69:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x8480000000L);
      case 76:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x200000000L);
      case 82:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x27000000000L);
      case 84:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x40100000000L);
      case 89:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active1, 0x800000000L);
      case 101:
         if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x8480000000L);
      case 108:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x200000000L);
      case 114:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x27000000000L);
      case 116:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active1, 0x40100000000L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 7);
}
private int jjMoveStringLiteralDfa8_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active1, 0x3000000000L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active1, 0x400000000L);
      case 68:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
         }
         break;
      case 69:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000000L);
      case 84:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0x3000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x400000000L);
      case 100:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 8;
         }
         break;
      case 101:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000000L);
      case 116:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active1, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 8);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 8);
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
         }
         break;
      case 76:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x1000000000L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active1, 0x800000000L);
      case 100:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 9;
         }
         break;
      case 108:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active1, 0x1000000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active1, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 9);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 9);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active1, 0x800000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active1, 0x800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 10);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 10);
   }
   switch(curChar)
   {
      case 69:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 11;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000000000L);
      case 101:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 11;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(5, 11);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(5, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(5, 11);
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 12;
         }
         break;
      case 110:
         if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(5, 12);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 121)
                        kind = 121;
                     jjCheckNAddStates(46, 52);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(53, 55);
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 45)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(10, 12);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(10, 12);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 3:
                  if (curChar == 10 && kind > 10)
                     kind = 10;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 10:
                  if (curChar == 34 && kind > 124)
                     kind = 124;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjAddStates(59, 60);
                  break;
               case 17:
                  if ((0xfffffffb00003700L & l) != 0L)
                     jjAddStates(61, 63);
                  break;
               case 20:
               case 21:
                  if (curChar == 34)
                     jjCheckNAddStates(53, 55);
                  break;
               case 22:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0xfffffffb00003700L & l) != 0L)
                     jjCheckNAddStates(53, 55);
                  break;
               case 24:
                  if (curChar == 34 && kind > 133)
                     kind = 133;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddStates(46, 52);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(64, 66);
                  break;
               case 28:
                  if (curChar == 35)
                     jjCheckNAddStates(67, 70);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 31:
                  if (curChar == 46)
                     jjCheckNAddStates(71, 73);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 34:
                  if (curChar != 35)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if (curChar == 43)
                     jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(38, 37);
                  break;
               case 39:
                  if (curChar == 45)
                     jjCheckNAdd(40);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAddTwoStates(41, 40);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddStates(74, 77);
                  break;
               case 44:
                  if (curChar == 46)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddStates(78, 80);
                  break;
               case 48:
                  if (curChar == 43)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(50, 49);
                  break;
               case 51:
                  if (curChar == 45)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 121)
                     kind = 121;
                  jjCheckNAddTwoStates(53, 52);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 127)
                        kind = 127;
                     jjCheckNAddTwoStates(12, 13);
                  }
                  else if (curChar == 92)
                     jjCheckNAddTwoStates(19, 17);
                  if ((0x100800401008004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(10, 12);
                  break;
               case 6:
                  if ((0x100800401008004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 9:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(9, 8);
                  break;
               case 11:
               case 13:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 127)
                     kind = 127;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 12:
                  if (curChar == 95)
                     jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjCheckNAddTwoStates(19, 17);
                  break;
               case 15:
                  if (curChar == 92)
                     jjCheckNAddStates(61, 63);
                  break;
               case 16:
               case 19:
                  if (curChar == 92)
                     jjCheckNAdd(15);
                  break;
               case 17:
                  if ((0x7fffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 18:
                  if (curChar == 92 && kind > 132)
                     kind = 132;
                  break;
               case 23:
                  if ((0x7fffffffffffffffL & l) != 0L)
                     jjAddStates(53, 55);
                  break;
               case 26:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if (curChar == 95)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(67, 70);
                  break;
               case 32:
                  if (curChar == 95)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(71, 73);
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(81, 83);
                  break;
               case 38:
                  if (curChar == 95)
                     jjCheckNAdd(37);
                  break;
               case 41:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 46:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(84, 86);
                  break;
               case 50:
                  if (curChar == 95)
                     jjCheckNAdd(49);
                  break;
               case 53:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjAddStates(10, 12);
                  break;
               case 17:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(61, 63);
                  break;
               case 23:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(53, 55);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   31, 32, 33, 47, 48, 49, 52, 27, 28, 29, 1, 2, 4, 14, 13, 15, 
   17, 18, 21, 22, 23, 31, 32, 33, 34, 35, 36, 39, 37, 38, 39, 47, 
   48, 49, 52, 51, 50, 52, 9, 10, 41, 42, 44, 53, 54, 56, 26, 27, 
   28, 42, 43, 44, 47, 22, 23, 24, 9, 8, 10, 12, 13, 16, 17, 18, 
   26, 27, 28, 29, 30, 31, 34, 32, 33, 34, 42, 43, 44, 47, 46, 45, 
   47, 36, 37, 39, 48, 49, 51, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec3[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\52\52", "\52", "\57", "\53", 
"\55", "\46", "\75", "\57\75", "\76\75", "\74\75", "\76", "\74", "\73", "\54", "\72", 
"\74\76", "\47", "\50", "\51", "\133", "\135", "\72\75", "\56", "\75\76", "\174", 
"\173", "\175", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, "\101", "\141\142\157\162\164", "\101\106", "\101\107", 
"\141\154\167\141\171\163", "\141\156\144\141", "\141\163\163\145\162\164", 
"\141\163\171\156\143\137\141\142\157\162\164", "\142\145\146\157\162\145", "\142\145\146\157\162\145\137", 
"\142\145\146\157\162\145\41", "\142\145\146\157\162\145\41\137", "\142\157\157\154\145\141\156", 
"\143\154\157\143\153", "\143\157\156\163\164", "\143\157\165\156\164\157\156\145\163", "\105", 
"\105\106", "\105\107", "\145\156\144\145\144", 
"\145\166\145\156\164\165\141\154\154\171\41", "\105\130", "\106", "\146\145\154\154", "\146\157\162\141\154\154", "\107", 
"\150\144\154\164\171\160\145", "\151\156\146", "\151\156\150\145\162\151\164", "\151\163\142", 
"\151\163\165\156\153\156\157\167\156", "\156\145\166\145\162", "\156\145\170\164\41", "\156\145\170\164\137\141", 
"\156\145\170\164\137\141\41", "\156\145\170\164\137\145", "\156\145\170\164\137\145\41", 
"\156\145\170\164\137\145\166\145\156\164", "\156\145\170\164\137\145\166\145\156\164\41", 
"\156\145\170\164\137\145\166\145\156\164\137\141", "\156\145\170\164\137\145\166\145\156\164\137\141\41", 
"\156\145\170\164\137\145\166\145\156\164\137\145", "\156\145\170\164\137\145\166\145\156\164\137\145\41", 
"\156\157\156\144\145\164", "\156\157\156\144\145\164\137\166\145\143\164\157\162", "\156\157\164\143", 
"\157\156\145\150\157\164", "\157\156\145\150\157\164\60", "\157\162\144", "\160\162\145\166", 
"\162\157\163\145", "\163\164\141\142\154\145", "\163\171\156\143\137\141\142\157\162\164", 
"\164\157\145", "\125", "\165\156\151\157\156", "\165\156\164\151\154\137", 
"\165\156\164\151\154\41", "\165\156\164\151\154\41\137", "\127", "\167\151\164\150\151\156", "\130", 
"\130\41", "\141\163\163\165\155\145", 
"\141\163\163\165\155\145\137\147\165\141\162\141\156\164\145\145", "\144\145\146\141\165\154\164", "\146\141\151\162\156\145\163\163", 
"\156\145\170\164", "\160\162\157\160\145\162\164\171", "\162\145\160\157\162\164", 
"\162\145\163\164\162\151\143\164", "\162\145\163\164\162\151\143\164\137\147\165\141\162\141\156\164\145\145", 
"\163\145\161\165\145\156\143\145", "\163\164\162\157\156\147", "\166\155\157\144\145", "\166\160\162\157\160", 
"\126\125\116\111\124", "\165\156\164\151\154", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, "\52\52", "\52", 
"\57", "\53", "\55", "\46", "\75", "\57\75", "\76\75", "\74\75", "\76", "\74", 
"\75\76", "\133", "\135", "\50", "\51", "\173", "\175", "\54", "\73", "\72", "\56\56", 
"\72\75", "\174\55\76", "\174\75\76", "\74\55\76", "\55\76", "\133\52", "\133\53\135", 
"\133\55\76", "\133\75", "\46\46", "\174\174", "\174", "\41", "\44", "\100", "\56", "\47", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "REPORT_TICKS_MODE",
   "DEFAULT",
   "PSL_MODE",
   "PSL_MODE_TICKS",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 
   -1, -1, 0, -1, -1, -1, -1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, -1, -1, -1, -1, -1, 2, 2, -1, 
   -1, 2, -1, -1, 3, -1, -1, -1, -1, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
   2, 
};
static final long[] jjtoToken = {
   0xfffffffffffff801L, 0x9303ffffffffffffL, 0xfffffffffffffff0L, 0xffffffffffffffffL, 
   0xfffffffff09303ffL, 0x3fL, 
};
static final long[] jjtoSkip = {
   0x7feL, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x400L, 0x0L, 0x0L, 0x0L, 
   0x0L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[59];
private final int[] jjstateSet = new int[118];
protected char curChar;
/** Constructor. */
public VHDL2008ParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public VHDL2008ParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 59; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 4 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 1;
int defaultLexState = 1;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       break;
     case 3:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_3();
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
