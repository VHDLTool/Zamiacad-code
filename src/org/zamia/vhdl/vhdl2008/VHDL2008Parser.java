/* Generated By:JavaCC: Do not edit this line. VHDL2008Parser.java */
/* 
 * Copyright 2007-2009 by the authors indicated in the @author tags. 
 * All rights reserved. 
 * 
 * See the LICENSE file for details.
 * 
 * 
 */

package org.zamia.vhdl.vhdl2008;

import org.zamia.*;
import org.zamia.zdb.*;
import org.zamia.vhdl.ast.*;
import org.zamia.vhdl.ast.OperationMath.MathOp;
import org.zamia.vhdl.ast.OperationCompare.CompareOp;
import org.zamia.vhdl.ast.OperationLogic.LogicOp;
import org.zamia.vhdl.ast.OperationShift.ShiftOp;
import org.zamia.vhdl.ast.OperationLiteral.LiteralCat;
import org.zamia.vhdl.ast.InterfaceDeclaration.InterfaceKind;
import org.zamia.vhdl.ast.EntityAspect.EntityAspectKind;
import org.zamia.instgraph.IGObject.OIDir;
import org.zamia.util.*;
import java.util.*;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;


/**
 * @author Guenter Bartsch
 */

@SuppressWarnings("all")
public class VHDL2008Parser implements IHDLParser, VHDL2008ParserConstants {

        private enum InterfaceContext { FUNCTION, PROCEDURE, PORT, GENERIC };

        public final static boolean dump = false;
        private SourceFile sf;
        private String lib;
        public final static ZamiaLogger logger = ZamiaLogger.getInstance();
        private ZamiaProject zprj;
    private DMManager dum;
    private ERManager erm;
    private HashSetArray<DMUID> dus;
        private BackupCharStream stream;
        private int priority;
        private boolean fUseFSCache;
        private boolean bottomUp;
        private ZDB zdb;

        public VHDL2008Parser() {
                this (new BackupCharStream(new StringReader("")));
        }

    private long getLocation(Token token_) {

        return token_ == null ? 0 : (long) token_.beginLine | ((long) token_.beginColumn) << 32;
    }

    private long getLocation () {
        Token t = getToken(0);
        if (t.next != null)
                t = t.next;
        return getLocation (t);
    }

        public HashSetArray<DMUID> parse(Reader aReader, String aLibId, SourceFile aSF, int aPriority, boolean aUseFSCache, boolean aBottomUp, ZamiaProject aZPrj) throws IOException {
                        logger.debug("VHDL2008Parser: parsing %s, target lib : %s", aSF, aLibId);

                dus = new HashSetArray<DMUID>();

                        zprj = aZPrj;
                        dum = zprj.getDUM();
                        erm = zprj.getERM();
                        zdb = zprj.getZDB();
            lib = aLibId;
                stream = new BackupCharStream(aReader);
                priority = aPriority;
                fUseFSCache = aUseFSCache;
                bottomUp = aBottomUp;
                sf = aSF;

            try {
                            ReInit (stream);
                    design_file ();
            } catch (ZamiaException e2) {
              erm.addError (new ZamiaException (e2.toString(), e2.getLocation()));
            } catch (ParseException e3) {
              erm.addError (new ZamiaException (e3.getMessage(), new SourceLocation(sf, getLocation(e3.currentToken.next))));
            } catch (TokenMgrError e4) {
              erm.addError (new ZamiaException (e4.getMessage(), new SourceLocation(sf,e4.line,e4.col)));
            }
            sf.setNumLines(stream.getEndLine());
            sf.setNumChars(stream.getNumChars());
            return dus;
    }

    // JavaCC hack for doing lexical state transitions syntactically

        private void SetState(int state) {
       if (state != token_source.curLexState) {

                int backupCol = jj_nt.beginColumn;
                int backupLine = jj_nt.beginLine;

                        int curCol = stream.getEndColumn();
                        int curLine = stream.getEndLine();

                        while (curCol > backupCol || curLine > backupLine) {

                        stream.backup(1);
                curCol = stream.getEndColumn();
                curLine = stream.getEndLine();
                }

                if (curCol == backupCol && curLine == backupLine) {
                        stream.backup(1);
                }

            token_source.SwitchTo(state);

            jj_nt = token_source.getNextToken();
            jj_scanpos.next = jj_nt;
       }
        }

  final public void design_file() throws ParseException, ZamiaException {
        boolean standardMode;
        DesignUnit du;
                if (dump) logger.debug ("Compiling %s", sf.toString());

                // are we compiling the "standard" package here?
                // if so, according to IEEE Std 1076 we
                // start with an empty context,
                // otherwise all contexts are implicitly
                // loaded with
                // library STD, WORK; use STD.STANDARD.all;
                standardMode = false;
                if (sf != null) {
                        if (sf.getFileName().endsWith("standard.vhdl"))
                                standardMode = true;
                }
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case ENTITY:
      case LIBRARY:
      case PACKAGE:
      case ARCHITECTURE:
      case CONFIGURATION:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      du = design_unit(standardMode);
        if (du!=null) {

          du.visit(new SourceLocationGenerator(sf));

          dum.addDesignUnit(du, sf, lib, priority, fUseFSCache);
          dus.add(du.getDMUID());
        }
    }
    jj_consume_token(0);
  }

  final public DesignUnit design_unit(boolean standardMode_) throws ParseException, ZamiaException {
        Context context;
        DesignUnit du;
          if (dump) System.out.println (">>> design_unit, stdMode="+standardMode_);
    context = context_clause();
    du = library_unit(context);
                if (!(du instanceof Entity) && !standardMode_) {
                        // library STD, WORK;
                        context.addLibrary("STD", 0);
                        context.addLibrary("WORK", 0);
                        // use STD.STANDARD.all;
                        Name name = new Name("STD", null, 0);
                        name.addId("STANDARD", 0);
                        name.addId("ALL", 0);
                        context.addUse(name);
                }


                if (dump) System.out.println ("<<< design_unit");
                {if (true) return du;}
    throw new Error("Missing return statement in function");
  }

  final public Context context_clause() throws ParseException, ZamiaException {
        Context context;
                context = new Context(null, getLocation());
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case LIBRARY:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      context_item(context);
    }
                {if (true) return context;}
    throw new Error("Missing return statement in function");
  }

  final public void context_item(Context context_) throws ParseException, ZamiaException {
        ArrayList<Name> l;
    switch (jj_nt.kind) {
    case LIBRARY:
      library_clause(context_);
      break;
    case USE:
      l = use_clause();
                        int n = l.size();
                        for (int i = 0; i<n; i++) {
                                Name name = l.get(i);
                                context_.addUse (name);
                        }
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void library_clause(Context context_) throws ParseException, ZamiaException {
        Identifier id;
        Token t;
    t = jj_consume_token(LIBRARY);
    id = identifier();
                                         context_.addLibrary(id.getImage(), getLocation(t));
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      id = identifier();
                                    context_.addLibrary(id.getImage(), id.getLineCol());
    }
    jj_consume_token(SEMICOLON);
  }

  final public ArrayList<Name> use_clause() throws ParseException, ZamiaException {
        ArrayList<Name> l = new ArrayList<Name>();
        Name n;
    jj_consume_token(USE);
    n = name();
                           l.add(n);
    label_4:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      n = name();
                               l.add(n);
    }
    jj_consume_token(SEMICOLON);
          {if (true) return l ;}
    throw new Error("Missing return statement in function");
  }

  final public DesignUnit library_unit(Context context_) throws ParseException, ZamiaException {
        DesignUnit lu;
    if (jj_2_1(2147483647)) {
      lu = primary_unit(context_);
    } else {
      switch (jj_nt.kind) {
      case PACKAGE:
      case ARCHITECTURE:
        lu = secondary_unit(context_);
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return lu;}
    throw new Error("Missing return statement in function");
  }

  final public PrimaryUnit primary_unit(Context context_) throws ParseException, ZamiaException {
        Entity entity;
        VHDLPackage pkg;
        PrimaryUnit pu = null;
          if (dump) System.out.println (">>>>>>> primary_unit");
    switch (jj_nt.kind) {
    case ENTITY:
      entity = entity_declaration(context_);
                  pu = entity;
      break;
    case CONFIGURATION:
      configuration_declaration(context_);
      break;
    default:
      jj_la1[6] = jj_gen;
      if (jj_2_2(2147483647)) {
        pkg = package_declaration(context_);
                   pu = pkg;
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          if (dump) System.out.println ("<<<<<<< primary_unit");
                {if (true) return pu;}
    throw new Error("Missing return statement in function");
  }

  final public Entity entity_declaration(Context context_) throws ParseException, ZamiaException {
        Identifier id, id2=null;
        Entity entity;
        Token t;
    t = jj_consume_token(ENTITY);
    id = identifier();
    jj_consume_token(IS);
                entity = new Entity(context_, id.getImage(), sf, getLocation (t), lib, zdb);
    entity_header(entity);
    entity_declarative_part(entity);
    switch (jj_nt.kind) {
    case BEGIN:
      jj_consume_token(BEGIN);
      entity_statement_part(entity);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(END);
    switch (jj_nt.kind) {
    case ENTITY:
      jj_consume_token(ENTITY);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null && !id2.equals(id)) {
                    id2.setParent(entity);
                        erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id+"')", id2.getLocation()));
                }
                {if (true) return entity;}
    throw new Error("Missing return statement in function");
  }

  final public void entity_statement_part(Entity entity_) throws ParseException, ZamiaException {
    label_5:
    while (true) {
      switch (jj_nt.kind) {
      case PROCESS:
      case POSTPONED:
      case ASSERT:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
      entity_statement(entity_);
    }
  }

  final public void entity_statement(Entity entity_) throws ParseException, ZamiaException {
        ConcurrentStatement stmt;
    if (jj_2_3(2147483647)) {
      stmt = concurrent_assertion_statement();
    } else if (jj_2_4(2147483647)) {
      stmt = process_statement();
    } else {
      switch (jj_nt.kind) {
      case POSTPONED:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        stmt = concurrent_procedure_call_statement();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                entity_.add(stmt);
  }

  final public void entity_declarative_part(Entity entity_) throws ParseException, ZamiaException {
        AttributeDeclaration ad;
        TypeDeclaration type;
        SubProgram sub;
    ArrayList<ConstantDeclaration> lcd;
    ArrayList<SharedVariableDeclaration> lsv;
    ArrayList<SignalDeclaration> lsd;
    BlockDeclarativeItem item;
    AliasDeclaration aliasDecl;
    label_6:
    while (true) {
      switch (jj_nt.kind) {
      case PURE:
      case TYPE:
      case ALIAS:
      case GROUP:
      case SIGNAL:
      case SHARED:
      case IMPURE:
      case SUBTYPE:
      case CONSTANT:
      case FUNCTION:
      case ATTRIBUTE:
      case PROCEDURE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      switch (jj_nt.kind) {
      case PURE:
      case IMPURE:
      case FUNCTION:
      case PROCEDURE:
        sub = subprogram();
                        entity_.add(sub);
        break;
      case TYPE:
        type = type_declaration();
                        entity_.add(type);
        break;
      case SUBTYPE:
        type = subtype_declaration();
                        entity_.add(type);
        break;
      case CONSTANT:
        lcd = constant_declaration();
                        int n = lcd.size();
            for (int i = 0; i<n; i++) {
                    ConstantDeclaration c = lcd.get(i);
                    entity_.add(c);
            }
        break;
      case SIGNAL:
        lsd = signal_declaration();
                        n = lsd.size();
            for (int i = 0; i<n; i++) {
                    SignalDeclaration s = lsd.get(i);
                    entity_.add(s);
            }
        break;
      case SHARED:
      case VARIABLE:
        lsv = shared_variable_declaration();
                        n = lsv.size();
            for (int i = 0; i<n; i++) {
                    SharedVariableDeclaration svd = lsv.get(i);
                    entity_.add(svd);
            }
        break;
      case ALIAS:
        aliasDecl = alias_declaration();
                entity_.add(aliasDecl);
        break;
      default:
        jj_la1[13] = jj_gen;
        if (jj_2_5(2147483647)) {
          ad = attribute_declaration();
                        entity_.add(ad);
        } else {
          switch (jj_nt.kind) {
          case ATTRIBUTE:
            attribute_specification();
            break;
          default:
            jj_la1[14] = jj_gen;
            if (jj_2_6(2147483647)) {
              item = group_template_declaration();
                  entity_.add(item);
            } else {
              switch (jj_nt.kind) {
              case GROUP:
                item = group_declaration();
                 entity_.add(item);
                break;
              default:
                jj_la1[15] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    }
  }

  final public void entity_header(Entity entity_) throws ParseException, ZamiaException {
        InterfaceList ports;
        InterfaceList generics = null;
        int n;
    switch (jj_nt.kind) {
    case GENERIC:
      generics = generic_clause();
        entity_.setGenerics(generics);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case PORT:
      ports = port_clause();
        entity_.setPorts(ports);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  final public ConfigurationDeclaration configuration_declaration(Context context_) throws ParseException, ZamiaException {
        Identifier id, id2=null;
        Name entityName;
        ConfigurationDeclaration cd;
        Token t;
    t = jj_consume_token(CONFIGURATION);
    id = identifier();
    jj_consume_token(OF);
    entityName = name();
    jj_consume_token(IS);
                  cd = new ConfigurationDeclaration (context_, id.getImage(), entityName, sf, getLocation(t), lib, zdb);
    label_7:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case GROUP:
      case ATTRIBUTE:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_7;
      }
      configuration_declarative_item(cd);
    }
    block_configuration();
    jj_consume_token(END);
    switch (jj_nt.kind) {
    case CONFIGURATION:
      jj_consume_token(CONFIGURATION);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null && !id2.equals(id)) {
                    id2.setParent(cd);
                        erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id+"')", id2.getLocation()));
                }

                {if (true) return cd;}
    throw new Error("Missing return statement in function");
  }

  final public void configuration_declarative_item(ConfigurationDeclaration cd_) throws ParseException, ZamiaException {
        // AttributeSpecification as;
        // GroupDeclaration gd;
        ArrayList<Name> l;
    try {
      switch (jj_nt.kind) {
      case USE:
        l = use_clause();
                                int n = l.size();
                                for (int i = 0; i<n; i++) {
                                        Name name = l.get(i);
                                        cd_.getContext().addUse (name);
                                }
        break;
      case ATTRIBUTE:
        attribute_specification();
        break;
      case GROUP:
        group_declaration();
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                error_skipto(SEMICOLON, "syntax error in configuration declarative item",e);
    }
  }

  final public void attribute_specification() throws ParseException, ZamiaException {
    jj_consume_token(ATTRIBUTE);
    identifier();
    jj_consume_token(OF);
    entity_specification();
    jj_consume_token(IS);
    expression();
    jj_consume_token(SEMICOLON);
  }

  final public void entity_specification() throws ParseException, ZamiaException {
    entity_name_list();
    jj_consume_token(COLON);
    entity_class();
  }

  final public void entity_name_list() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case character_literal:
    case basic_identifier:
    case extended_identifier:
    case string_literal:
      entity_designator();
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[22] = jj_gen;
          break label_8;
        }
        jj_consume_token(COMMA);
        entity_designator();
      }
      break;
    case OTHERS:
      jj_consume_token(OTHERS);
      break;
    case ALL:
      jj_consume_token(ALL);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void entity_designator() throws ParseException, ZamiaException {
    entity_tag();
    switch (jj_nt.kind) {
    case LBRACKET:
      signature();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  final public void entity_tag() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      identifier();
      break;
    case character_literal:
      jj_consume_token(character_literal);
      break;
    case string_literal:
      jj_consume_token(string_literal);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void entity_class() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case ENTITY:
      jj_consume_token(ENTITY);
      break;
    case ARCHITECTURE:
      jj_consume_token(ARCHITECTURE);
      break;
    case CONFIGURATION:
      jj_consume_token(CONFIGURATION);
      break;
    case PROCEDURE:
      jj_consume_token(PROCEDURE);
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
      break;
    case PACKAGE:
      jj_consume_token(PACKAGE);
      break;
    case TYPE:
      jj_consume_token(TYPE);
      break;
    case SUBTYPE:
      jj_consume_token(SUBTYPE);
      break;
    case CONSTANT:
      jj_consume_token(CONSTANT);
      break;
    case SIGNAL:
      jj_consume_token(SIGNAL);
      break;
    case VARIABLE:
      jj_consume_token(VARIABLE);
      break;
    case COMPONENT:
      jj_consume_token(COMPONENT);
      break;
    case LABEL:
      jj_consume_token(LABEL);
      break;
    case LITERAL:
      jj_consume_token(LITERAL);
      break;
    case UNITS:
      jj_consume_token(UNITS);
      break;
    case GROUP:
      jj_consume_token(GROUP);
      break;
    case FILE:
      jj_consume_token(FILE);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void entity_class_entry() throws ParseException, ZamiaException {
    entity_class();
    switch (jj_nt.kind) {
    case BOX:
      jj_consume_token(BOX);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  final public void entity_class_entry_list() throws ParseException, ZamiaException {
    entity_class_entry();
    label_9:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      entity_class_entry();
    }
  }

  final public void block_configuration() throws ParseException, ZamiaException {
    jj_consume_token(FOR);
    name();
    label_10:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_10;
      }
      use_clause();
    }
    label_11:
    while (true) {
      switch (jj_nt.kind) {
      case FOR:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      configuration_item();
    }
    jj_consume_token(END);
    jj_consume_token(FOR);
    jj_consume_token(SEMICOLON);
  }

  final public void configuration_item() throws ParseException, ZamiaException {
    if (jj_2_7(2147483647)) {
      block_configuration();
    } else {
      switch (jj_nt.kind) {
      case FOR:
        component_configuration();
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void component_configuration() throws ParseException, ZamiaException {
    jj_consume_token(FOR);
    component_specification();
    switch (jj_nt.kind) {
    case USE:
    case PORT:
    case GENERIC:
    case SEMICOLON:
      binding_indication();
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case FOR:
      block_configuration();
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(FOR);
    jj_consume_token(SEMICOLON);
  }

  final public ComponentSpecification component_specification() throws ParseException, ZamiaException {
        ArrayList<Identifier> il;
        Name n;
    il = instantiation_list();
    jj_consume_token(COLON);
    n = name();
                {if (true) return new ComponentSpecification(il, n, il.get(0).getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Identifier> instantiation_list() throws ParseException, ZamiaException {
        ArrayList<Identifier> ids = new ArrayList<Identifier>();
        Identifier id;
        Token t;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id = identifier();
                            ids.add(id);
      label_12:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        id = identifier();
                                      ids.add(id);
      }
      break;
    case OTHERS:
      t = jj_consume_token(OTHERS);
                         ids.add(new Identifier("OTHERS", false, getLocation(t)));
      break;
    case ALL:
      t = jj_consume_token(ALL);
                      ids.add(new Identifier("ALL", false, getLocation(t)));
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ids;}
    throw new Error("Missing return statement in function");
  }

  final public BindingIndication binding_indication() throws ParseException, ZamiaException {
        BindingIndication bi = null;
        EntityAspect ea;
        Token t;
        AssociationList al;
    switch (jj_nt.kind) {
    case USE:
      t = jj_consume_token(USE);
      ea = entity_aspect();
                bi = new BindingIndication(getLocation(t));
                bi.setEntityAspect(ea);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case GENERIC:
      al = generic_map_aspect();
                if (bi == null) {
                        bi = new BindingIndication(al.getAssociation(0).getLineCol());
                }
                bi.setGenericMapAspect(al);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case PORT:
      al = port_map_aspect();
                if (bi == null) {
                        bi = new BindingIndication(al.getAssociation(0).getLineCol());
                }
                bi.setPortMapAspect(al);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
                {if (true) return bi;}
    throw new Error("Missing return statement in function");
  }

  final public EntityAspect entity_aspect() throws ParseException, ZamiaException {
        EntityAspect ea=null;
        Name n;
        Token t;
        Identifier id;
    switch (jj_nt.kind) {
    case ENTITY:
      t = jj_consume_token(ENTITY);
      n = name();
                ea = new EntityAspect(EntityAspectKind.Entity, n, getLocation(t));
      if (jj_2_8(2147483647)) {
        jj_consume_token(LPAREN);
        id = identifier();
        jj_consume_token(RPAREN);
                                                           ea.setId(id.getImage());
      } else {
        ;
      }
      break;
    case CONFIGURATION:
      t = jj_consume_token(CONFIGURATION);
      n = name();
                ea = new EntityAspect(EntityAspectKind.Configuration, n, getLocation(t));
      break;
    case OPEN:
      t = jj_consume_token(OPEN);
                ea = new EntityAspect(EntityAspectKind.Open, null, getLocation(t));
      break;
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return ea;}
    throw new Error("Missing return statement in function");
  }

  final public VHDLPackage package_declaration(Context context_) throws ParseException, ZamiaException {
        Identifier id,id2=null;
        VHDLPackage pkg;
        Token t;
    t = jj_consume_token(PACKAGE);
    id = identifier();
    jj_consume_token(IS);
                  pkg = new VHDLPackage (context_, id.getImage(), sf, getLocation(t), lib, zdb);
    label_13:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case PURE:
      case FILE:
      case TYPE:
      case ALIAS:
      case GROUP:
      case SIGNAL:
      case SHARED:
      case IMPURE:
      case SUBTYPE:
      case CONSTANT:
      case FUNCTION:
      case ATTRIBUTE:
      case COMPONENT:
      case DISCONNECT:
      case PROCEDURE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_13;
      }
      package_declarative_item(pkg);
    }
    jj_consume_token(END);
    switch (jj_nt.kind) {
    case PACKAGE:
      jj_consume_token(PACKAGE);
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null && !id2.equals(id)) {
                    id2.setParent(pkg);
                        erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id+"')", id2.getLocation()));
                }
                {if (true) return pkg;}
    throw new Error("Missing return statement in function");
  }

  final public void package_declarative_item(VHDLPackage pkg_) throws ParseException, ZamiaException {
        TypeDeclaration type;
        ComponentDeclaration comp;
        ArrayList<Name> l;
        ArrayList<SignalDeclaration> lsd;
        ArrayList<ConstantDeclaration> lcd;
        ArrayList<FileDeclaration> lfd;
        ArrayList<SharedVariableDeclaration> lsv;
        AttributeDeclaration ad;
        SubProgram sub;
        BlockDeclarativeItem item;
    try {
      switch (jj_nt.kind) {
      case PURE:
      case IMPURE:
      case FUNCTION:
      case PROCEDURE:
        sub = subprogram();
                              pkg_.add(sub);
        break;
      case TYPE:
        type = type_declaration();
                                      pkg_.add(type);
        break;
      case SUBTYPE:
        type = subtype_declaration();
                                         pkg_.add(type);
        break;
      case CONSTANT:
        lcd = constant_declaration();
                        int n = lcd.size();
                        for (int i = 0; i<n; i++) {
                                ConstantDeclaration c = lcd.get(i);
                                pkg_.add(c);
                        }
        break;
      case SIGNAL:
        lsd = signal_declaration();
                        n = lsd.size();
                        for (int i = 0; i<n; i++) {
                                SignalDeclaration sd = lsd.get(i);

                                pkg_.add(sd);
                        }
        break;
      case SHARED:
      case VARIABLE:
        lsv = shared_variable_declaration();
                        n = lsv.size();
                        for (int i = 0; i<n; i++) {
                                SharedVariableDeclaration sd = lsv.get(i);
                                pkg_.add(sd);
                        }
        break;
      case FILE:
        lfd = file_declaration();
                        n = lfd.size();
                        for (int i = 0; i<n; i++) {
                                FileDeclaration fd = lfd.get(i);
                                pkg_.add(fd);
                        }
        break;
      case ALIAS:
        item = alias_declaration();
                        pkg_.add(item);
        break;
      case COMPONENT:
        comp = component_declaration();
                                          pkg_.add(comp);
        break;
      default:
        jj_la1[43] = jj_gen;
        if (jj_2_9(2147483647)) {
          ad = attribute_declaration();
                 pkg_.add(ad);
        } else {
          switch (jj_nt.kind) {
          case ATTRIBUTE:
            attribute_specification();
            break;
          case DISCONNECT:
            item = disconnection_specification();
                  pkg_.add(item);
            break;
          case USE:
            l = use_clause();
                        n = l.size();
                        for (int i = 0; i<n; i++) {
                                Name name = l.get(i);

                                pkg_.getContext().addUse(name);
                        }
            break;
          default:
            jj_la1[44] = jj_gen;
            if (jj_2_10(2147483647)) {
              item = group_template_declaration();
                  pkg_.add(item);
            } else {
              switch (jj_nt.kind) {
              case GROUP:
                item = group_declaration();
                  pkg_.add(item);
                break;
              default:
                jj_la1[45] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
        }
      }
    } catch (ParseException e) {
                error_skipto(SEMICOLON, "syntax error in package declarative item:",e);
    }
  }

  final public InterfaceList port_clause() throws ParseException, ZamiaException {
        InterfaceList ports;
    jj_consume_token(PORT);
    jj_consume_token(LPAREN);
    ports = interface_list(InterfaceContext.PORT, OIDir.LINKAGE);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
                {if (true) return ports;}
    throw new Error("Missing return statement in function");
  }

  final public InterfaceList interface_list(InterfaceContext ic_, OIDir defaultDir_) throws ParseException, ZamiaException {
        InterfaceList interfaces;
        ArrayList<InterfaceDeclaration> ids;
    ids = interface_declaration(ic_, defaultDir_);
        interfaces = new InterfaceList(null, ids.get(0).getLineCol());
        int n = ids.size();
        for (int i = 0; i<n; i++) {
                interfaces.add(ids.get(i));
        }
    label_14:
    while (true) {
      switch (jj_nt.kind) {
      case SEMICOLON:
      case COMMA:
        ;
        break;
      default:
        jj_la1[46] = jj_gen;
        break label_14;
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case FILE:
      case SIGNAL:
      case CONSTANT:
      case VARIABLE:
      case basic_identifier:
      case extended_identifier:
        ids = interface_declaration(ic_, defaultDir_);
        n = ids.size();
        for (int i = 0; i<n; i++) {
                interfaces.add(ids.get(i));
        }
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
    }
        {if (true) return interfaces;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<InterfaceDeclaration> interface_declaration(InterfaceContext ic_, OIDir defaultDir_) throws ParseException, ZamiaException {
        ArrayList<InterfaceDeclaration> idds;
        ArrayList<Identifier> ids;
        InterfaceKind kind = null;
        TypeDefinition td;
        OIDir dir = defaultDir_;
        Operation op = null;
    switch (jj_nt.kind) {
    case FILE:
    case SIGNAL:
    case CONSTANT:
    case VARIABLE:
      switch (jj_nt.kind) {
      case FILE:
        jj_consume_token(FILE);
                    kind = InterfaceKind.FILE;
        break;
      case VARIABLE:
        jj_consume_token(VARIABLE);
                         kind = InterfaceKind.VARIABLE;
        break;
      case CONSTANT:
        jj_consume_token(CONSTANT);
                         kind = InterfaceKind.CONSTANT;
        break;
      case SIGNAL:
        jj_consume_token(SIGNAL);
                       kind = InterfaceKind.SIGNAL;
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    ids = identifier_list();
    jj_consume_token(COLON);
    switch (jj_nt.kind) {
    case IN:
    case OUT:
    case INOUT:
    case BUFFER:
    case LINKAGE:
      dir = mode();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
                if (kind == null) {

                        switch (ic_) {
                        case FUNCTION:
                                if (dir != OIDir.IN) {
                                        erm.addError (new ZamiaException ("Function parameters must have mode IN.", ids.get(0).getLocation()));
                                }
                                if (kind == null) {
                                        kind = InterfaceKind.CONSTANT;
                                } else {
                                        if (kind == InterfaceKind.VARIABLE) {
                                                erm.addError (new ZamiaException ("Function parameters must be signals, constants or files.", ids.get(0).getLocation()));
                                        }
                                }
                                break;
                        case PROCEDURE:
                                if (kind == null) {
                                        if (dir == OIDir.IN) {
                                                kind = InterfaceKind.CONSTANT;
                                        } else {
                                                kind = InterfaceKind.VARIABLE;
                                        }
                                }
                                break;
                        case PORT:
                                if (kind == null) {
                                        kind = InterfaceKind.SIGNAL;
                                }
                                break;
                        case GENERIC:
                                if (kind == null) {
                                        kind = InterfaceKind.CONSTANT;
                                } else {
                                        if (kind == InterfaceKind.CONSTANT) {
                                                erm.addError (new ZamiaException ("Generics must be constants.", ids.get(0).getLocation()));
                                        }
                                }
                                break;
                        }
                }
    td = subtype_indication();
    switch (jj_nt.kind) {
    case BUS:
      jj_consume_token(BUS);
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      op = expression();
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
                int num = ids.size();
                idds = new ArrayList<InterfaceDeclaration>(num);
                for (int i = 0; i<num; i++) {
                        Identifier id = ids.get(i);

                        InterfaceDeclaration isd = new InterfaceDeclaration (id.getImage(), td, dir, op, kind, null, id.getLineCol());
                        idds.add(isd);
                }

                {if (true) return idds;}
    throw new Error("Missing return statement in function");
  }

  final public OIDir mode() throws ParseException, ZamiaException {
        OIDir m = OIDir.LINKAGE;
    switch (jj_nt.kind) {
    case IN:
      jj_consume_token(IN);
                  m = OIDir.IN;
      break;
    case OUT:
      jj_consume_token(OUT);
                  m = OIDir.OUT;
      break;
    case INOUT:
      jj_consume_token(INOUT);
                    m = OIDir.INOUT;
      break;
    case BUFFER:
      jj_consume_token(BUFFER);
                     m = OIDir.BUFFER;
      break;
    case LINKAGE:
      jj_consume_token(LINKAGE);
                      m = OIDir.LINKAGE;
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return m ;}
    throw new Error("Missing return statement in function");
  }

  final public SecondaryUnit secondary_unit(Context context_) throws ParseException, ZamiaException {
        SecondaryUnit su = null;
         if (dump) System.out.println ("secondary_unit");
    switch (jj_nt.kind) {
    case ARCHITECTURE:
      su = architecture_body(context_);
      break;
    case PACKAGE:
      su = package_body(context_);
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return su;}
    throw new Error("Missing return statement in function");
  }

  final public PackageBody package_body(Context context_) throws ParseException, ZamiaException {
        Identifier id, id2=null;
        Token t;
        PackageBody body;
    t = jj_consume_token(PACKAGE);
    jj_consume_token(BODY);
    id = identifier();
    jj_consume_token(IS);
                                body = new PackageBody(context_, id.getImage(), sf, getLocation(t), lib, zdb);
    package_body_declarative_part(body);
    jj_consume_token(END);
    switch (jj_nt.kind) {
    case PACKAGE:
      jj_consume_token(PACKAGE);
      jj_consume_token(BODY);
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null && !id2.equals(id)) {
                    id2.setParent(body);
                        erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id+"')", id2.getLocation()));
                }

                {if (true) return body;}
    throw new Error("Missing return statement in function");
  }

  final public void package_body_declarative_item(PackageBody body_) throws ParseException, ZamiaException {
        SubProgram sub = null;
        TypeDeclaration td = null;
        ConstantDeclaration cd = null;
        ArrayList<Name> l;
        ArrayList<ConstantDeclaration> l2;
        ArrayList<FileDeclaration> l3;
        ArrayList<SharedVariableDeclaration> lsv;
        BlockDeclarativeItem item;
    switch (jj_nt.kind) {
    case PURE:
    case IMPURE:
    case FUNCTION:
    case PROCEDURE:
      sub = subprogram();
                             body_.add(sub);
      break;
    case TYPE:
      td = type_declaration();
                                    body_.add(td);
      break;
    case SUBTYPE:
      td = subtype_declaration();
                                      body_.add(td);
      break;
    case CONSTANT:
      l2 = constant_declaration();
                  int n = l2.size();
              for (int i = 0; i<n; i++) {
                      ConstantDeclaration c = l2.get(i);
                  body_.add(c);
                  }
      break;
    case SHARED:
    case VARIABLE:
      lsv = shared_variable_declaration();
                  n = lsv.size();
              for (int i = 0; i<n; i++) {
                      SharedVariableDeclaration sd = lsv.get(i);
                  body_.add(sd);
                  }
      break;
    case FILE:
      l3 = file_declaration();
                  n = l3.size();
              for (int i = 0; i<n; i++) {
                      FileDeclaration fd = l3.get(i);
                  body_.add(fd);
                  }
      break;
    case ALIAS:
      item = alias_declaration();
                body_.add(item);
      break;
    case USE:
      l = use_clause();
                  n = l.size();
              for (int i = 0; i<n; i++) {
                      Name name = l.get(i);
                  body_.getContext().addUse (name);
                  }
      break;
    default:
      jj_la1[58] = jj_gen;
      if (jj_2_11(2147483647)) {
        item = group_template_declaration();
                  body_.add(item);
      } else {
        switch (jj_nt.kind) {
        case GROUP:
          item = group_declaration();
                  body_.add(item);
          break;
        default:
          jj_la1[59] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void package_body_declarative_part(PackageBody body_) throws ParseException, ZamiaException {
    label_15:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case PURE:
      case FILE:
      case TYPE:
      case ALIAS:
      case GROUP:
      case SHARED:
      case IMPURE:
      case SUBTYPE:
      case CONSTANT:
      case FUNCTION:
      case PROCEDURE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_15;
      }
      package_body_declarative_item(body_);
    }
  }

  final public Architecture architecture_body(Context context_) throws ParseException, ZamiaException {
        Identifier id, id2=null;
        Name entityName;
        Architecture arch;
        Token t;
    t = jj_consume_token(ARCHITECTURE);
    id = identifier();
    jj_consume_token(OF);
    entityName = name();
    jj_consume_token(IS);
                  arch= new Architecture (context_, id.getImage(), entityName, zprj, sf, getLocation(t), lib, zdb);
    architecture_declarative_part(arch);
    try {
      jj_consume_token(BEGIN);
      architecture_statement_part(arch);
      jj_consume_token(END);
      switch (jj_nt.kind) {
      case ARCHITECTURE:
        jj_consume_token(ARCHITECTURE);
        break;
      default:
        jj_la1[61] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case basic_identifier:
      case extended_identifier:
        id2 = identifier();
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (ParseException e) {
                error_skipto(SEMICOLON, "syntax error in architecture",e);
    }
                if (id2 != null) {
                        if (!id2.equals(id)) {
                          id2.setParent(arch);
                          erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id+"')", id2.getLocation()));
                        }
                }
                {if (true) return arch;}
    throw new Error("Missing return statement in function");
  }

  final public void architecture_declarative_part(Architecture arch_) throws ParseException, ZamiaException {
        ArrayList<BlockDeclarativeItem> l;
        BlockDeclarativeItem item;
    label_16:
    while (true) {
      switch (jj_nt.kind) {
      case FOR:
      case USE:
      case PURE:
      case FILE:
      case TYPE:
      case ALIAS:
      case GROUP:
      case SIGNAL:
      case SHARED:
      case IMPURE:
      case SUBTYPE:
      case CONSTANT:
      case FUNCTION:
      case ATTRIBUTE:
      case COMPONENT:
      case DISCONNECT:
      case PROCEDURE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_16;
      }
      l = block_declarative_item();
                        int n = l.size();
                        for (int i = 0; i<n; i++) {
                                item = l.get(i);
                                arch_.add (item);
                        }
    }
  }

  final public ArrayList<BlockDeclarativeItem> block_declarative_item() throws ParseException, ZamiaException {
        ArrayList<BlockDeclarativeItem> l = new ArrayList<BlockDeclarativeItem>();
        ArrayList<ConstantDeclaration> lcd;
        ArrayList<SignalDeclaration> lsd;
        ArrayList<FileDeclaration> lfd;
        ArrayList<SharedVariableDeclaration> lsv;
        ArrayList<ConfigurationSpecification> lcs;
        ArrayList<Name> uc;
        BlockDeclarativeItem item;
        int n;
    switch (jj_nt.kind) {
    case PURE:
    case IMPURE:
    case FUNCTION:
    case PROCEDURE:
      item = subprogram();
                                l.add(item);
      break;
    case TYPE:
      item = type_declaration();
                                      l.add (item);
      break;
    case SUBTYPE:
      item = subtype_declaration();
                                         l.add (item);
      break;
    case CONSTANT:
      lcd = constant_declaration();
                n = lcd.size();
                for (int i = 0; i<n; i++) {
                        l.add(lcd.get(i));
                }
      break;
    case SIGNAL:
      lsd = signal_declaration();
                n = lsd.size();
                for (int i = 0; i<n; i++) {
                        l.add(lsd.get(i));
                }
      break;
    case SHARED:
    case VARIABLE:
      lsv = shared_variable_declaration();
                n = lsv.size();
                for (int i = 0; i<n; i++) {
                        l.add(lsv.get(i));
                }
      break;
    case FILE:
      lfd = file_declaration();
                n = lfd.size();
                for (int i = 0; i<n; i++) {
                        l.add(lfd.get(i));
                }
      break;
    case ALIAS:
      item = alias_declaration();
                        l.add(item);
      break;
    case COMPONENT:
      item = component_declaration();
                                           l.add (item);
      break;
    default:
      jj_la1[64] = jj_gen;
      if (jj_2_12(2147483647)) {
        item = attribute_declaration();
                  l.add(item);
      } else {
        switch (jj_nt.kind) {
        case ATTRIBUTE:
          attribute_specification();
          break;
        case FOR:
          lcs = configuration_specification();
                n = lcs.size();
                for (int i = 0; i<n; i++) {
                        l.add(lcs.get(i));
                }
          break;
        case DISCONNECT:
          item = disconnection_specification();
                  l.add(item);
          break;
        case USE:
          uc = use_clause();
                n = uc.size();
                for (int i = 0; i<n; i++) {
                        Name name = uc.get(i);
                        l.add(new Use(name, null, name.getLineCol()));
                }
          break;
        default:
          jj_la1[65] = jj_gen;
          if (jj_2_13(2147483647)) {
            item = group_template_declaration();
            l.add(item);
          } else {
            switch (jj_nt.kind) {
            case GROUP:
              item = group_declaration();
            l.add(item);
              break;
            default:
              jj_la1[66] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public void architecture_statement_part(Architecture arch_) throws ParseException, ZamiaException {
        ConcurrentStatement stmt;
    label_17:
    while (true) {
      switch (jj_nt.kind) {
      case WITH:
      case PROCESS:
      case POSTPONED:
      case ASSERT:
      case PSL_COVER:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
      case LPAREN:
      case PSL_ASSERT:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_17;
      }
      try {
        stmt = architecture_statement(arch_);
                if (stmt != null) {
                        arch_.add(stmt);
                }
      } catch (ParseException e) {
                error_skipto(SEMICOLON, "syntax error in architecture statement part.",e);
      }
    }
  }

  final public ConcurrentStatement architecture_statement(Architecture arch_) throws ParseException, ZamiaException {
        ConcurrentStatement stmt=null;
    if (jj_2_14(2147483647)) {
      stmt = block_statement();
    } else if (jj_2_15(2147483647)) {
      stmt = process_statement();
    } else if (jj_2_16(2147483647)) {
      stmt = concurrent_procedure_call_statement();
    } else if (jj_2_17(2147483647)) {
      stmt = concurrent_assertion_statement();
    } else if (jj_2_18(2147483647)) {
      stmt = concurrent_signal_assignment_statement();
    } else if (jj_2_19(2147483647)) {
      stmt = component_instantiation_statement();
    } else if (jj_2_20(2147483647)) {
      stmt = generate_statement();
    } else if (jj_2_21(2147483647)) {
      psl_psl_directive();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ConcurrentProcedureCall concurrent_procedure_call_statement() throws ParseException, ZamiaException {
        ConcurrentProcedureCall stmt;
        Name n;
        boolean isPostponed = false;
        Identifier label = null;
        String sLabel = null;
    if (jj_2_22(2147483647)) {
      label = identifier();
      jj_consume_token(COLON);
                                                                          sLabel = label.getImage();
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case POSTPONED:
      jj_consume_token(POSTPONED);
                        isPostponed = true;
      break;
    default:
      jj_la1[68] = jj_gen;
      ;
    }
    n = name();
    jj_consume_token(SEMICOLON);
                stmt = new ConcurrentProcedureCall (n, sLabel, null, n.getLineCol());
                stmt.setPostponed(isPostponed);
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public Block block_statement() throws ParseException, ZamiaException {
        Identifier id, id2=null;
        Operation guard = null;
        Block block;
        BlockDeclarativeItem item;
        ArrayList l;
    id = identifier();
    jj_consume_token(COLON);
    jj_consume_token(BLOCK);
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
      guard = expression();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case IS:
      jj_consume_token(IS);
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
          block = new Block (id.getImage(), guard, null, id.getLineCol());
    block_header(block);
    label_18:
    while (true) {
      switch (jj_nt.kind) {
      case FOR:
      case USE:
      case PURE:
      case FILE:
      case TYPE:
      case ALIAS:
      case GROUP:
      case SIGNAL:
      case SHARED:
      case IMPURE:
      case SUBTYPE:
      case CONSTANT:
      case FUNCTION:
      case ATTRIBUTE:
      case COMPONENT:
      case DISCONNECT:
      case PROCEDURE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_18;
      }
      l = block_declarative_item();
                                int n = l.size();
                                for (int i = 0; i<n; i++) {
                                        item = (BlockDeclarativeItem) l.get(i);
                                        block.add(item);
                                }
    }
    jj_consume_token(BEGIN);
    block_statement_part(block);
    jj_consume_token(END);
    jj_consume_token(BLOCK);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null) {
                        if (!id2.equals(id)) {
                          id2.setParent(block);
                          erm.addError (new ZamiaException ( "Closing id doesn't match (was expecting '"+id+"')", id2.getLocation()));
                        }
                }
                {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

  final public void block_header(Block block_) throws ParseException, ZamiaException {
        AssociationList l = null;
        InterfaceList l2 = null;
    switch (jj_nt.kind) {
    case GENERIC:
      l2 = generic_clause();
                                  block_.setGenerics (l2);
      switch (jj_nt.kind) {
      case GENERIC:
        l = generic_map_aspect();
        jj_consume_token(SEMICOLON);
                                                         block_.setGenericMap(l);
        break;
      default:
        jj_la1[73] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case PORT:
      l2 = port_clause();
                               block_.setPorts (l2);
      switch (jj_nt.kind) {
      case PORT:
        port_map_aspect();
        jj_consume_token(SEMICOLON);
                                                  block_.setPortMap (l);
        break;
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
  }

  final public void block_statement_part(Block block) throws ParseException, ZamiaException {
        ConcurrentStatement stmt;
    label_19:
    while (true) {
      switch (jj_nt.kind) {
      case WITH:
      case PROCESS:
      case POSTPONED:
      case ASSERT:
      case PSL_COVER:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
      case LPAREN:
      case PSL_ASSERT:
        ;
        break;
      default:
        jj_la1[77] = jj_gen;
        break label_19;
      }
      stmt = architecture_statement(null);
                                               block.add(stmt);
    }
  }

  final public InstantiatedUnit instantiated_unit(Identifier id_) throws ParseException, ZamiaException {
        InstantiatedUnit iu = null;
        Name n;
        Identifier id=null;
    switch (jj_nt.kind) {
    case COMPONENT:
    case basic_identifier:
    case extended_identifier:
    case string_literal:
      switch (jj_nt.kind) {
      case COMPONENT:
        jj_consume_token(COMPONENT);
        break;
      default:
        jj_la1[78] = jj_gen;
        ;
      }
      n = name();
                                     iu = new ComponentInstantiation (id_.getImage(), n, null, n.getLineCol());
      break;
    case ENTITY:
      jj_consume_token(ENTITY);
      n = name();
      switch (jj_nt.kind) {
      case LPAREN:
        jj_consume_token(LPAREN);
        id = identifier();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[79] = jj_gen;
        ;
      }
                                                                        iu = new EntityInstantiation (id_.getImage(), n, id != null ? id.getImage() : null, null, n.getLineCol());
      break;
    case CONFIGURATION:
      jj_consume_token(CONFIGURATION);
      n = name();
                                       iu = new ConfigurationInstantiation (id_.getImage(), n, null, n.getLineCol());
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return iu;}
    throw new Error("Missing return statement in function");
  }

  final public InstantiatedUnit component_instantiation_statement() throws ParseException, ZamiaException {
        Identifier id;
        InstantiatedUnit iu;
        AssociationList l;
    id = identifier();
    jj_consume_token(COLON);
    iu = instantiated_unit(id);
    switch (jj_nt.kind) {
    case GENERIC:
      l = generic_map_aspect();
                                iu.setGenericMapAspect(l);
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case PORT:
      l = port_map_aspect();
                                iu.setPortMapAspect(l);
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return iu;}
    throw new Error("Missing return statement in function");
  }

  final public AssociationList port_map_aspect() throws ParseException, ZamiaException {
        AssociationList l;
    jj_consume_token(PORT);
    jj_consume_token(MAP);
    jj_consume_token(LPAREN);
    l = association_list();
    jj_consume_token(RPAREN);
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public AssociationList generic_map_aspect() throws ParseException, ZamiaException {
        AssociationList l;
    jj_consume_token(GENERIC);
    jj_consume_token(MAP);
    jj_consume_token(LPAREN);
    l = association_list();
    jj_consume_token(RPAREN);
                {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public AssociationList association_list() throws ParseException, ZamiaException {
        AssociationList l;
        AssociationElement ae;
    ae = association_element();
                                     l = new AssociationList(null, ae.getLineCol()); l.add(ae);
    label_20:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_20;
      }
      jj_consume_token(COMMA);
      ae = association_element();
                                             l.add(ae);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public AssociationElement association_element() throws ParseException, ZamiaException {
        AssociationElement ae;
        Operation op;
        FormalPart fp = null;
    if (jj_2_23(2147483647)) {
      fp = formal_part();
      jj_consume_token(FOLLOWS);
    } else {
      ;
    }
    op = actual_part();
                if (fp != null) {
                        ae = new AssociationElement (null, fp.getLineCol());
                        ae.setFormalPart(fp);
                } else if (op != null) {
                        ae = new AssociationElement (null, op.getLineCol());
                } else { // OPEN
                        ae = new AssociationElement (null, 0);
                }
                ae.setActualPart (op);
                {if (true) return ae;}
    throw new Error("Missing return statement in function");
  }

  final public FormalPart formal_part() throws ParseException, ZamiaException {
        Name n1, n2;
        FormalPart fp;
    if (jj_2_24(2147483647)) {
      n1 = name();
      jj_consume_token(LPAREN);
      n2 = name();
      jj_consume_token(RPAREN);
                                                            fp = new FormalPart(n1, null, n1.getLineCol()); fp.setName2 (n2);
    } else {
      switch (jj_nt.kind) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        n1 = name();
                         fp = new FormalPart(n1, null, n1.getLineCol());
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return fp;}
    throw new Error("Missing return statement in function");
  }

  final public Operation actual_part() throws ParseException, ZamiaException {
        Operation op;
    // FIXME: really neccessary? expression 
            // expands to function call and type conversion...
            //( LOOKAHEAD( name() <LPAREN> actual_designator() <RPAREN>)
            //	name() <LPAREN> actual_designator() <RPAREN>
            //| actual_designator()
            //)
    
            op = actual_designator();
          {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public Operation actual_designator() throws ParseException, ZamiaException {
        Operation op = null;
    switch (jj_nt.kind) {
    case OPEN:
      jj_consume_token(OPEN);
      break;
    case ABS:
    case NEW:
    case NOT:
    case NULL:
    case character_literal:
    case based_literal:
    case decimal_literal:
    case bit_string_literal:
    case basic_identifier:
    case extended_identifier:
    case string_literal:
    case ADD:
    case SUB:
    case LPAREN:
      op = expression();
      break;
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

  final public ConditionalSignalAssignment conditional_signal_assignment() throws ParseException, ZamiaException {
        Target target;
        ArrayList wv;
        ConditionalSignalAssignment csa;
        long location;
    target = target();
                csa = new ConditionalSignalAssignment (target, null, target.getLineCol());
    jj_consume_token(LE);
    options_(csa);
    wv = conditional_waveforms();
    jj_consume_token(SEMICOLON);
                int n = wv.size();
                for (int i = 0; i<n; i++) {
                        ConditionalWaveform cw = (ConditionalWaveform) wv.get(i);
                        csa.add(cw);
                }
                {if (true) return csa;}
    throw new Error("Missing return statement in function");
  }

  final public void options_(ConcurrentSignalAssignment csa_) throws ParseException, ZamiaException {
        DelayMechanism dm;
    switch (jj_nt.kind) {
    case GUARDED:
      jj_consume_token(GUARDED);
                      csa_.setGuarded(true);
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case REJECT:
    case INERTIAL:
    case TRANSPORT:
      dm = delay_mechanism();
                                   csa_.setDelayMechanism(dm);
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
  }

  final public DelayMechanism delay_mechanism() throws ParseException, ZamiaException {
        boolean isInertial = true;
        Operation reject = null;
        Token t = null;
        Token t2=null;
    switch (jj_nt.kind) {
    case TRANSPORT:
      t = jj_consume_token(TRANSPORT);
                          isInertial = false;
      break;
    case REJECT:
    case INERTIAL:
      switch (jj_nt.kind) {
      case REJECT:
        t = jj_consume_token(REJECT);
        reject = expression();
        break;
      default:
        jj_la1[88] = jj_gen;
        ;
      }
      t2 = jj_consume_token(INERTIAL);
                                                             if (t==null) t = t2;
      break;
    default:
      jj_la1[89] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return new DelayMechanism(isInertial, reject, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public Target target() throws ParseException, ZamiaException {
        Name name;
        Aggregate aggregate;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
    case string_literal:
      name = name();
                          {if (true) return new Target(name, null, name.getLineCol());}
      break;
    case LPAREN:
      aggregate = aggregate();
                                     {if (true) return new Target(aggregate, null, aggregate.getLineCol());}
      break;
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ConditionalWaveform> conditional_waveforms() throws ParseException, ZamiaException {
        Waveform w;
        ArrayList<ConditionalWaveform> l = new ArrayList<ConditionalWaveform>();
        ConditionalWaveform cw;
        Operation cond;
    w = waveform();
          cw = new ConditionalWaveform (w, null, w.getLineCol());
    label_21:
    while (true) {
      if (jj_2_25(2147483647)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(WHEN);
      cond = expression();
      jj_consume_token(ELSE);
      w = waveform();
                  cw.setCond(cond); l.add (cw); cw = new ConditionalWaveform (w,null,w.getLineCol());
    }
    switch (jj_nt.kind) {
    case WHEN:
      jj_consume_token(WHEN);
      cond = expression();
                                   cw.setCond(cond);
      break;
    default:
      jj_la1[91] = jj_gen;
      ;
    }
        l.add (cw);
        {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Waveform waveform() throws ParseException, ZamiaException {
        Waveform w;
        WaveformElement we;
        long location;
        Token t;
    switch (jj_nt.kind) {
    case ABS:
    case NEW:
    case NOT:
    case NULL:
    case character_literal:
    case based_literal:
    case decimal_literal:
    case bit_string_literal:
    case basic_identifier:
    case extended_identifier:
    case string_literal:
    case ADD:
    case SUB:
    case LPAREN:
      we = waveform_element();
                        w = new Waveform(null, we.getLineCol());
                        w.add(we);
      label_22:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[92] = jj_gen;
          break label_22;
        }
        jj_consume_token(COMMA);
        we = waveform_element();
                                                  w.add(we);
      }
      break;
    case UNAFFECTED:
      t = jj_consume_token(UNAFFECTED);
                        w = new Waveform(null, getLocation(t));
                        w.setUnaffected(true);
      break;
    default:
      jj_la1[93] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return w;}
    throw new Error("Missing return statement in function");
  }

  final public WaveformElement waveform_element() throws ParseException, ZamiaException {
        Operation value=null;
        Operation after=null;
        long location;
        Token t = null;
    if (jj_2_26(2147483647)) {
      t = jj_consume_token(NULL);
      switch (jj_nt.kind) {
      case AFTER:
        jj_consume_token(AFTER);
        after = expression();
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case ABS:
      case NEW:
      case NOT:
      case NULL:
      case character_literal:
      case based_literal:
      case decimal_literal:
      case bit_string_literal:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
      case ADD:
      case SUB:
      case LPAREN:
        value = expression();
        switch (jj_nt.kind) {
        case AFTER:
          jj_consume_token(AFTER);
          after = expression();
          break;
        default:
          jj_la1[95] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                if (t != null)
                        location = getLocation(t);
                else
                        location = value.getLineCol();
                {if (true) return new WaveformElement (value, after, null, location);}
    throw new Error("Missing return statement in function");
  }

  final public ConcurrentStatement concurrent_assertion_statement() throws ParseException, ZamiaException {
        Assertion ass;
        long location;
        Token t=null;
        Identifier id=null;
        boolean isPostponed=false;
        ConcurrentAssertion ca;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id = identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case POSTPONED:
      t = jj_consume_token(POSTPONED);
                                                        isPostponed = true;
      break;
    default:
      jj_la1[98] = jj_gen;
      ;
    }
    ass = assertion();
    jj_consume_token(SEMICOLON);
                location = ass.getLineCol();
                if (id != null)
                        location = id.getLineCol();
                else if (t != null) {
                        location = getLocation(t);
                }
                ca = new ConcurrentAssertion(ass, null, location);
                ca.setPostponed(isPostponed);
                {if (true) return ca;}
    throw new Error("Missing return statement in function");
  }

  final public ConcurrentSignalAssignment concurrent_signal_assignment_statement() throws ParseException, ZamiaException {
        //String id;
        ConcurrentSignalAssignment stmt;
        boolean postponed = false;
        Identifier label=null;
    if (jj_2_27(2147483647)) {
      label = identifier();
      jj_consume_token(COLON);
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case POSTPONED:
      jj_consume_token(POSTPONED);
                        postponed = true;
      break;
    default:
      jj_la1[99] = jj_gen;
      ;
    }
    if (jj_2_28(2147483647)) {
      stmt = conditional_signal_assignment();
    } else {
      switch (jj_nt.kind) {
      case WITH:
        stmt = selected_signal_assignment();
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                stmt.setPostponed(postponed);
                if (label != null) {
                        stmt.setLabel(label.getImage());
                }
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public SelectedSignalAssignment selected_signal_assignment() throws ParseException, ZamiaException {
        Operation expr;
        Target target;
        ArrayList<SelectedWaveform> waveforms;
        Token t;
        SelectedSignalAssignment ssa;
    t = jj_consume_token(WITH);
    expr = expression();
    jj_consume_token(SELECT);
    target = target();
                ssa = new SelectedSignalAssignment (expr, target, null, getLocation(t));
    jj_consume_token(LE);
    options_(ssa);
    waveforms = selected_waveforms();
    jj_consume_token(SEMICOLON);
                int n = waveforms.size();
                for (int i = 0; i<n; i++) {

                        SelectedWaveform wf = waveforms.get(i);
                        ssa.add (wf);
                }
                {if (true) return ssa;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<SelectedWaveform> selected_waveforms() throws ParseException, ZamiaException {
        ArrayList<SelectedWaveform> l = new ArrayList<SelectedWaveform>();
        SelectedWaveform sw;
        Waveform w;
        ArrayList<Range> choices;
    w = waveform();
    jj_consume_token(WHEN);
    choices = choices();
                sw = new SelectedWaveform (w, choices, null, w.getLineCol());
                l.add(sw);
    label_23:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      w = waveform();
      jj_consume_token(WHEN);
      choices = choices();
                        sw = new SelectedWaveform (w, choices, null, w.getLineCol());
                        l.add(sw);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public GenerateStatement generate_statement() throws ParseException, ZamiaException {
        GenerateStatement gs;
        ConcurrentStatement stmt;
        Identifier label, id2=null;
        ArrayList<BlockDeclarativeItem> decls;
    label = identifier();
    jj_consume_token(COLON);
    gs = generation_scheme(label);
    jj_consume_token(GENERATE);
    if (jj_2_29(2)) {
      label_24:
      while (true) {
        switch (jj_nt.kind) {
        case FOR:
        case USE:
        case PURE:
        case FILE:
        case TYPE:
        case ALIAS:
        case GROUP:
        case SIGNAL:
        case SHARED:
        case IMPURE:
        case SUBTYPE:
        case CONSTANT:
        case FUNCTION:
        case ATTRIBUTE:
        case COMPONENT:
        case DISCONNECT:
        case PROCEDURE:
        case VARIABLE:
          ;
          break;
        default:
          jj_la1[102] = jj_gen;
          break label_24;
        }
        decls = block_declarative_item();
                                                                    gs.add(decls);
      }
      jj_consume_token(BEGIN);
    } else {
      ;
    }
    label_25:
    while (true) {
      switch (jj_nt.kind) {
      case WITH:
      case PROCESS:
      case POSTPONED:
      case ASSERT:
      case PSL_COVER:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
      case LPAREN:
      case PSL_ASSERT:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_25;
      }
      stmt = architecture_statement(null);
                                                        gs.add(stmt);
    }
    jj_consume_token(END);
    jj_consume_token(GENERATE);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null && !id2.equals(label)) {
                    id2.setParent(gs);
                        erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+label+"')", id2.getLocation()));
                }
                {if (true) return gs;}
    throw new Error("Missing return statement in function");
  }

  final public GenerateStatement generation_scheme(Identifier label_) throws ParseException, ZamiaException {
        GenerateStatement gs = null;
        Identifier id;
        Range range;
        Operation exp;
        Token t;
        Name n;
    switch (jj_nt.kind) {
    case FOR:
      t = jj_consume_token(FOR);
      id = identifier();
      jj_consume_token(IN);
      if (jj_2_30(2147483647)) {
        range = range();
      } else {
        switch (jj_nt.kind) {
        case basic_identifier:
        case extended_identifier:
        case string_literal:
          n = name();
                                                                                               range = new Range(n, null, n.getLineCol());
          break;
        default:
          jj_la1[105] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                  gs = new GenerateStatement (id.getImage(), range, label_.getImage(), null, label_.getLineCol());
      break;
    case IF:
      t = jj_consume_token(IF);
      exp = expression();
                  gs = new GenerateStatement (exp, label_.getImage(), null, label_.getLineCol());
      break;
    default:
      jj_la1[106] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return gs ;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ConstantDeclaration> constant_declaration() throws ParseException, ZamiaException {
        ArrayList<ConstantDeclaration> res;
        ArrayList<Identifier> ids;
        TypeDefinition type;
        Operation value=null;
    jj_consume_token(CONSTANT);
    ids = identifier_list();
    jj_consume_token(COLON);
    type = subtype_indication();
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      value = expression();
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                int n = ids.size();
                res = new ArrayList<ConstantDeclaration> (n);
                for (int i = 0; i<n; i++) {
                        Identifier id = ids.get(i);
                        res.add (new ConstantDeclaration (id.getImage(), type, value, null, id.getLineCol()));
                }
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<SignalDeclaration> signal_declaration() throws ParseException, ZamiaException {
        ArrayList<Identifier> ids;
        TypeDefinition type;
        int kind = SignalDeclaration.KIND_NONE;
        Operation value=null;
        ArrayList<SignalDeclaration> res;
    jj_consume_token(SIGNAL);
    ids = identifier_list();
    jj_consume_token(COLON);
    type = subtype_indication();
    switch (jj_nt.kind) {
    case BUS:
    case REGISTER:
      kind = signal_kind();
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      value = expression();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                int n = ids.size();
                res = new ArrayList<SignalDeclaration>(n);
                for (int i = 0; i<n; i++) {
                        Identifier id = ids.get(i);
                        res.add (new SignalDeclaration (id.getImage(), type, kind, value, null, id.getLineCol()));
                }
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList <SharedVariableDeclaration> shared_variable_declaration() throws ParseException, ZamiaException {
        ArrayList<Identifier> ids;
        TypeDefinition type;
        Operation value=null;
        ArrayList<SharedVariableDeclaration> res;
    switch (jj_nt.kind) {
    case SHARED:
      jj_consume_token(SHARED);
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    jj_consume_token(VARIABLE);
    ids = identifier_list();
    jj_consume_token(COLON);
    type = subtype_indication();
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      value = expression();
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                int n = ids.size();
                res = new ArrayList<SharedVariableDeclaration>(n);
                for (int i = 0; i<n; i++) {
                        Identifier id = ids.get(i);
                        res.add (new SharedVariableDeclaration (id.getImage(), type, value, null, id.getLineCol()));
                }
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public int signal_kind() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case REGISTER:
      jj_consume_token(REGISTER);
                       {if (true) return SignalDeclaration.KIND_REGISTER;}
      break;
    case BUS:
      jj_consume_token(BUS);
                  {if (true) return SignalDeclaration.KIND_BUS;}
      break;
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ComponentDeclaration component_declaration() throws ParseException, ZamiaException {
        ComponentDeclaration comp;
        Identifier id, id2 = null;
        InterfaceList l;
        Token t;
    t = jj_consume_token(COMPONENT);
    id = identifier();
    switch (jj_nt.kind) {
    case IS:
      jj_consume_token(IS);
      break;
    default:
      jj_la1[113] = jj_gen;
      ;
    }
          comp = new ComponentDeclaration (id.getImage(), null, getLocation(t));
    switch (jj_nt.kind) {
    case GENERIC:
      l = generic_clause();
                        comp.setGenerics(l);
      break;
    default:
      jj_la1[114] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case PORT:
      l = port_clause();
                        comp.setInterfaces(l);
      break;
    default:
      jj_la1[115] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(COMPONENT);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[116] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null) {
                        if (!id2.equals(id)) {
                          id2.setParent(comp);
                          erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id+"')", id2.getLocation()));
                        }
                }

                {if (true) return comp;}
    throw new Error("Missing return statement in function");
  }

  final public InterfaceList generic_clause() throws ParseException, ZamiaException {
        InterfaceList l;
    jj_consume_token(GENERIC);
    jj_consume_token(LPAREN);
    l = interface_list(InterfaceContext.GENERIC, OIDir.IN);
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration type_declaration() throws ParseException, ZamiaException {
        TypeDeclaration td = null;
        Identifier id;
        Token t;
    if (jj_2_31(2147483647)) {
      td = full_type_declaration();
    } else {
      switch (jj_nt.kind) {
      case TYPE:
        t = jj_consume_token(TYPE);
        id = identifier();
        jj_consume_token(SEMICOLON);
                        td = new TypeDeclaration(id.getImage(), new TypeDefinitionIncomplete(null, id.getLineCol()), null, id.getLineCol());
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration full_type_declaration() throws ParseException, ZamiaException {
        Identifier id;
        TypeDefinition td;
        Token t;
    t = jj_consume_token(TYPE);
    id = identifier();
    jj_consume_token(IS);
    td = type_definition();
    jj_consume_token(SEMICOLON);
          {if (true) return new TypeDeclaration (id.getImage(), td, null, id.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public TypeDeclaration subtype_declaration() throws ParseException, ZamiaException {
        Identifier id;
        TypeDefinition type;
        Token t;
    t = jj_consume_token(SUBTYPE);
    id = identifier();
    jj_consume_token(IS);
    type = subtype_indication();
    jj_consume_token(SEMICOLON);
          {if (true) return new TypeDeclaration (id.getImage(), type, null, id.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public AttributeDeclaration attribute_declaration() throws ParseException, ZamiaException {
        Identifier id;
        Name type;
    jj_consume_token(ATTRIBUTE);
    id = identifier();
    jj_consume_token(COLON);
    type = name();
    jj_consume_token(SEMICOLON);
          {if (true) return new AttributeDeclaration (id.getImage(), type, null, id.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinitionSubType subtype_indication() throws ParseException, ZamiaException {
        Name resf = null;
        Name name;
        ArrayList constr = null;
    if (jj_2_32(2147483647)) {
      resf = name();
    } else {
      ;
    }
    name = name();
    switch (jj_nt.kind) {
    case RANGE:
    case LPAREN:
      constr = constraint();
      break;
    default:
      jj_la1[118] = jj_gen;
      ;
    }
                TypeDefinitionSubType td = new TypeDefinitionSubType(name, null, name.getLineCol());

                td.setResolutionFunction(resf);
                td.setConstraint (constr);

                {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinition type_definition() throws ParseException, ZamiaException {
        TypeDefinition td;
    switch (jj_nt.kind) {
    case RANGE:
    case LPAREN:
      td = scalar_type_definition();
      break;
    case ARRAY:
    case RECORD:
      td = composite_type_definition();
      break;
    case ACCESS:
      td = access_type_definition();
      break;
    case FILE:
      td = file_type_definition();
      break;
    case PROTECTED:
      td = protected_type_definition();
      break;
    default:
      jj_la1[119] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinition scalar_type_definition() throws ParseException, ZamiaException {
        TypeDefinition td;
        Range range;
    if (jj_2_33(2147483647)) {
      td = physical_type_definition();
    } else if (jj_2_34(2147483647)) {
      td = enumeration_type_definition();
    } else {
      switch (jj_nt.kind) {
      case RANGE:
        range = range_constraint();
                    td = new TypeDefinitionRange (range, null, range.getLineCol());
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinitionAccess access_type_definition() throws ParseException, ZamiaException {
        TypeDefinition td;
        Token t;
    t = jj_consume_token(ACCESS);
    td = subtype_indication();
          {if (true) return new TypeDefinitionAccess (td, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinitionFile file_type_definition() throws ParseException, ZamiaException {
        Name name;
        Token t;
    t = jj_consume_token(FILE);
    jj_consume_token(OF);
    name = name();
          {if (true) return new TypeDefinitionFile (name, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinitionPhysical physical_type_definition() throws ParseException, ZamiaException {
        TypeDefinitionPhysical tdp;
        Range range;
        String unit;
    range = range_constraint();
    jj_consume_token(UNITS);
    unit = base_unit_declaration();
          tdp = new TypeDefinitionPhysical(range, unit, null, range.getLineCol());
    label_26:
    while (true) {
      switch (jj_nt.kind) {
      case basic_identifier:
      case extended_identifier:
        ;
        break;
      default:
        jj_la1[121] = jj_gen;
        break label_26;
      }
      secondary_unit_declaration(tdp);
    }
    jj_consume_token(END);
    jj_consume_token(UNITS);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      identifier();
      break;
    default:
      jj_la1[122] = jj_gen;
      ;
    }
          {if (true) return tdp;}
    throw new Error("Missing return statement in function");
  }

  final public String base_unit_declaration() throws ParseException, ZamiaException {
        Identifier unit;
    unit = identifier();
    jj_consume_token(SEMICOLON);
          {if (true) return unit.getImage();}
    throw new Error("Missing return statement in function");
  }

  final public void secondary_unit_declaration(TypeDefinitionPhysical td_) throws ParseException, ZamiaException {
        Identifier id;
        OperationLiteral pl;
    id = identifier();
    jj_consume_token(EQ);
    pl = physical_literal();
    jj_consume_token(SEMICOLON);
          td_.addUnit (id.getImage(), pl, id.getLineCol());
  }

  final public TypeDefinitionEnum enumeration_type_definition() throws ParseException, ZamiaException {
        TypeDefinitionEnum td;
        long location;
        OperationLiteral l;
    jj_consume_token(LPAREN);
    l = enumeration_literal();
                        td = new TypeDefinitionEnum (null, l.getLineCol());
                        td.add(l);
    label_27:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      l = enumeration_literal();
                                                      td.add(l);
    }
    jj_consume_token(RPAREN);
          {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinition composite_type_definition() throws ParseException, ZamiaException {
        TypeDefinition td;
    switch (jj_nt.kind) {
    case ARRAY:
      td = array_type_definition();
      break;
    case RECORD:
      td = record_type_definition();
      break;
    default:
      jj_la1[124] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinition array_type_definition() throws ParseException, ZamiaException {
        TypeDefinition td;
    if (jj_2_35(2147483647)) {
      td = unconstrained_array_definition();
    } else {
      switch (jj_nt.kind) {
      case ARRAY:
        td = constrained_array_definition();
        break;
      default:
        jj_la1[125] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinitionUnconstrainedArray unconstrained_array_definition() throws ParseException, ZamiaException {
        TypeDefinitionUnconstrainedArray td;
        Name isd;
        TypeDefinition elementType;
        Token t;
    t = jj_consume_token(ARRAY);
    jj_consume_token(LPAREN);
    isd = index_subtype_definition();
          td = new TypeDefinitionUnconstrainedArray (null, getLocation(t)); td.add(isd);
    label_28:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[126] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      isd = index_subtype_definition();
                                                     td.add (isd);
    }
    jj_consume_token(RPAREN);
    jj_consume_token(OF);
    elementType = subtype_indication();
                td.setElementType (elementType);
                {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public Name index_subtype_definition() throws ParseException, ZamiaException {
        Name n;
    n = name();
    jj_consume_token(RANGE);
    jj_consume_token(BOX);
          {if (true) return n;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinitionConstrainedArray constrained_array_definition() throws ParseException, ZamiaException {
        TypeDefinitionConstrainedArray td;
        TypeDefinition std;
        ArrayList<DiscreteRange> constraints;
        Token t;
    t = jj_consume_token(ARRAY);
    constraints = index_constraint();
    jj_consume_token(OF);
    std = subtype_indication();
                td = new TypeDefinitionConstrainedArray (std, null, getLocation(t));
                int n = constraints.size();
                for (int i = 0; i<n; i++)
                        td.add (constraints.get(i));
                {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinitionRecord record_type_definition() throws ParseException, ZamiaException {
        TypeDefinitionRecord td;
        Token t;
    t = jj_consume_token(RECORD);
                td = new TypeDefinitionRecord (null, getLocation(t));
    label_29:
    while (true) {
      element_declaration(td);
      switch (jj_nt.kind) {
      case basic_identifier:
      case extended_identifier:
        ;
        break;
      default:
        jj_la1[127] = jj_gen;
        break label_29;
      }
    }
    jj_consume_token(END);
    jj_consume_token(RECORD);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      identifier();
      break;
    default:
      jj_la1[128] = jj_gen;
      ;
    }
          {if (true) return td;}
    throw new Error("Missing return statement in function");
  }

  final public void element_declaration(TypeDefinitionRecord td_) throws ParseException, ZamiaException {
        ArrayList<Identifier> ids;
        TypeDefinition type;
    ids = identifier_list();
    jj_consume_token(COLON);
    type = subtype_indication();
    jj_consume_token(SEMICOLON);
                int n = ids.size();
                for (int i = 0; i<n; i++) {
                        Identifier id = ids.get(i);
                        td_.addElement (id.getImage(), type, id.getLineCol());
                }
  }

  final public ArrayList<DiscreteRange> constraint() throws ParseException, ZamiaException {
        ArrayList<DiscreteRange> ranges;
        Range range;
    switch (jj_nt.kind) {
    case RANGE:
      range = range_constraint();
          ranges = new ArrayList<DiscreteRange>(1); ranges.add (new DiscreteRange(range, null, range.getLineCol()));
      break;
    case LPAREN:
      ranges = index_constraint();
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return ranges;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<DiscreteRange> index_constraint() throws ParseException, ZamiaException {
        ArrayList<DiscreteRange> ranges = new ArrayList<DiscreteRange> (1);
        DiscreteRange dr;
    jj_consume_token(LPAREN);
    dr = discreteRange();
                                        ranges.add (dr);
    label_30:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_30;
      }
      jj_consume_token(COMMA);
      dr = discreteRange();
                                         ranges.add(dr);
    }
    jj_consume_token(RPAREN);
                {if (true) return ranges;}
    throw new Error("Missing return statement in function");
  }

  final public DiscreteRange discreteRange() throws ParseException, ZamiaException {
        Range range;
        TypeDefinitionSubType td;
    if (jj_2_36(2147483647)) {
      range = range();
                                 {if (true) return new DiscreteRange (range, null, range.getLineCol());}
    } else if (jj_2_37(2147483647)) {
      td = subtype_indication();
                                            {if (true) return new DiscreteRange (td, null, td.getLineCol());}
    } else if (jj_2_38(2147483647)) {
      td = subtype_indication();
                                            {if (true) return new DiscreteRange (td, null, td.getLineCol());}
    } else if (jj_2_39(2147483647)) {
      td = subtype_indication();
                                            {if (true) return new DiscreteRange (td, null, td.getLineCol());}
    } else if (jj_2_40(2147483647)) {
      td = subtype_indication();
                                            {if (true) return new DiscreteRange (td, null, td.getLineCol());}
    } else {
      switch (jj_nt.kind) {
      case ABS:
      case NEW:
      case NOT:
      case NULL:
      case character_literal:
      case based_literal:
      case decimal_literal:
      case bit_string_literal:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
      case ADD:
      case SUB:
      case LPAREN:
        range = range();
                           {if (true) return new DiscreteRange (range, null, range.getLineCol());}
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Range range_constraint() throws ParseException, ZamiaException {
        Range range;
        Name n;
    jj_consume_token(RANGE);
    if (jj_2_41(2147483647)) {
      range = range();
    } else {
      switch (jj_nt.kind) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        n = name();
                                                                  range = new Range(n, null, n.getLineCol());
        break;
      default:
        jj_la1[132] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return range;}
    throw new Error("Missing return statement in function");
  }

  final public Range range() throws ParseException, ZamiaException {
        Name name;
        Operation left, right;
        int dir;
    if (jj_2_42(2147483647)) {
      left = simple_expression();
      dir = direction();
      right = simple_expression();
                  {if (true) return new Range (left, dir, right, null, left.getLineCol());}
    } else {
      switch (jj_nt.kind) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        name = name();
                                {if (true) return new Range (name, null, name.getLineCol());}
        break;
      default:
        jj_la1[133] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public int direction() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case TO:
      jj_consume_token(TO);
                  {if (true) return Range.DIR_UP;}
      break;
    case DOWNTO:
      jj_consume_token(DOWNTO);
                                                      {if (true) return Range.DIR_DOWN;}
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation simple_expression() throws ParseException, ZamiaException {
        Operation res = null, t;
        boolean do_invert = false;
        boolean do_pos = false;
        long l;
        MathOp op = MathOp.ADD;
        boolean is_concat = false;
        Token token = null;
    switch (jj_nt.kind) {
    case ADD:
    case SUB:
      switch (jj_nt.kind) {
      case ADD:
        token = jj_consume_token(ADD);
                          do_pos = true;
        break;
      case SUB:
        token = jj_consume_token(SUB);
                                                           do_invert = true;
        break;
      default:
        jj_la1[135] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    res = term();
                if (do_invert) {
                        res = new OperationMath(MathOp.NEG, res, null, getLocation(token));
                } else if (do_pos) {
                        res = new OperationMath(MathOp.POS, res, null, getLocation(token));
                }
    label_31:
    while (true) {
      if (jj_2_43(2147483647)) {
        ;
      } else {
        break label_31;
      }
      switch (jj_nt.kind) {
      case ADD:
        token = jj_consume_token(ADD);
                              op = MathOp.ADD; is_concat = false;
        break;
      case SUB:
        token = jj_consume_token(SUB);
                                op = MathOp.SUB; is_concat = false;
        break;
      case CONCAT:
        token = jj_consume_token(CONCAT);
                                   is_concat = true;
        break;
      default:
        jj_la1[137] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t = term();
                        if (!is_concat) {
                                res = new OperationMath(op, res, t, null, getLocation(token));
                        } else {
                                res = new OperationConcat(res, t, null, getLocation(token));
                        }
    }
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Operation term() throws ParseException, ZamiaException {
        Operation res;
        Operation f;
        MultiplyingOperator mo;
    res = factor();
    label_32:
    while (true) {
      if (jj_2_44(4)) {
        ;
      } else {
        break label_32;
      }
      mo = multiplying_operator();
      f = factor();
                  res = new OperationMath(mo.getOp(), res, f, null, mo.getLineCol());
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public MultiplyingOperator multiplying_operator() throws ParseException, ZamiaException {
        Token t;
    switch (jj_nt.kind) {
    case MUL:
      t = jj_consume_token(MUL);
                      {if (true) return new MultiplyingOperator(MathOp.MUL, getLocation(t));}
      break;
    case DIV:
      t = jj_consume_token(DIV);
                        {if (true) return new MultiplyingOperator(MathOp.DIV, getLocation(t));}
      break;
    case MOD:
      t = jj_consume_token(MOD);
                      {if (true) return new MultiplyingOperator(MathOp.MOD, getLocation(t));}
      break;
    case REM:
      t = jj_consume_token(REM);
                      {if (true) return new MultiplyingOperator(MathOp.REM, getLocation(t));}
      break;
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation factor() throws ParseException, ZamiaException {
        Operation res;
        Operation p;
        Token t;
    switch (jj_nt.kind) {
    case ABS:
      t = jj_consume_token(ABS);
      p = primary();
                                        res = new OperationMath(MathOp.ABS, p, null, getLocation(t));
      break;
    case NOT:
      t = jj_consume_token(NOT);
      p = primary();
                                         res = new OperationLogic(LogicOp.NOT, p, null, null, getLocation(t));
      break;
    case NEW:
    case NULL:
    case character_literal:
    case based_literal:
    case decimal_literal:
    case bit_string_literal:
    case basic_identifier:
    case extended_identifier:
    case string_literal:
    case LPAREN:
      res = primary();
      if (jj_2_45(2147483647)) {
        t = jj_consume_token(EXP);
        p = primary();
                                        res = new OperationMath(MathOp.POWER, res, p, null, getLocation(t));
      } else {
        ;
      }
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Name name() throws ParseException, ZamiaException {
        Identifier id;
        Name name;
        //Token t;
        Signature signature = null;
        Token t;
        String img;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id = identifier();
            img = id.getImage();
                name = new Name(id.getImage(), null, id.getLineCol());
      break;
    case string_literal:
      t = jj_consume_token(string_literal);
                  name = new Name(t.image.toUpperCase(), null, getLocation(t));
      break;
    default:
      jj_la1[140] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_46(2147483647)) {
      signature = signature();
    } else {
      ;
    }
    if (jj_2_47(2147483647)) {
      name_extension(name, signature);
    } else {
      ;
    }
          {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public Name operation_call() throws ParseException, ZamiaException {
        Name name;
        Signature signature = null;
        Token t;
    t = jj_consume_token(string_literal);
          name = new Name(t.image.toUpperCase(), null, getLocation(t));
    if (jj_2_48(2147483647)) {
      signature = signature();
    } else {
      ;
    }
    if (jj_2_49(2147483647)) {
      name_extension(name, signature);
    } else {
      ;
    }
          {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public Name pure_name() throws ParseException, ZamiaException {
        Identifier id;
        Name name;
        Signature signature = null;
    id = identifier();
          name = new Name(id.getImage(), null, id.getLineCol());
    if (jj_2_50(2147483647)) {
      signature = signature();
    } else {
      ;
    }
    if (jj_2_51(2147483647)) {
      name_extension(name, signature);
    } else {
      ;
    }
          {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void name_extension(Name name, Signature signature_) throws ParseException, ZamiaException {
        Identifier id;
        Operation exp = null;
        Suffix suffix;
        Range range;
        NameExtensionIndex nameExtensionIndex;
        NameExtensionRange nameExtensionRange;
        Token t;
        Aggregate aggregate;
        AssociationList al=null;
    if (jj_2_54(2147483647)) {
      t = jj_consume_token(TICK);
      jj_consume_token(RANGE);
      if (jj_2_52(2147483647)) {
        jj_consume_token(LPAREN);
        exp = expression();
        jj_consume_token(RPAREN);
      } else {
        ;
      }
                        name.add (new NameExtensionAttribute ("RANGE", signature_, exp, null, getLocation(t)));
    } else if (jj_2_55(2147483647)) {
      t = jj_consume_token(TICK);
      id = identifier();
      if (jj_2_53(2147483647)) {
        jj_consume_token(LPAREN);
        exp = expression();
        jj_consume_token(RPAREN);
      } else {
        ;
      }
                        name.add (new NameExtensionAttribute (id.getImage(), signature_, exp, null, getLocation(t)));
    } else if (jj_2_56(2147483647)) {
      t = jj_consume_token(TICK);
      aggregate = aggregate();
                        if (!aggregate.isAggregate()) {
                                exp = aggregate.getElement(0).getExpression();
                                exp.setParent(null, true);
                            name.add (new NameExtensionQualifiedExpression(exp, null, getLocation(t)));
                        } else {
                                name.add (new NameExtensionQualifiedExpression(aggregate, null, getLocation(t)));
                        }
    } else {
      switch (jj_nt.kind) {
      case PERIOD:
        t = jj_consume_token(PERIOD);
        suffix = suffix();
                        name.add (new NameExtensionSuffix (suffix, null, getLocation(t)));
        break;
      default:
        jj_la1[143] = jj_gen;
        if (jj_2_57(2147483647)) {
          t = jj_consume_token(LPAREN);
          range = range();
                                               nameExtensionRange = new NameExtensionRange(range, null, getLocation(t));
          label_33:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[141] = jj_gen;
              break label_33;
            }
            jj_consume_token(COMMA);
            range = range();
                                          nameExtensionRange.add (range);
          }
          jj_consume_token(RPAREN);
                        name.add (nameExtensionRange);
        } else if (jj_2_58(2147483647)) {
          t = jj_consume_token(LPAREN);
          exp = expression();
                                                  nameExtensionIndex = new NameExtensionIndex(exp, null, getLocation(t));
          label_34:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:
              ;
              break;
            default:
              jj_la1[142] = jj_gen;
              break label_34;
            }
            jj_consume_token(COMMA);
            exp = expression();
                                              nameExtensionIndex.add (exp);
          }
          jj_consume_token(RPAREN);
                        name.add (nameExtensionIndex);
        } else {
          switch (jj_nt.kind) {
          case LPAREN:
            t = jj_consume_token(LPAREN);
            al = association_list();
            jj_consume_token(RPAREN);
                        name.add(new NameExtensionFunctionCall(al, null, getLocation(t)));
            break;
          default:
            jj_la1[144] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    if (jj_2_59(2147483647)) {
      name_extension(name, null);
    } else {
      ;
    }
  }

  final public Signature signature() throws ParseException, ZamiaException {
        Signature signature;
        Name n;
    jj_consume_token(LBRACKET);
          signature = new Signature (null, getLocation());
    if (jj_2_62(2147483647)) {
      n = name();
                             signature.add (n);
      label_35:
      while (true) {
        if (jj_2_60(2147483647)) {
          ;
        } else {
          break label_35;
        }
        jj_consume_token(COMMA);
        n = name();
                                                                   signature.add (n);
      }
      if (jj_2_61(2147483647)) {
        jj_consume_token(RETURN);
        n = name();
                                                             signature.setReturn (n);
      } else {
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case RETURN:
        jj_consume_token(RETURN);
        n = name();
                                signature.setReturn (n);
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RBRACKET);
          {if (true) return signature;}
    throw new Error("Missing return statement in function");
  }

  final public Operation expression() throws ParseException, ZamiaException {
        Operation res, op;
        LogicOp lo;
        Token t;
    res = relation();
    label_36:
    while (true) {
      switch (jj_nt.kind) {
      case OR:
      case AND:
      case XOR:
      case NOR:
      case XNOR:
      case NAND:
        ;
        break;
      default:
        jj_la1[146] = jj_gen;
        break label_36;
      }
      switch (jj_nt.kind) {
      case AND:
        t = jj_consume_token(AND);
                                lo = LogicOp.AND;
        break;
      case OR:
        t = jj_consume_token(OR);
                                lo = LogicOp.OR;
        break;
      case NAND:
        t = jj_consume_token(NAND);
                                lo = LogicOp.NAND;
        break;
      case NOR:
        t = jj_consume_token(NOR);
                                lo = LogicOp.NOR;
        break;
      case XOR:
        t = jj_consume_token(XOR);
                                lo = LogicOp.XOR;
        break;
      case XNOR:
        t = jj_consume_token(XNOR);
                                lo = LogicOp.XNOR;
        break;
      default:
        jj_la1[147] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      op = relation();
                        res = new OperationLogic(lo, res, op, null, res.getLineCol());
    }
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public LogicOp logical_operator() throws ParseException {
    switch (jj_nt.kind) {
    case AND:
      jj_consume_token(AND);
                          {if (true) return LogicOp.AND;}
      break;
    case OR:
      jj_consume_token(OR);
                      {if (true) return LogicOp.OR;}
      break;
    case NAND:
      jj_consume_token(NAND);
                      {if (true) return LogicOp.NAND;}
      break;
    case NOR:
      jj_consume_token(NOR);
                      {if (true) return LogicOp.NOR;}
      break;
    case XOR:
      jj_consume_token(XOR);
                      {if (true) return LogicOp.XOR;}
      break;
    case XNOR:
      jj_consume_token(XNOR);
                      {if (true) return LogicOp.XNOR;}
      break;
    default:
      jj_la1[148] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation relation() throws ParseException, ZamiaException {
        Operation res, o;
        CompareOp op;
    res = shift_expression();
    switch (jj_nt.kind) {
    case EQ:
    case NEQ:
    case GE:
    case LE:
    case GT:
    case LO:
      op = relational_operator();
      o = shift_expression();
            res = new OperationCompare(op, res, o, null, res.getLineCol());
      break;
    default:
      jj_la1[149] = jj_gen;
      ;
    }
         {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public CompareOp relational_operator() throws ParseException {
    switch (jj_nt.kind) {
    case EQ:
      jj_consume_token(EQ);
                          {if (true) return CompareOp.EQUAL;}
      break;
    case NEQ:
      jj_consume_token(NEQ);
                          {if (true) return CompareOp.NEQUAL;}
      break;
    case LO:
      jj_consume_token(LO);
                          {if (true) return CompareOp.LESS;}
      break;
    case LE:
      jj_consume_token(LE);
                          {if (true) return CompareOp.LESSEQ;}
      break;
    case GT:
      jj_consume_token(GT);
                          {if (true) return CompareOp.GREATER;}
      break;
    case GE:
      jj_consume_token(GE);
                          {if (true) return CompareOp.GREATEREQ;}
      break;
    default:
      jj_la1[150] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation shift_expression() throws ParseException, ZamiaException {
        Operation res, o;
        ShiftOp op;
    res = simple_expression();
    switch (jj_nt.kind) {
    case SLA:
    case SLL:
    case SRA:
    case SRL:
    case ROL:
    case ROR:
      op = shift_operator();
      o = simple_expression();
            res = new OperationShift(op, res, o, null, res.getLineCol());
      break;
    default:
      jj_la1[151] = jj_gen;
      ;
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public ShiftOp shift_operator() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case SLL:
      jj_consume_token(SLL);
                          {if (true) return ShiftOp.SLL;}
      break;
    case SRL:
      jj_consume_token(SRL);
                          {if (true) return ShiftOp.SRL;}
      break;
    case SLA:
      jj_consume_token(SLA);
                          {if (true) return ShiftOp.SLA;}
      break;
    case SRA:
      jj_consume_token(SRA);
                          {if (true) return ShiftOp.SRA;}
      break;
    case ROL:
      jj_consume_token(ROL);
                          {if (true) return ShiftOp.ROL;}
      break;
    case ROR:
      jj_consume_token(ROR);
                          {if (true) return ShiftOp.ROR;}
      break;
    default:
      jj_la1[152] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Operation primary() throws ParseException, ZamiaException {
        Operation res;
        Name n;
        Aggregate aggregate;
    if (jj_2_63(2147483647)) {
      res = allocator();
    } else if (jj_2_64(2147483647)) {
      n = operation_call();
                                       res = new OperationName(n, null, n.getLineCol());
    } else if (jj_2_65(2147483647)) {
      res = pure_literal();
    } else if (jj_2_66(2147483647)) {
      n = pure_name();
                                  res = new OperationName(n, null, n.getLineCol());
    } else {
      switch (jj_nt.kind) {
      case LPAREN:
        aggregate = aggregate();
                        if (!aggregate.isAggregate()) {
                                res = aggregate.getElement(0).getExpression();
                                res.setParent(null, true);
                        } else {
                                res = new OperationAggregate (aggregate, null, aggregate.getLineCol());
                        }
        break;
      default:
        jj_la1[153] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public OperationAllocator allocator() throws ParseException, ZamiaException {
        TypeDefinitionSubType td = null;
        Token t;
    t = jj_consume_token(NEW);
    td = subtype_indication();
                {if (true) return new OperationAllocator(td, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public OperationLiteral literal() throws ParseException, ZamiaException {
        OperationLiteral res;
        Token t;
    if (jj_2_67(2147483647)) {
      res = numeric_literal();
    } else {
      switch (jj_nt.kind) {
      case character_literal:
      case basic_identifier:
      case extended_identifier:
        res = enumeration_literal();
        break;
      case bit_string_literal:
        t = jj_consume_token(bit_string_literal);
                        String str = t.image.toUpperCase();
                        int len = str.length();
                        res = new OperationLiteral (str, LiteralCat.BIT_STRING, null, getLocation(t));
        break;
      case string_literal:
        t = jj_consume_token(string_literal);
                        str = t.image.toUpperCase();
                        len = str.length();
                        res = new OperationLiteral (str.substring(1,len-1), LiteralCat.STRING, null, getLocation(t));
        break;
      case NULL:
        t = jj_consume_token(NULL);
                     res = new OperationLiteral (null, LiteralCat.NULL, null, getLocation(t));
        break;
      default:
        jj_la1[154] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

// since enumeration_literal also contains identifier which is also covered by name,
// we create this "pure" literal production for primaries:
  final public OperationLiteral pure_literal() throws ParseException, ZamiaException {
        OperationLiteral res;
        Token t;
    if (jj_2_68(2147483647)) {
      res = numeric_literal();
    } else {
      switch (jj_nt.kind) {
      case character_literal:
        t = jj_consume_token(character_literal);
                        res = new OperationLiteral (""+t.image.charAt(1), LiteralCat.CHAR, null, getLocation(t));
        break;
      case bit_string_literal:
        t = jj_consume_token(bit_string_literal);
                        res = new OperationLiteral (t.image.toUpperCase(), LiteralCat.BIT_STRING, null, getLocation(t));
        break;
      case string_literal:
        t = jj_consume_token(string_literal);
                        String str = t.image.toUpperCase();
                        int len = str.length();
                        res = new OperationLiteral (str.substring(1,len-1), LiteralCat.STRING, null, getLocation(t));
        break;
      case NULL:
        t = jj_consume_token(NULL);
                     res = new OperationLiteral (null, LiteralCat.NULL, null, getLocation(t));
        break;
      default:
        jj_la1[155] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public OperationLiteral numeric_literal() throws ParseException, ZamiaException {
        OperationLiteral res;
    if (jj_2_69(2147483647)) {
      res = physical_literal();
    } else {
      switch (jj_nt.kind) {
      case based_literal:
      case decimal_literal:
        res = abstract_literal();
        break;
      default:
        jj_la1[156] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public OperationLiteral physical_literal() throws ParseException, ZamiaException {
        Name n;
        OperationLiteral l = null;
    l = abstract_literal();
    n = name();
                if (l == null)
                        {if (true) return new OperationLiteral (n.getId(), LiteralCat.STRING, null, n.getLineCol());}
                {if (true) return new OperationLiteral (l, n, null, l.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public OperationLiteral abstract_literal() throws ParseException, ZamiaException {
        OperationLiteral res;
        long location;
        Token t;
    switch (jj_nt.kind) {
    case decimal_literal:
      t = jj_consume_token(decimal_literal);
                  res = new OperationLiteral (t.image, LiteralCat.DECIMAL, null, getLocation(t));
      break;
    case based_literal:
      t = jj_consume_token(based_literal);
                  res = new OperationLiteral (t.image, LiteralCat.BASED, null, getLocation(t));
      break;
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public OperationLiteral enumeration_literal() throws ParseException, ZamiaException {
        OperationLiteral res;
        Token t=null;
        Identifier id;
    switch (jj_nt.kind) {
    case character_literal:
      t = jj_consume_token(character_literal);
                  res = new OperationLiteral (""+t.image.charAt(1), LiteralCat.CHAR, null, getLocation(t));
      break;
    case basic_identifier:
    case extended_identifier:
      id = identifier();
                  res = new OperationLiteral (id.getImage(), LiteralCat.ENUM, null, id.getLineCol());
      break;
    default:
      jj_la1[158] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Aggregate aggregate() throws ParseException, ZamiaException {
        Aggregate agg;
        ElementAssociation ea;
          agg = new Aggregate (null, getLocation());
    jj_consume_token(LPAREN);
    ea = element_association();
                                             agg.add (ea);
    label_37:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[159] = jj_gen;
        break label_37;
      }
      jj_consume_token(COMMA);
      ea = element_association();
                                              agg.add (ea);
    }
    jj_consume_token(RPAREN);
          {if (true) return agg ;}
    throw new Error("Missing return statement in function");
  }

  final public ElementAssociation element_association() throws ParseException, ZamiaException {
        ArrayList<Range> choices = null;
        Operation op=null,se=null,exp=null;
        long location;
        Range r;
        Token t;
        int dir;
    switch (jj_nt.kind) {
    case OTHERS:
      t = jj_consume_token(OTHERS);
                   choices = new ArrayList<Range>(); choices.add(null); location = getLocation(t);
      break;
    case ABS:
    case NEW:
    case NOT:
    case NULL:
    case character_literal:
    case based_literal:
    case decimal_literal:
    case bit_string_literal:
    case basic_identifier:
    case extended_identifier:
    case string_literal:
    case ADD:
    case SUB:
    case LPAREN:
      op = expression();
                        location = op.getLineCol();
      if (jj_2_70(2147483647)) {
        dir = direction();
        se = simple_expression();
                r = new Range (op, dir, se, null, op.getLineCol());
                choices = new ArrayList<Range>(); choices.add(r);
                op = null;
      } else {
        ;
      }
      break;
    default:
      jj_la1[160] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_38:
    while (true) {
      switch (jj_nt.kind) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[161] = jj_gen;
        break label_38;
      }
      jj_consume_token(PIPE);
      r = choice();
         if (choices == null) {
                choices = new ArrayList<Range>();
                choices.add(new Range (op, op, false, null, op.getLineCol()));
                op = null;
         }
         choices.add(r);
    }
    switch (jj_nt.kind) {
    case FOLLOWS:
      jj_consume_token(FOLLOWS);
      exp = expression();
      break;
    default:
      jj_la1[162] = jj_gen;
      ;
    }
        if (exp == null) {
                if (choices != null || op == null) {
                        {if (true) throw new ZamiaException("Syntax error in element assocation: choices given but no expression.", new SourceLocation(sf, location));}
                }
                exp = op;
        } else {
                if (choices == null){
                        if (op == null) {
                                {if (true) throw new ZamiaException("Syntax error in element assocation: expression given but no choices.", exp.getLocation());}
                        }
                        choices = new ArrayList<Range>();
                        choices.add(new Range (op, op, false, null, op.getLineCol()));
                }
        }


        {if (true) return new ElementAssociation (choices, exp, null, location);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Range> choices() throws ParseException, ZamiaException {
        ArrayList<Range> l = new ArrayList<Range>(1);
        Range r;
    r = choice();
                       l.add(r);
    label_39:
    while (true) {
      switch (jj_nt.kind) {
      case PIPE:
        ;
        break;
      default:
        jj_la1[163] = jj_gen;
        break label_39;
      }
      jj_consume_token(PIPE);
      r = choice();
                                l.add(r);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Range choice() throws ParseException, ZamiaException {
        Operation op,se;
        int dir;
    switch (jj_nt.kind) {
    case OTHERS:
      jj_consume_token(OTHERS);
                  {if (true) return null;}
      break;
    case ABS:
    case NEW:
    case NOT:
    case NULL:
    case character_literal:
    case based_literal:
    case decimal_literal:
    case bit_string_literal:
    case basic_identifier:
    case extended_identifier:
    case string_literal:
    case ADD:
    case SUB:
    case LPAREN:
      op = simple_expression();
      if (jj_2_71(2147483647)) {
        dir = direction();
        se = simple_expression();
                {if (true) return new Range (op, dir, se, null, op.getLineCol());}
      } else {
        ;
      }
                  {if (true) return new Range (op, op, false, null, op.getLineCol());}
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Suffix suffix() throws ParseException, ZamiaException {
        Suffix suffix=null ;
        Identifier id;
        Token t;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id = identifier();
                        suffix = new Suffix (id.getLineCol());
                        suffix.setId (id.getImage());
      break;
    case character_literal:
      t = jj_consume_token(character_literal);
                        suffix = new Suffix (getLocation(t));
                        suffix.setCharLiteral (t.image.charAt(1));
      break;
    case string_literal:
      t = jj_consume_token(string_literal);
                        suffix = new Suffix (getLocation(t));
                        suffix.setStringLiteral (t.image.toUpperCase());
      break;
    case ALL:
      t = jj_consume_token(ALL);
                        suffix = new Suffix (getLocation(t));
                        suffix.setAll();
      break;
    default:
      jj_la1[165] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return suffix;}
    throw new Error("Missing return statement in function");
  }

  final public Identifier identifier() throws ParseException, ZamiaException {
        Token t;
        Identifier id;
        boolean extended = false;
    switch (jj_nt.kind) {
    case basic_identifier:
      t = jj_consume_token(basic_identifier);
      break;
    case extended_identifier:
      t = jj_consume_token(extended_identifier);
                                     extended = true;
      break;
    default:
      jj_la1[166] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                id = new Identifier(t.image.toUpperCase(), extended, getLocation(t));
                {if (true) return id;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Identifier> identifier_list() throws ParseException, ZamiaException {
        ArrayList<Identifier> ids = new ArrayList<Identifier>();
        Identifier id;
    id = identifier();
                            ids.add(id);
    label_40:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[167] = jj_gen;
        break label_40;
      }
      jj_consume_token(COMMA);
      id = identifier();
                                   ids.add (id);
    }
          {if (true) return ids;}
    throw new Error("Missing return statement in function");
  }

/**
 * processes
 */
  final public SequentialProcess process_statement() throws ParseException, ZamiaException {
        SequentialProcess proc;
        ArrayList l;
        SequenceOfStatements seq;
        Token t;
        String label = null;
        Identifier id1 = null, id2 = null;
        boolean isPostponed = false;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id1 = identifier();
      jj_consume_token(COLON);
                                       label = id1.getImage();
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case POSTPONED:
      jj_consume_token(POSTPONED);
                        isPostponed = true;
      break;
    default:
      jj_la1[169] = jj_gen;
      ;
    }
    t = jj_consume_token(PROCESS);
                proc = new SequentialProcess (null, getLocation(t));
                proc.setPostponed(isPostponed);
                if (label != null)  {
                        proc.setLabel(label);
                }
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
      l = sensitivity_list();
      jj_consume_token(RPAREN);
                        int n = l.size();
                        for (int i = 0; i<n; i++) {
                                Name name = (Name) l.get(i);
                                proc.addSensitivity (name);
                        }
      break;
    default:
      jj_la1[170] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case IS:
      jj_consume_token(IS);
      break;
    default:
      jj_la1[171] = jj_gen;
      ;
    }
    label_41:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case PURE:
      case FILE:
      case TYPE:
      case ALIAS:
      case GROUP:
      case SHARED:
      case IMPURE:
      case SUBTYPE:
      case CONSTANT:
      case FUNCTION:
      case ATTRIBUTE:
      case PROCEDURE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[172] = jj_gen;
        break label_41;
      }
      process_declarative_item(proc);
    }
    jj_consume_token(BEGIN);
    seq = sequence_of_statements();
                  proc.setStatementSequence (seq);
    jj_consume_token(END);
    switch (jj_nt.kind) {
    case POSTPONED:
      jj_consume_token(POSTPONED);
      break;
    default:
      jj_la1[173] = jj_gen;
      ;
    }
    jj_consume_token(PROCESS);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[174] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null) {
                    id2.setParent(proc);
                        if (id1 == null) {
                                  erm.addError (new ZamiaException ("No label given at start of process.", id2.getLocation()));
                        } else {
                                if (!id2.equals(id1)) {
                                  erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id1+"')", id2.getLocation()));
                                }
                        }
                }
                {if (true) return proc;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<Name> sensitivity_list() throws ParseException, ZamiaException {
        Name n;
        ArrayList<Name> l = new ArrayList<Name>(1);
    n = name();
                     l.add (n);
    label_42:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[175] = jj_gen;
        break label_42;
      }
      jj_consume_token(COMMA);
      n = name();
                               l.add (n);
    }
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public void process_declarative_item(SequentialProcess proc_) throws ParseException, ZamiaException {
        TypeDeclaration td;
        ArrayList<ConstantDeclaration> lcd;
        ArrayList<FileDeclaration> lfd;
        ArrayList<VariableDeclaration> lvd;
        ArrayList<Name> ln;
        AttributeDeclaration ad;
        SubProgram sub;
        BlockDeclarativeItem item;
    switch (jj_nt.kind) {
    case PURE:
    case IMPURE:
    case FUNCTION:
    case PROCEDURE:
      sub = subprogram();
                               proc_.add(sub);
      break;
    case TYPE:
      td = type_declaration();
                                    proc_.add(td);
      break;
    case SUBTYPE:
      td = subtype_declaration();
                                       proc_.add(td);
      break;
    case CONSTANT:
      lcd = constant_declaration();
                        int n = lcd.size();
                        for (int i = 0; i<n; i++) {
                                item = lcd.get(i);
                                proc_.add(item);
                        }
      break;
    case SHARED:
    case VARIABLE:
      lvd = variable_declaration();
                        n = lvd.size();
                        for (int i = 0; i<n; i++) {
                                item = lvd.get(i);
                                proc_.add (item);
                        }
      break;
    case FILE:
      lfd = file_declaration();
                        n = lfd.size();
                        for (int i = 0; i<n; i++) {
                                item = lfd.get(i);
                                proc_.add(item);
                        }
      break;
    case ALIAS:
      item = alias_declaration();
                        proc_.add(item);
      break;
    default:
      jj_la1[176] = jj_gen;
      if (jj_2_72(2147483647)) {
        ad = attribute_declaration();
                                              proc_.add(ad);
      } else {
        switch (jj_nt.kind) {
        case ATTRIBUTE:
          attribute_specification();
          break;
        case USE:
          ln = use_clause();
                        n = ln.size();
                        for (int i = 0; i<n; i++) {
                                Name name = ln.get(i);
                                proc_.add(new Use (name, null, name.getLineCol()));
                        }
          break;
        case GROUP:
          group_declaration();
          break;
        default:
          jj_la1[177] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public ArrayList<FileDeclaration> file_declaration() throws ParseException, ZamiaException {
        ArrayList<FileDeclaration> l;
        ArrayList<Identifier> ids;
        TypeDefinition t;
        FileOpenInformation foi = null;
    jj_consume_token(FILE);
    ids = identifier_list();
    jj_consume_token(COLON);
    t = subtype_indication();
    switch (jj_nt.kind) {
    case IS:
    case OPEN:
      foi = file_open_information();
      break;
    default:
      jj_la1[178] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                int n = ids.size();
                l = new ArrayList<FileDeclaration>(n);
                for (int i=0; i<n; i++) {
                        Identifier id = ids.get(i);
                        FileDeclaration fd = new FileDeclaration(id.getImage(), t, foi, null, id.getLineCol());
                        l.add (fd);
                }
                {if (true) return l ;}
    throw new Error("Missing return statement in function");
  }

  final public FileOpenInformation file_open_information() throws ParseException, ZamiaException {
        Operation exp=null, exp2;
        OIDir m=null;
        Token t=null, t2;
    switch (jj_nt.kind) {
    case OPEN:
      t = jj_consume_token(OPEN);
      exp = expression();
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
    t2 = jj_consume_token(IS);
                                                  if (t==null) t=t2;
    switch (jj_nt.kind) {
    case IN:
    case OUT:
    case INOUT:
    case BUFFER:
    case LINKAGE:
      m = mode();
      break;
    default:
      jj_la1[180] = jj_gen;
      ;
    }
    exp2 = expression();
                {if (true) return new FileOpenInformation (exp, m, exp2, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<VariableDeclaration> variable_declaration() throws ParseException, ZamiaException {
        ArrayList<VariableDeclaration> l;
        ArrayList<Identifier> ids;
        TypeDefinition t;
        Operation exp=null;
    switch (jj_nt.kind) {
    case SHARED:
      jj_consume_token(SHARED);
      break;
    default:
      jj_la1[181] = jj_gen;
      ;
    }
    jj_consume_token(VARIABLE);
    ids = identifier_list();
    jj_consume_token(COLON);
    t = subtype_indication();
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp = expression();
      break;
    default:
      jj_la1[182] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case IS:
      jj_consume_token(IS);
      name();
      break;
    default:
      jj_la1[183] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                int n = ids.size();
                l = new ArrayList<VariableDeclaration> (n);
                for (int i=0; i<n; i++) {
                        Identifier id = ids.get(i);
                        VariableDeclaration vd = new VariableDeclaration (id.getImage(), t, exp, null, id.getLineCol());
                        l.add (vd);
                }
                {if (true) return l ;}
    throw new Error("Missing return statement in function");
  }

  final public SequenceOfStatements sequence_of_statements() throws ParseException, ZamiaException {
        SequenceOfStatements seq=null ;
        SequentialStatement stmt;
    label_43:
    while (true) {
      switch (jj_nt.kind) {
      case IF:
      case FOR:
      case NULL:
      case WAIT:
      case CASE:
      case EXIT:
      case LOOP:
      case WHILE:
      case RETURN:
      case ASSERT:
      case NEXT:
      case REPORT:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
      case COLON:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[184] = jj_gen;
        break label_43;
      }
      stmt = sequential_statement();
                        if (stmt != null) {
                                if (seq == null)
                                        seq = new SequenceOfStatements (null, stmt.getLineCol());
                                seq.add(stmt);
                        }
    }
                if (seq == null)
                        seq = new SequenceOfStatements (null, getLocation());
                {if (true) return seq;}
    throw new Error("Missing return statement in function");
  }

  final public SequentialStatement sequential_statement() throws ParseException, ZamiaException {
        SequentialStatement stmt = null;
    if (jj_2_73(3)) {
      stmt = wait_statement();
    } else if (jj_2_74(3)) {
      stmt = assertion_statement();
    } else if (jj_2_75(2147483647)) {
      stmt = report_statement();
    } else if (jj_2_76(2147483647)) {
      stmt = signal_assignment_statement();
    } else if (jj_2_77(2147483647)) {
      stmt = variable_assignment_statement();
    } else if (jj_2_78(2147483647)) {
      stmt = procedure_call_statement();
    } else if (jj_2_79(3)) {
      stmt = if_statement();
    } else if (jj_2_80(3)) {
      stmt = case_statement();
    } else if (jj_2_81(3)) {
      stmt = loop_statement();
    } else if (jj_2_82(3)) {
      stmt = next_statement();
    } else if (jj_2_83(3)) {
      stmt = exit_statement();
    } else if (jj_2_84(3)) {
      stmt = return_statement();
    } else if (jj_2_85(3)) {
      stmt = null_statement();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public SequentialNextStatement next_statement() throws ParseException, ZamiaException {
        Token t;
        Identifier id1=null, id2 = null;
        Operation exp = null;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id1 = identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[185] = jj_gen;
      ;
    }
    t = jj_consume_token(NEXT);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[186] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case WHEN:
      jj_consume_token(WHEN);
      exp = expression();
      break;
    default:
      jj_la1[187] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                {if (true) return new SequentialNextStatement ( id2 != null ? id2.getImage() : null, exp, id1 != null ? id1.getImage() : null, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public SequentialReport report_statement() throws ParseException, ZamiaException {
        Operation exp, severity=null;
        long location;
        Identifier id=null;
        Token t;
        String label = null;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id = identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[188] = jj_gen;
      ;
    }
    t = jj_consume_token(REPORT);
    exp = expression();
    switch (jj_nt.kind) {
    case SEVERITY:
      jj_consume_token(SEVERITY);
      severity = expression();
      break;
    default:
      jj_la1[189] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                location = getLocation(t);
                if (id != null) {
                        label = id.getImage();
                        location = id.getLineCol();
                }
                {if (true) return new SequentialReport (exp, severity, label, null, location);}
    throw new Error("Missing return statement in function");
  }

  final public SequentialProcedureCall procedure_call() throws ParseException, ZamiaException {
        Name n;
        AssociationList params = null;
    n = name();
          {if (true) return new SequentialProcedureCall (n, null, n.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public SequentialProcedureCall procedure_call_statement() throws ParseException, ZamiaException {
        SequentialProcedureCall pc;
    if (jj_2_86(2147483647)) {
      identifier();
      jj_consume_token(COLON);
    } else {
      ;
    }
    pc = procedure_call();
    jj_consume_token(SEMICOLON);
     {if (true) return pc;}
    throw new Error("Missing return statement in function");
  }

  final public SequentialExit exit_statement() throws ParseException, ZamiaException {
        Operation cond = null;
        Token t;
        Identifier l1=null, l2=null;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      l1 = identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[190] = jj_gen;
      ;
    }
    t = jj_consume_token(EXIT);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      l2 = identifier();
      break;
    default:
      jj_la1[191] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case WHEN:
      jj_consume_token(WHEN);
      cond = expression();
      break;
    default:
      jj_la1[192] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
        {if (true) return new SequentialExit (l2 != null ? l2.getImage() : null, cond, l1 != null? l1.getImage():null, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public SequentialWait wait_statement() throws ParseException, ZamiaException {
        SequentialWait stmt;
        ArrayList l;
        Operation op;
        Token t;
        Identifier label = null;
    if (jj_2_87(2147483647)) {
      jj_consume_token(COLON);
      label = identifier();
      jj_consume_token(COLON);
    } else {
      ;
    }
    t = jj_consume_token(WAIT);
                stmt = new SequentialWait (label != null ? label.getImage() : null, null, getLocation(t));
    switch (jj_nt.kind) {
    case ON:
      l = sensitivity_clause();
                                     stmt.setSensitivityList (l);
      break;
    default:
      jj_la1[193] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case UNTIL:
      op = condition_clause();
                                    stmt.setConditionClause (op);
      break;
    default:
      jj_la1[194] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case FOR:
      op = timeout_clause();
                                  stmt.setTimeoutClause (op);
      break;
    default:
      jj_la1[195] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList sensitivity_clause() throws ParseException, ZamiaException {
        ArrayList l;
    jj_consume_token(ON);
    l = sensitivity_list();
          {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Operation condition_clause() throws ParseException, ZamiaException {
        Operation exp;
    jj_consume_token(UNTIL);
    exp = expression();
          {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Operation timeout_clause() throws ParseException, ZamiaException {
        Operation exp;
    jj_consume_token(FOR);
    exp = expression();
          {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public SequentialAssert assertion_statement() throws ParseException, ZamiaException {
        Assertion ass;
        SequentialAssert stmt;
        Identifier id = null;
        long location;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id = identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[196] = jj_gen;
      ;
    }
    ass = assertion();
    jj_consume_token(SEMICOLON);
                location = ass.getLineCol();
                if (id != null)
                        location = id.getLineCol();
                {if (true) return new SequentialAssert(ass, id != null ? id.getImage() : null, null, location);}
    throw new Error("Missing return statement in function");
  }

  final public Assertion assertion() throws ParseException, ZamiaException {
        Assertion assertion;
        Operation op;
        Token t;
    t = jj_consume_token(ASSERT);
    op = expression();
          assertion = new Assertion (op, null, getLocation(t));
    switch (jj_nt.kind) {
    case REPORT:
      jj_consume_token(REPORT);
      op = expression();
                                       assertion.setReport (op);
      break;
    default:
      jj_la1[197] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case SEVERITY:
      jj_consume_token(SEVERITY);
      op = expression();
                                         assertion.setSeverity (op);
      break;
    default:
      jj_la1[198] = jj_gen;
      ;
    }
          {if (true) return assertion;}
    throw new Error("Missing return statement in function");
  }

  final public SequentialSignalAssignment signal_assignment_statement() throws ParseException, ZamiaException {
        Target target;
        Waveform waveform;
        DelayMechanism dm=null;
    if (jj_2_88(2147483647)) {
      identifier();
      jj_consume_token(COLON);
    } else {
      ;
    }
    target = target();
    jj_consume_token(LE);
    switch (jj_nt.kind) {
    case REJECT:
    case INERTIAL:
    case TRANSPORT:
      dm = delay_mechanism();
      break;
    default:
      jj_la1[199] = jj_gen;
      ;
    }
    waveform = waveform();
    jj_consume_token(SEMICOLON);
          {if (true) return new SequentialSignalAssignment (target, waveform, dm, null, target.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public SequentialVariableAssignment variable_assignment_statement() throws ParseException, ZamiaException {
        Target target;
        Operation exp;
    if (jj_2_89(2147483647)) {
      identifier();
      jj_consume_token(COLON);
    } else {
      ;
    }
    target = target();
    jj_consume_token(ASSIGN);
    exp = expression();
    jj_consume_token(SEMICOLON);
          {if (true) return new SequentialVariableAssignment (target, exp, null, target.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public SequentialIf if_statement() throws ParseException, ZamiaException {
        Operation cond;
        long location;
        SequenceOfStatements thenStmts, elseStmts;
        SequentialIf stmt, stmt2, stmt3;
        Token t;
        Identifier id1 = null, id2 = null;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id1 = identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[200] = jj_gen;
      ;
    }
    t = jj_consume_token(IF);
    cond = expression();
    jj_consume_token(THEN);
    thenStmts = sequence_of_statements();
                stmt = new SequentialIf (cond, thenStmts, id1 != null ? id1.getImage() : null, null, getLocation(t));
                stmt2 = stmt;
    label_44:
    while (true) {
      switch (jj_nt.kind) {
      case ELSIF:
        ;
        break;
      default:
        jj_la1[201] = jj_gen;
        break label_44;
      }
      t = jj_consume_token(ELSIF);
      cond = expression();
      jj_consume_token(THEN);
      thenStmts = sequence_of_statements();
                        stmt3 = new SequentialIf (cond, thenStmts, null, null, getLocation(t));

                        SequenceOfStatements elseSeq = new SequenceOfStatements(null, getLocation(t));

                        elseSeq.add (stmt3);

                        stmt2.setElse (elseSeq);
                        stmt2 = stmt3;
    }
    switch (jj_nt.kind) {
    case ELSE:
      jj_consume_token(ELSE);
      elseStmts = sequence_of_statements();
                        SequenceOfStatements oldElse = stmt2.getElseStmt();
                        if (oldElse == null)
                                stmt2.setElse (elseStmts);
                        else
                                oldElse.append (elseStmts);
      break;
    default:
      jj_la1[202] = jj_gen;
      ;
    }
    jj_consume_token(END);
    jj_consume_token(IF);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[203] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null) {
                    id2.setParent(stmt);
                        if (id1 == null) {
                                  erm.addError (new ZamiaException ("No label given at start of if statement.", id2.getLocation()));
                        } else {
                                if (!id2.equals(id1)) {
                                  erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id1+"')", id2.getLocation()));
                                }
                        }
                }
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public SequentialCase case_statement() throws ParseException, ZamiaException {
        Operation exp;
        SequentialCase stmt;
        Token t;
        Identifier id1=null, id2=null;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id1 = identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[204] = jj_gen;
      ;
    }
    t = jj_consume_token(CASE);
    exp = expression();
    jj_consume_token(IS);
                  stmt = new SequentialCase (exp, null, getLocation(t));
    case_statement_alternative(stmt);
    label_45:
    while (true) {
      switch (jj_nt.kind) {
      case WHEN:
        ;
        break;
      default:
        jj_la1[205] = jj_gen;
        break label_45;
      }
      case_statement_alternative(stmt);
    }
    jj_consume_token(END);
    jj_consume_token(CASE);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[206] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null) {
                    id2.setParent(stmt);
                        if (id1 == null) {
                                  erm.addError (new ZamiaException ("No label given at start of statement.", id2.getLocation()));
                        } else {
                                if (!id2.equals(id1)) {
                                  erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id1+"')", id2.getLocation()));
                                }
                        }
                }
                {if (true) return stmt;}
    throw new Error("Missing return statement in function");
  }

  final public void case_statement_alternative(SequentialCase case_) throws ParseException, ZamiaException {
        ArrayList choices;
        SequenceOfStatements seq;
        Token t;
    t = jj_consume_token(WHEN);
    choices = choices();
    jj_consume_token(FOLLOWS);
    seq = sequence_of_statements();
                case_.addAlternative (choices, seq, getLocation(t));
  }

  final public SequentialLoop loop_statement() throws ParseException, ZamiaException {
        SequentialLoop loop=null;
        SequenceOfStatements seq;
        Token t;
        Identifier id1 = null, id2=null;
        String loopLabel = null;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id1 = identifier();
      jj_consume_token(COLON);
                                       loopLabel = id1.getImage();
      break;
    default:
      jj_la1[207] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case FOR:
    case WHILE:
      loop = iteration_scheme(loopLabel);
      break;
    default:
      jj_la1[208] = jj_gen;
      ;
    }
    t = jj_consume_token(LOOP);
    seq = sequence_of_statements();
                        if (loop == null)
                                loop = new SequentialLoop (loopLabel, null, getLocation(t));

                        loop.setBody (seq);
    jj_consume_token(END);
    jj_consume_token(LOOP);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      id2 = identifier();
      break;
    default:
      jj_la1[209] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                if (id2 != null) {
                    id2.setParent(loop);
                        if (id1 == null) {
                                  erm.addError (new ZamiaException ("No label given at start of loop.", id2.getLocation()));
                        } else {
                                if (!id2.equals(id1)) {
                                  erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id1+"')", id2.getLocation()));
                                }
                        }
                }

                {if (true) return loop ;}
    throw new Error("Missing return statement in function");
  }

  final public SequentialLoop iteration_scheme(String aLoopLabel) throws ParseException, ZamiaException {
        SequentialLoop loop;
        Operation cond;
        Identifier id;
        Range range;
        Token t;
        Name n;
    switch (jj_nt.kind) {
    case WHILE:
      t = jj_consume_token(WHILE);
      cond = expression();
                                          loop = new SequentialWhile (cond, aLoopLabel, null, getLocation(t));
      break;
    case FOR:
      t = jj_consume_token(FOR);
      id = identifier();
      jj_consume_token(IN);
      if (jj_2_90(2147483647)) {
        range = range();
      } else {
        switch (jj_nt.kind) {
        case basic_identifier:
        case extended_identifier:
        case string_literal:
          n = name();
                                                                                         range = new Range(n, null, n.getLineCol());
          break;
        default:
          jj_la1[210] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                        loop = new SequentialFor (id.getImage(), range, aLoopLabel, null, getLocation(t));
      break;
    default:
      jj_la1[211] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return loop;}
    throw new Error("Missing return statement in function");
  }

  final public NullStatement null_statement() throws ParseException, ZamiaException {
        Token t;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[212] = jj_gen;
      ;
    }
    t = jj_consume_token(NULL);
    jj_consume_token(SEMICOLON);
                {if (true) return new NullStatement(null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement return_statement() throws ParseException, ZamiaException {
        Operation exp=null;
        long location;
        Token t;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      identifier();
      jj_consume_token(COLON);
      break;
    default:
      jj_la1[213] = jj_gen;
      ;
    }
    t = jj_consume_token(RETURN);
    switch (jj_nt.kind) {
    case ABS:
    case NEW:
    case NOT:
    case NULL:
    case character_literal:
    case based_literal:
    case decimal_literal:
    case bit_string_literal:
    case basic_identifier:
    case extended_identifier:
    case string_literal:
    case ADD:
    case SUB:
    case LPAREN:
      exp = expression();
      break;
    default:
      jj_la1[214] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
          {if (true) return new ReturnStatement (exp, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

/*
 * subprograms
 */
  final public Identifier designator() throws ParseException, ZamiaException {
        Identifier res;
        Token t;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      res = identifier();
      break;
    case string_literal:
      t = jj_consume_token(string_literal);
                                 res = new Identifier(t.image.toUpperCase(), false, getLocation(t));
      break;
    default:
      jj_la1[215] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public void subprogram_declarative_item(SubProgram sub_) throws ParseException, ZamiaException {
        ArrayList<VariableDeclaration> l;
        ArrayList<ConstantDeclaration> l2;
        ArrayList<FileDeclaration> l3;
        TypeDeclaration td;
        BlockDeclarativeItem item;
    switch (jj_nt.kind) {
    case PURE:
    case IMPURE:
    case FUNCTION:
    case PROCEDURE:
      item = subprogram();
                        sub_.add(item);
      break;
    case TYPE:
      td = type_declaration();
                        sub_.add(td);
      break;
    case SUBTYPE:
      td = subtype_declaration();
                        sub_.add(td);
      break;
    case CONSTANT:
      l2 = constant_declaration();
                        int n = l2.size();
                        for (int i = 0; i<n; i++) {
                                sub_.add(l2.get(i));
                        }
      break;
    case SHARED:
    case VARIABLE:
      l = variable_declaration();
                        n = l.size();
                        for (int i = 0; i<n; i++) {
                                sub_.add(l.get(i));
                        }
      break;
    case FILE:
      l3 = file_declaration();
                        n = l3.size();
                        for (int i = 0; i<n; i++) {
                                sub_.add(l3.get(i));
                        }
      break;
    case ALIAS:
      item = alias_declaration();
                        sub_.add(item);
      break;
    default:
      jj_la1[216] = jj_gen;
      if (jj_2_91(2147483647)) {
        attribute_declaration();
      } else {
        switch (jj_nt.kind) {
        case ATTRIBUTE:
          attribute_specification();
          break;
        case USE:
          use_clause();
          break;
        case GROUP:
          group_declaration();
          break;
        default:
          jj_la1[217] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void subprogram_declarative_part(SubProgram sub_) throws ParseException, ZamiaException {
    label_46:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case PURE:
      case FILE:
      case TYPE:
      case ALIAS:
      case GROUP:
      case SHARED:
      case IMPURE:
      case SUBTYPE:
      case CONSTANT:
      case FUNCTION:
      case ATTRIBUTE:
      case PROCEDURE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[218] = jj_gen;
        break label_46;
      }
      subprogram_declarative_item(sub_);
    }
  }

  final public void subprogram_statement_part(SubProgram sub_) throws ParseException, ZamiaException {
        SequentialStatement stmt;
        SequenceOfStatements seq = null;
                seq = sub_.getCode();
    label_47:
    while (true) {
      switch (jj_nt.kind) {
      case IF:
      case FOR:
      case NULL:
      case WAIT:
      case CASE:
      case EXIT:
      case LOOP:
      case WHILE:
      case RETURN:
      case ASSERT:
      case NEXT:
      case REPORT:
      case basic_identifier:
      case extended_identifier:
      case string_literal:
      case COLON:
      case LPAREN:
        ;
        break;
      default:
        jj_la1[219] = jj_gen;
        break label_47;
      }
      stmt = sequential_statement();
                        seq.add(stmt);
    }
  }

  final public SubProgram subprogram() throws ParseException, ZamiaException {
        Identifier id, id2=null;
        InterfaceList interfaces=null;
        Name n;
        Token t, t2;
        SubProgram sub;
        boolean pure = true;
    switch (jj_nt.kind) {
    case PROCEDURE:
      t = jj_consume_token(PROCEDURE);
      id = designator();
      switch (jj_nt.kind) {
      case LPAREN:
        jj_consume_token(LPAREN);
        interfaces = interface_list(InterfaceContext.PROCEDURE, OIDir.IN);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[220] = jj_gen;
        ;
      }
                  sub= new SubProgram (id.getImage(), interfaces        , null, false, null, id.getLineCol());
      break;
    case PURE:
    case IMPURE:
    case FUNCTION:
      switch (jj_nt.kind) {
      case PURE:
      case IMPURE:
        switch (jj_nt.kind) {
        case PURE:
          jj_consume_token(PURE);
          break;
        case IMPURE:
          jj_consume_token(IMPURE);
                                pure = false;
          break;
        default:
          jj_la1[221] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[222] = jj_gen;
        ;
      }
      t = jj_consume_token(FUNCTION);
      id = designator();
      switch (jj_nt.kind) {
      case LPAREN:
        jj_consume_token(LPAREN);
        interfaces = interface_list(InterfaceContext.FUNCTION, OIDir.IN);
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[223] = jj_gen;
        ;
      }
      jj_consume_token(RETURN);
      n = name();
                  sub = new SubProgram (id.getImage(), interfaces, n, pure, null, getLocation(t));
      break;
    default:
      jj_la1[224] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case IS:
      jj_consume_token(IS);
      subprogram_declarative_part(sub);
      t2 = jj_consume_token(BEGIN);
                                sub.setCode (new SequenceOfStatements(sub, getLocation(t2)));
      subprogram_statement_part(sub);
      jj_consume_token(END);
      switch (jj_nt.kind) {
      case FUNCTION:
      case PROCEDURE:
        switch (jj_nt.kind) {
        case PROCEDURE:
          jj_consume_token(PROCEDURE);
          break;
        case FUNCTION:
          jj_consume_token(FUNCTION);
          break;
        default:
          jj_la1[225] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[226] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case basic_identifier:
      case extended_identifier:
      case string_literal:
        id2 = designator();
        break;
      default:
        jj_la1[227] = jj_gen;
        ;
      }
      jj_consume_token(SEMICOLON);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[228] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        if (id2 != null && !id2.equals(id)) {
            id2.setParent(sub);
                        erm.addError (new ZamiaException ("Closing id doesn't match (was expecting '"+id+"')", id2.getLocation()));
                }

        {if (true) return sub;}
    throw new Error("Missing return statement in function");
  }

  final public AliasDeclaration alias_declaration() throws ParseException, ZamiaException {
        Identifier id;
        TypeDefinition td = null;
        Name n;
        Signature s=null;
        Token t;
    t = jj_consume_token(ALIAS);
    id = designator();
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
      td = subtype_indication();
      break;
    default:
      jj_la1[229] = jj_gen;
      ;
    }
    jj_consume_token(IS);
    n = name();
    switch (jj_nt.kind) {
    case LBRACKET:
      s = signature();
      break;
    default:
      jj_la1[230] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
                {if (true) return new AliasDeclaration(id.getImage(), td, n, s, id.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<ConfigurationSpecification> configuration_specification() throws ParseException, ZamiaException {
        ArrayList<ConfigurationSpecification> res = new ArrayList<ConfigurationSpecification>();
        ComponentSpecification cs;
        BindingIndication bi;
    jj_consume_token(FOR);
    cs = component_specification();
    bi = binding_indication();
    jj_consume_token(SEMICOLON);
        int n = cs.getNumIds();
        for (int i = 0; i<n; i++) {
                Identifier id = cs.getId(i);

                res.add(new ConfigurationSpecification(bi, cs.getName(), id.getImage(), null, id.getLineCol()));
        }

        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public DisconnectionSpecification disconnection_specification() throws ParseException, ZamiaException {
        Token t;
        Operation expr;
        GuardedSignalSpecification gss;
    t = jj_consume_token(DISCONNECT);
    gss = guarded_signal_specification();
    jj_consume_token(AFTER);
    expr = expression();
    jj_consume_token(SEMICOLON);
                {if (true) return new DisconnectionSpecification(gss, expr, null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public GuardedSignalSpecification guarded_signal_specification() throws ParseException, ZamiaException {
        Name typeMark;
        SignalList sl;
    sl = signal_list();
    jj_consume_token(COLON);
    typeMark = name();
                {if (true) return new GuardedSignalSpecification(sl, typeMark, null, sl.getLineCol());}
    throw new Error("Missing return statement in function");
  }

  final public SignalList signal_list() throws ParseException, ZamiaException {
        SignalList res;
        Name n;
        Token t;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
    case string_literal:
      n = name();
                     res = new SignalList(n, null, n.getLineCol());
      label_48:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[231] = jj_gen;
          break label_48;
        }
        jj_consume_token(COMMA);
        n = name();
                                       res.add(n);
      }
      break;
    case OTHERS:
      t = jj_consume_token(OTHERS);
                  res = new SignalList (SignalList.KIND_OTHERS, null, getLocation(t));
      break;
    case ALL:
      t = jj_consume_token(ALL);
                  res = new SignalList (SignalList.KIND_ALL, null, getLocation(t));
      break;
    default:
      jj_la1[232] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public GroupConstituent group_constituent() throws ParseException, ZamiaException {
        Name name;
        Token t;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
    case string_literal:
      name = name();
                  {if (true) return new GroupConstituent(name, null, name.getLineCol());}
      break;
    case character_literal:
      t = jj_consume_token(character_literal);
                  {if (true) return new GroupConstituent(t.image, null, getLocation(t));}
      break;
    default:
      jj_la1[233] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<GroupConstituent> group_constituent_list() throws ParseException, ZamiaException {
        GroupConstituent gc;
        ArrayList<GroupConstituent> res;
          res = new ArrayList<GroupConstituent>();
    gc = group_constituent();
                                  res.add(gc);
    label_49:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[234] = jj_gen;
        break label_49;
      }
      jj_consume_token(COMMA);
      gc = group_constituent();
                                           res.add(gc);
    }
          {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public GroupTemplateDeclaration group_template_declaration() throws ParseException, ZamiaException {
        Identifier id;
        Token t;
    t = jj_consume_token(GROUP);
    id = identifier();
    jj_consume_token(IS);
    jj_consume_token(LPAREN);
    entity_class_entry_list();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
          {if (true) return new GroupTemplateDeclaration (id.getImage(), null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public GroupDeclaration group_declaration() throws ParseException, ZamiaException {
        Token t;
        Identifier id;
        Name n;
    t = jj_consume_token(GROUP);
    id = identifier();
    jj_consume_token(COLON);
    n = name();
    jj_consume_token(SEMICOLON);
                {if (true) return new GroupDeclaration(id.getImage(),n,null,getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public TypeDefinitionProtected protected_type_body() throws ParseException, ZamiaException {
        Token t;
    t = jj_consume_token(PROTECTED);
    jj_consume_token(BODY);
    protected_type_body_declarative_part();
    jj_consume_token(END);
    jj_consume_token(PROTECTED);
    jj_consume_token(BODY);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      identifier();
      break;
    default:
      jj_la1[235] = jj_gen;
      ;
    }
                {if (true) return new TypeDefinitionProtected(null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public void protected_type_body_declarative_item() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PURE:
    case IMPURE:
    case FUNCTION:
    case PROCEDURE:
      subprogram();
      break;
    case TYPE:
      type_declaration();
      break;
    case SUBTYPE:
      subtype_declaration();
      break;
    case CONSTANT:
      constant_declaration();
      break;
    case SHARED:
    case VARIABLE:
      variable_declaration();
      break;
    case FILE:
      file_declaration();
      break;
    case ALIAS:
      alias_declaration();
      break;
    default:
      jj_la1[236] = jj_gen;
      if (jj_2_92(2147483647)) {
        attribute_declaration();
      } else {
        switch (jj_nt.kind) {
        case ATTRIBUTE:
          attribute_specification();
          break;
        case USE:
          use_clause();
          break;
        default:
          jj_la1[237] = jj_gen;
          if (jj_2_93(2147483647)) {
            group_template_declaration();
          } else {
            switch (jj_nt.kind) {
            case GROUP:
              group_declaration();
              break;
            default:
              jj_la1[238] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
  }

  final public void protected_type_body_declarative_part() throws ParseException, ZamiaException {
    label_50:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case PURE:
      case FILE:
      case TYPE:
      case ALIAS:
      case GROUP:
      case SHARED:
      case IMPURE:
      case SUBTYPE:
      case CONSTANT:
      case FUNCTION:
      case ATTRIBUTE:
      case PROCEDURE:
      case VARIABLE:
        ;
        break;
      default:
        jj_la1[239] = jj_gen;
        break label_50;
      }
      protected_type_body_declarative_item();
    }
  }

  final public TypeDefinitionProtected protected_type_declaration() throws ParseException, ZamiaException {
        Token t;
    t = jj_consume_token(PROTECTED);
    protected_type_declarative_part();
    jj_consume_token(END);
    jj_consume_token(PROTECTED);
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      identifier();
      break;
    default:
      jj_la1[240] = jj_gen;
      ;
    }
                {if (true) return new TypeDefinitionProtected(null, getLocation(t));}
    throw new Error("Missing return statement in function");
  }

  final public void protected_type_declarative_item() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PURE:
    case IMPURE:
    case FUNCTION:
    case PROCEDURE:
      subprogram();
      break;
    case ATTRIBUTE:
      attribute_specification();
      break;
    case USE:
      use_clause();
      break;
    default:
      jj_la1[241] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void protected_type_declarative_part() throws ParseException, ZamiaException {
    label_51:
    while (true) {
      switch (jj_nt.kind) {
      case USE:
      case PURE:
      case IMPURE:
      case FUNCTION:
      case ATTRIBUTE:
      case PROCEDURE:
        ;
        break;
      default:
        jj_la1[242] = jj_gen;
        break label_51;
      }
      protected_type_declarative_item();
    }
  }

  final public TypeDefinitionProtected protected_type_definition() throws ParseException, ZamiaException {
        TypeDefinitionProtected res;
    if (jj_2_94(2147483647)) {
      res = protected_type_body();
    } else {
      switch (jj_nt.kind) {
      case PROTECTED:
        res = protected_type_declaration();
        break;
      default:
        jj_la1[243] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

/**
 *
 * 1076-2008 PSL
 *
 */

// A.4.3 PSL directives
  final public void psl_psl_directive() throws ParseException, ZamiaException {
        Identifier label;
        String labelS = null;
    switch (jj_nt.kind) {
    case basic_identifier:
    case extended_identifier:
      label = identifier();
      jj_consume_token(COLON);
                                         labelS = label.getImage();
      break;
    default:
      jj_la1[244] = jj_gen;
      ;
    }
      SetState(PSL_MODE);
    switch (jj_nt.kind) {
    case PSL_ASSERT:
      psl_assert_directive();
      break;
    case PSL_COVER:
      psl_cover_directive(labelS);
      break;
    default:
      jj_la1[245] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PSL_SEMICOLON);
          SetState(DEFAULT);
  }

  final public void psl_assert_directive() throws ParseException, ZamiaException {
    jj_consume_token(PSL_ASSERT);
    psl_property();
    switch (jj_nt.kind) {
    case PSL_REPORT:
      jj_consume_token(PSL_REPORT);
      psl_psl_expression();
      break;
    default:
      jj_la1[246] = jj_gen;
      ;
    }
  }

  final public void psl_cover_directive(String aLabel) throws ParseException, ZamiaException {
    jj_consume_token(PSL_COVER);
    psl_sere();
    switch (jj_nt.kind) {
    case PSL_REPORT:
      jj_consume_token(PSL_REPORT);
      psl_psl_expression();
      break;
    default:
      jj_la1[247] = jj_gen;
      ;
    }
  }

//  A.4.4 PSL properties
  final public void psl_property() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_FORALL:
      psl_replicator();
      break;
    default:
      jj_la1[248] = jj_gen;
      ;
    }
    psl_fl_property();
  }

  final public void psl_replicator() throws ParseException, ZamiaException {
    jj_consume_token(PSL_FORALL);
    psl_identifier();
    switch (jj_nt.kind) {
    case PSL_LPAREN:
      jj_consume_token(PSL_LPAREN);
      psl_range();
      jj_consume_token(PSL_RPAREN);
      break;
    default:
      jj_la1[249] = jj_gen;
      ;
    }
    jj_consume_token(PSL_IN);
    psl_value_set();
    jj_consume_token(PSL_COLON);
  }

  final public void psl_value_set() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_BOOLEAN:
      jj_consume_token(PSL_BOOLEAN);
      break;
    case PSL_LBRACE:
      jj_consume_token(PSL_LBRACE);
      psl_range();
      label_52:
      while (true) {
        switch (jj_nt.kind) {
        case PSL_COMMA:
          ;
          break;
        default:
          jj_la1[250] = jj_gen;
          break label_52;
        }
        jj_consume_token(PSL_COMMA);
        psl_range();
      }
      jj_consume_token(PSL_RBRACE);
      break;
    default:
      jj_la1[251] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_range() throws ParseException, ZamiaException {
    psl_simple_expression();
    if (jj_2_95(2147483647)) {
      psl_direction();
      psl_simple_expression();
    } else {
      ;
    }
  }

  final public void psl_fl_property() throws ParseException, ZamiaException {
    psl_fl_property_primary();
    switch (jj_nt.kind) {
    case PSL_AND:
    case PSL_OR:
    case PSL_UNTIL_:
    case PSL_UNTILEXCL:
    case PSL_UNTILEXCL_:
    case PSL_UNTIL:
    case PSL_IMPLIFF:
    case PSL_IMPLIF:
      switch (jj_nt.kind) {
      case PSL_AND:
        jj_consume_token(PSL_AND);
        psl_fl_property_primary();
        break;
      case PSL_OR:
        jj_consume_token(PSL_OR);
        psl_fl_property_primary();
        break;
      case PSL_IMPLIF:
        jj_consume_token(PSL_IMPLIF);
        psl_fl_property_primary();
        break;
      case PSL_IMPLIFF:
        jj_consume_token(PSL_IMPLIFF);
        psl_fl_property_primary();
        break;
      case PSL_UNTIL:
        jj_consume_token(PSL_UNTIL);
        psl_fl_property_primary();
        break;
      case PSL_UNTILEXCL:
        jj_consume_token(PSL_UNTILEXCL);
        psl_fl_property_primary();
        break;
      case PSL_UNTILEXCL_:
        jj_consume_token(PSL_UNTILEXCL_);
        psl_fl_property_primary();
        break;
      case PSL_UNTIL_:
        jj_consume_token(PSL_UNTIL_);
        psl_fl_property_primary();
        break;
      default:
        jj_la1[252] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[253] = jj_gen;
      ;
    }
  }

  final public void psl_fl_property_primary() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_NOT:
      jj_consume_token(PSL_NOT);
      break;
    default:
      jj_la1[254] = jj_gen;
      ;
    }
    if (jj_2_96(2147483647)) {
      jj_consume_token(PSL_LPAREN);
      psl_fl_property();
      jj_consume_token(PSL_RPAREN);
    } else if (jj_2_97(2147483647)) {
      psl_sequence();
      switch (jj_nt.kind) {
      case PSL_SUFFOVERLAP:
      case PSL_SUFFNONOVERLAP:
      case PSL_EXCL:
        switch (jj_nt.kind) {
        case PSL_EXCL:
          jj_consume_token(PSL_EXCL);
          break;
        case PSL_SUFFOVERLAP:
          jj_consume_token(PSL_SUFFOVERLAP);
          psl_fl_property();
          break;
        case PSL_SUFFNONOVERLAP:
          jj_consume_token(PSL_SUFFNONOVERLAP);
          psl_fl_property();
          break;
        default:
          jj_la1[255] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[256] = jj_gen;
        ;
      }
    } else if (jj_2_98(2147483647)) {
      psl_psl_expression();
    } else {
      switch (jj_nt.kind) {
      case PSL_ALWAYS:
        jj_consume_token(PSL_ALWAYS);
        psl_fl_property();
        break;
      case PSL_NEVER:
        jj_consume_token(PSL_NEVER);
        psl_fl_property();
        break;
      case PSL_EVENTUALLYEXCL:
        jj_consume_token(PSL_EVENTUALLYEXCL);
        psl_fl_property();
        break;
      case PSL_X:
        jj_consume_token(PSL_X);
        jj_consume_token(PSL_LBRACKET);
        psl_psl_expression();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_XEXCL:
        jj_consume_token(PSL_XEXCL);
        jj_consume_token(PSL_LBRACKET);
        psl_psl_expression();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT:
        jj_consume_token(PSL_NEXT);
        switch (jj_nt.kind) {
        case PSL_LBRACKET:
          jj_consume_token(PSL_LBRACKET);
          psl_psl_expression();
          jj_consume_token(PSL_RBRACKET);
          break;
        default:
          jj_la1[257] = jj_gen;
          ;
        }
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXTEXCL:
        jj_consume_token(PSL_NEXTEXCL);
        switch (jj_nt.kind) {
        case PSL_LBRACKET:
          jj_consume_token(PSL_LBRACKET);
          psl_psl_expression();
          jj_consume_token(PSL_RBRACKET);
          break;
        default:
          jj_la1[258] = jj_gen;
          ;
        }
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_A:
        jj_consume_token(PSL_NEXT_A);
        jj_consume_token(PSL_LBRACKET);
        psl_range();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_AEXCL:
        jj_consume_token(PSL_NEXT_AEXCL);
        jj_consume_token(PSL_LBRACKET);
        psl_range();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_E:
        jj_consume_token(PSL_NEXT_E);
        jj_consume_token(PSL_LBRACKET);
        psl_range();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_EEXCL:
        jj_consume_token(PSL_NEXT_EEXCL);
        jj_consume_token(PSL_LBRACKET);
        psl_range();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_EVENTEXCL:
        jj_consume_token(PSL_NEXT_EVENTEXCL);
        jj_consume_token(PSL_LPAREN);
        psl_psl_expression();
        jj_consume_token(PSL_RPAREN);
        switch (jj_nt.kind) {
        case PSL_LBRACKET:
          jj_consume_token(PSL_LBRACKET);
          psl_psl_expression();
          jj_consume_token(PSL_RBRACKET);
          break;
        default:
          jj_la1[259] = jj_gen;
          ;
        }
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_EVENT:
        jj_consume_token(PSL_NEXT_EVENT);
        jj_consume_token(PSL_LPAREN);
        psl_psl_expression();
        jj_consume_token(PSL_RPAREN);
        jj_consume_token(PSL_LBRACKET);
        psl_psl_expression();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_EVENT_AEXCL:
        jj_consume_token(PSL_NEXT_EVENT_AEXCL);
        jj_consume_token(PSL_LPAREN);
        psl_psl_expression();
        jj_consume_token(PSL_RPAREN);
        switch (jj_nt.kind) {
        case PSL_LBRACKET:
          jj_consume_token(PSL_LBRACKET);
          psl_range();
          jj_consume_token(PSL_RBRACKET);
          break;
        default:
          jj_la1[260] = jj_gen;
          ;
        }
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_EVENT_A:
        jj_consume_token(PSL_NEXT_EVENT_A);
        jj_consume_token(PSL_LPAREN);
        psl_psl_expression();
        jj_consume_token(PSL_RPAREN);
        jj_consume_token(PSL_LBRACKET);
        psl_range();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_EVENT_EEXCL:
        jj_consume_token(PSL_NEXT_EVENT_EEXCL);
        jj_consume_token(PSL_LPAREN);
        psl_psl_expression();
        jj_consume_token(PSL_RPAREN);
        jj_consume_token(PSL_LBRACKET);
        psl_range();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      case PSL_NEXT_EVENT_E:
        jj_consume_token(PSL_NEXT_EVENT_E);
        jj_consume_token(PSL_LPAREN);
        psl_psl_expression();
        jj_consume_token(PSL_RPAREN);
        jj_consume_token(PSL_LBRACKET);
        psl_range();
        jj_consume_token(PSL_RBRACKET);
        jj_consume_token(PSL_LPAREN);
        psl_fl_property();
        jj_consume_token(PSL_RPAREN);
        break;
      default:
        jj_la1[261] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_53:
    while (true) {
      if (jj_2_99(2147483647)) {
        ;
      } else {
        break label_53;
      }
      switch (jj_nt.kind) {
      case PSL_AT:
        jj_consume_token(PSL_AT);
        psl_psl_expression();
        break;
      case PSL_ABORT:
        jj_consume_token(PSL_ABORT);
        psl_psl_expression();
        break;
      case PSL_ASYNC_ABORT:
        jj_consume_token(PSL_ASYNC_ABORT);
        psl_psl_expression();
        break;
      case PSL_SYNC_ABORT:
        jj_consume_token(PSL_SYNC_ABORT);
        psl_psl_expression();
        break;
      default:
        jj_la1[262] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

//  A.4.5 Sequential Extended Regular Expressions (SEREs)
  final public void psl_sere() throws ParseException, ZamiaException {
    psl_sere_factor();
    label_54:
    while (true) {
      switch (jj_nt.kind) {
      case PSL_WITHIN:
      case PSL_CONCAT:
      case PSL_LAND:
      case PSL_PIPE:
        ;
        break;
      default:
        jj_la1[263] = jj_gen;
        break label_54;
      }
      switch (jj_nt.kind) {
      case PSL_PIPE:
        jj_consume_token(PSL_PIPE);
        psl_sere_factor();
        break;
      case PSL_CONCAT:
        jj_consume_token(PSL_CONCAT);
        psl_sere_factor();
        break;
      case PSL_LAND:
        jj_consume_token(PSL_LAND);
        psl_sere_factor();
        break;
      case PSL_WITHIN:
        jj_consume_token(PSL_WITHIN);
        psl_sere_factor();
        break;
      default:
        jj_la1[264] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_sere_factor() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_LBRACE:
      psl_sequence();
      break;
    case psl_character_literal:
    case PSL_NOT:
    case PSL_NEW:
    case PSL_ABS:
    case PSL_NULL:
    case PSL_COUNTONES:
    case PSL_ENDED:
    case PSL_FELL:
    case PSL_ISUNKNOWN:
    case PSL_NONDET:
    case PSL_NONDET_VECTOR:
    case PSL_ONEHOT:
    case PSL_ONEHOT0:
    case PSL_PREV:
    case PSL_ROSE:
    case PSL_STABLE:
    case PSL_NEXT:
    case psl_based_literal:
    case psl_decimal_literal:
    case psl_bit_string_literal:
    case psl_basic_identifier:
    case psl_extended_identifier:
    case psl_string_literal:
    case PSL_ADD:
    case PSL_SUB:
    case PSL_LPAREN:
      psl_psl_expression();
      break;
    default:
      jj_la1[265] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case PSL_EQ:
    case PSL_FOLLOWS:
    case PSL_REPSTAR:
    case PSL_REPPLUS:
    case PSL_REPNON:
      switch (jj_nt.kind) {
      case PSL_REPSTAR:
        jj_consume_token(PSL_REPSTAR);
        switch (jj_nt.kind) {
        case psl_character_literal:
        case PSL_NOT:
        case PSL_NEW:
        case PSL_ABS:
        case PSL_NULL:
        case PSL_COUNTONES:
        case PSL_ENDED:
        case PSL_FELL:
        case PSL_ISUNKNOWN:
        case PSL_NONDET:
        case PSL_NONDET_VECTOR:
        case PSL_ONEHOT:
        case PSL_ONEHOT0:
        case PSL_PREV:
        case PSL_ROSE:
        case PSL_STABLE:
        case PSL_NEXT:
        case psl_based_literal:
        case psl_decimal_literal:
        case psl_bit_string_literal:
        case psl_basic_identifier:
        case psl_extended_identifier:
        case psl_string_literal:
        case PSL_ADD:
        case PSL_SUB:
        case PSL_LPAREN:
          psl_count();
          break;
        default:
          jj_la1[266] = jj_gen;
          ;
        }
        jj_consume_token(PSL_RBRACKET);
        break;
      case PSL_REPPLUS:
        jj_consume_token(PSL_REPPLUS);
        break;
      case PSL_REPNON:
        jj_consume_token(PSL_REPNON);
        psl_count();
        jj_consume_token(PSL_RBRACKET);
        break;
      case PSL_EQ:
        jj_consume_token(PSL_EQ);
        psl_count();
        break;
      case PSL_FOLLOWS:
        jj_consume_token(PSL_FOLLOWS);
        psl_count();
        break;
      default:
        jj_la1[267] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[268] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case PSL_AT:
      jj_consume_token(PSL_AT);
      psl_psl_expression();
      break;
    default:
      jj_la1[269] = jj_gen;
      ;
    }
  }

  final public void psl_sequence() throws ParseException, ZamiaException {
    jj_consume_token(PSL_LBRACE);
    psl_sere();
    label_55:
    while (true) {
      switch (jj_nt.kind) {
      case PSL_SEMICOLON:
      case PSL_COLON:
        ;
        break;
      default:
        jj_la1[270] = jj_gen;
        break label_55;
      }
      switch (jj_nt.kind) {
      case PSL_SEMICOLON:
        jj_consume_token(PSL_SEMICOLON);
        break;
      case PSL_COLON:
        jj_consume_token(PSL_COLON);
        break;
      default:
        jj_la1[271] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      psl_sere();
    }
    jj_consume_token(PSL_RBRACE);
  }

  final public void psl_count() throws ParseException, ZamiaException {
    psl_psl_expression();
    switch (jj_nt.kind) {
    case PSL_TO:
      jj_consume_token(PSL_TO);
      switch (jj_nt.kind) {
      case PSL_INF:
        jj_consume_token(PSL_INF);
        break;
      case psl_character_literal:
      case PSL_NOT:
      case PSL_NEW:
      case PSL_ABS:
      case PSL_NULL:
      case PSL_COUNTONES:
      case PSL_ENDED:
      case PSL_FELL:
      case PSL_ISUNKNOWN:
      case PSL_NONDET:
      case PSL_NONDET_VECTOR:
      case PSL_ONEHOT:
      case PSL_ONEHOT0:
      case PSL_PREV:
      case PSL_ROSE:
      case PSL_STABLE:
      case PSL_NEXT:
      case psl_based_literal:
      case psl_decimal_literal:
      case psl_bit_string_literal:
      case psl_basic_identifier:
      case psl_extended_identifier:
      case psl_string_literal:
      case PSL_ADD:
      case PSL_SUB:
      case PSL_LPAREN:
        psl_psl_expression();
        break;
      default:
        jj_la1[272] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[273] = jj_gen;
      ;
    }
  }

// A.4.8 Forms of expression
  final public void psl_psl_expression() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_PREV:
      jj_consume_token(PSL_PREV);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      switch (jj_nt.kind) {
      case PSL_COMMA:
        jj_consume_token(PSL_COMMA);
        psl_psl_expression();
        switch (jj_nt.kind) {
        case PSL_COMMA:
          jj_consume_token(PSL_COMMA);
          psl_psl_expression();
          break;
        default:
          jj_la1[274] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[275] = jj_gen;
        ;
      }
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_NEXT:
      jj_consume_token(PSL_NEXT);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_STABLE:
      jj_consume_token(PSL_STABLE);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      switch (jj_nt.kind) {
      case PSL_COMMA:
        jj_consume_token(PSL_COMMA);
        psl_psl_expression();
        break;
      default:
        jj_la1[276] = jj_gen;
        ;
      }
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_ROSE:
      jj_consume_token(PSL_ROSE);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      switch (jj_nt.kind) {
      case PSL_COMMA:
        jj_consume_token(PSL_COMMA);
        psl_psl_expression();
        break;
      default:
        jj_la1[277] = jj_gen;
        ;
      }
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_FELL:
      jj_consume_token(PSL_FELL);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      switch (jj_nt.kind) {
      case PSL_COMMA:
        jj_consume_token(PSL_COMMA);
        psl_psl_expression();
        break;
      default:
        jj_la1[278] = jj_gen;
        ;
      }
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_ENDED:
      jj_consume_token(PSL_ENDED);
      jj_consume_token(PSL_LPAREN);
      psl_sequence();
      switch (jj_nt.kind) {
      case PSL_COMMA:
        jj_consume_token(PSL_COMMA);
        psl_psl_expression();
        break;
      default:
        jj_la1[279] = jj_gen;
        ;
      }
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_ISUNKNOWN:
      jj_consume_token(PSL_ISUNKNOWN);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_COUNTONES:
      jj_consume_token(PSL_COUNTONES);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_ONEHOT:
      jj_consume_token(PSL_ONEHOT);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_ONEHOT0:
      jj_consume_token(PSL_ONEHOT0);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_NONDET:
      jj_consume_token(PSL_NONDET);
      jj_consume_token(PSL_LPAREN);
      psl_value_set();
      jj_consume_token(PSL_RPAREN);
      break;
    case PSL_NONDET_VECTOR:
      jj_consume_token(PSL_NONDET_VECTOR);
      jj_consume_token(PSL_LPAREN);
      psl_psl_expression();
      jj_consume_token(PSL_COMMA);
      psl_value_set();
      jj_consume_token(PSL_RPAREN);
      break;
    case psl_character_literal:
    case PSL_NOT:
    case PSL_NEW:
    case PSL_ABS:
    case PSL_NULL:
    case psl_based_literal:
    case psl_decimal_literal:
    case psl_bit_string_literal:
    case psl_basic_identifier:
    case psl_extended_identifier:
    case psl_string_literal:
    case PSL_ADD:
    case PSL_SUB:
    case PSL_LPAREN:
      psl_expression();
      break;
    default:
      jj_la1[280] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_56:
    while (true) {
      switch (jj_nt.kind) {
      case PSL_UNION:
      case PSL_IMPLIFF:
      case PSL_IMPLIF:
        ;
        break;
      default:
        jj_la1[281] = jj_gen;
        break label_56;
      }
      switch (jj_nt.kind) {
      case PSL_IMPLIF:
        jj_consume_token(PSL_IMPLIF);
        psl_expression();
        break;
      case PSL_IMPLIFF:
        jj_consume_token(PSL_IMPLIFF);
        psl_expression();
        break;
      case PSL_UNION:
        jj_consume_token(PSL_UNION);
        psl_expression();
        break;
      default:
        jj_la1[282] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_expression() throws ParseException, ZamiaException {
    psl_relation();
    label_57:
    while (true) {
      switch (jj_nt.kind) {
      case PSL_AND:
      case PSL_OR:
      case PSL_NAND:
      case PSL_NOR:
      case PSL_XOR:
      case PSL_XNOR:
        ;
        break;
      default:
        jj_la1[283] = jj_gen;
        break label_57;
      }
      switch (jj_nt.kind) {
      case PSL_AND:
        jj_consume_token(PSL_AND);
        break;
      case PSL_OR:
        jj_consume_token(PSL_OR);
        break;
      case PSL_NAND:
        jj_consume_token(PSL_NAND);
        break;
      case PSL_NOR:
        jj_consume_token(PSL_NOR);
        break;
      case PSL_XOR:
        jj_consume_token(PSL_XOR);
        break;
      case PSL_XNOR:
        jj_consume_token(PSL_XNOR);
        break;
      default:
        jj_la1[284] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      psl_relation();
    }
  }

  final public void psl_relation() throws ParseException, ZamiaException {
    psl_shift_expression();
    if (jj_2_100(2147483647)) {
      psl_relational_operator();
      psl_shift_expression();
    } else {
      ;
    }
  }

  final public void psl_relational_operator() throws ParseException {
    switch (jj_nt.kind) {
    case PSL_EQ:
      jj_consume_token(PSL_EQ);
      break;
    case PSL_NEQ:
      jj_consume_token(PSL_NEQ);
      break;
    case PSL_LO:
      jj_consume_token(PSL_LO);
      break;
    case PSL_LE:
      jj_consume_token(PSL_LE);
      break;
    case PSL_GT:
      jj_consume_token(PSL_GT);
      break;
    case PSL_GE:
      jj_consume_token(PSL_GE);
      break;
    default:
      jj_la1[285] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_shift_expression() throws ParseException, ZamiaException {
    psl_simple_expression();
    switch (jj_nt.kind) {
    case PSL_SLL:
    case PSL_SRL:
    case PSL_SLA:
    case PSL_SRA:
    case PSL_ROL:
    case PSL_ROR:
      psl_shift_operator();
      psl_simple_expression();
      break;
    default:
      jj_la1[286] = jj_gen;
      ;
    }
  }

  final public void psl_shift_operator() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_SLL:
      jj_consume_token(PSL_SLL);
      break;
    case PSL_SRL:
      jj_consume_token(PSL_SRL);
      break;
    case PSL_SLA:
      jj_consume_token(PSL_SLA);
      break;
    case PSL_SRA:
      jj_consume_token(PSL_SRA);
      break;
    case PSL_ROL:
      jj_consume_token(PSL_ROL);
      break;
    case PSL_ROR:
      jj_consume_token(PSL_ROR);
      break;
    default:
      jj_la1[287] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_simple_expression() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_ADD:
    case PSL_SUB:
      switch (jj_nt.kind) {
      case PSL_ADD:
        jj_consume_token(PSL_ADD);
        break;
      case PSL_SUB:
        jj_consume_token(PSL_SUB);
        break;
      default:
        jj_la1[288] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[289] = jj_gen;
      ;
    }
    psl_term();
    label_58:
    while (true) {
      if (jj_2_101(2147483647)) {
        ;
      } else {
        break label_58;
      }
      switch (jj_nt.kind) {
      case PSL_ADD:
        jj_consume_token(PSL_ADD);
        break;
      case PSL_SUB:
        jj_consume_token(PSL_SUB);
        break;
      case PSL_CONCAT:
        jj_consume_token(PSL_CONCAT);
        break;
      default:
        jj_la1[290] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      psl_term();
    }
  }

  final public void psl_term() throws ParseException, ZamiaException {
    psl_factor();
    label_59:
    while (true) {
      if (jj_2_102(4)) {
        ;
      } else {
        break label_59;
      }
      psl_multiplying_operator();
      psl_factor();
    }
  }

  final public void psl_multiplying_operator() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_MUL:
      jj_consume_token(PSL_MUL);
      break;
    case PSL_DIV:
      jj_consume_token(PSL_DIV);
      break;
    case PSL_MOD:
      jj_consume_token(PSL_MOD);
      break;
    case PSL_REM:
      jj_consume_token(PSL_REM);
      break;
    default:
      jj_la1[291] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_factor() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_ABS:
      jj_consume_token(PSL_ABS);
      psl_primary();
      break;
    case PSL_NOT:
      jj_consume_token(PSL_NOT);
      psl_primary();
      break;
    case psl_character_literal:
    case PSL_NEW:
    case PSL_NULL:
    case psl_based_literal:
    case psl_decimal_literal:
    case psl_bit_string_literal:
    case psl_basic_identifier:
    case psl_extended_identifier:
    case psl_string_literal:
    case PSL_LPAREN:
      psl_primary();
      if (jj_2_103(2147483647)) {
        jj_consume_token(PSL_EXP);
        psl_primary();
      } else {
        ;
      }
      break;
    default:
      jj_la1[292] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_primary() throws ParseException, ZamiaException {
    if (jj_2_104(2147483647)) {
      psl_allocator();
    } else if (jj_2_105(2147483647)) {
      psl_operation_call();
    } else if (jj_2_106(2147483647)) {
      psl_pure_literal();
    } else if (jj_2_107(2147483647)) {
      psl_pure_name();
    } else if (jj_2_108(2147483647)) {
      jj_consume_token(PSL_LPAREN);
      psl_expression();
      jj_consume_token(PSL_RPAREN);
    } else {
      switch (jj_nt.kind) {
      case PSL_LPAREN:
        psl_aggregate();
        break;
      default:
        jj_la1[293] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_allocator() throws ParseException, ZamiaException {
    jj_consume_token(PSL_NEW);
    psl_subtype_indication();
  }

  final public void psl_subtype_indication() throws ParseException, ZamiaException {
    if (jj_2_109(2147483647)) {
      psl_name();
    } else {
      ;
    }
    psl_name();
    if (jj_2_110(2)) {
      psl_constraint();
    } else {
      ;
    }
  }

  final public void psl_constraint() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_RANGE:
      psl_range_constraint();
      break;
    case PSL_LPAREN:
      psl_index_constraint();
      break;
    default:
      jj_la1[294] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_index_constraint() throws ParseException, ZamiaException {
    jj_consume_token(PSL_LPAREN);
    psl_discrete_range();
    label_60:
    while (true) {
      switch (jj_nt.kind) {
      case PSL_COMMA:
        ;
        break;
      default:
        jj_la1[295] = jj_gen;
        break label_60;
      }
      jj_consume_token(PSL_COMMA);
      psl_discrete_range();
    }
    jj_consume_token(PSL_RPAREN);
  }

  final public void psl_discrete_range() throws ParseException, ZamiaException {
    if (jj_2_111(2147483647)) {
      psl_range();
    } else if (jj_2_112(2147483647)) {
      psl_subtype_indication();
    } else if (jj_2_113(2147483647)) {
      psl_subtype_indication();
    } else if (jj_2_114(2147483647)) {
      psl_subtype_indication();
    } else if (jj_2_115(2147483647)) {
      psl_subtype_indication();
    } else {
      switch (jj_nt.kind) {
      case psl_character_literal:
      case PSL_NOT:
      case PSL_NEW:
      case PSL_ABS:
      case PSL_NULL:
      case psl_based_literal:
      case psl_decimal_literal:
      case psl_bit_string_literal:
      case psl_basic_identifier:
      case psl_extended_identifier:
      case psl_string_literal:
      case PSL_ADD:
      case PSL_SUB:
      case PSL_LPAREN:
        psl_range();
        break;
      default:
        jj_la1[296] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_range_constraint() throws ParseException, ZamiaException {
    jj_consume_token(PSL_RANGE);
    if (jj_2_116(2147483647)) {
      psl_range();
    } else {
      switch (jj_nt.kind) {
      case psl_basic_identifier:
      case psl_extended_identifier:
      case psl_string_literal:
        psl_name();
        break;
      default:
        jj_la1[297] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_operation_call() throws ParseException, ZamiaException {
    jj_consume_token(psl_string_literal);
    if (jj_2_117(2147483647)) {
      psl_signature();
    } else {
      ;
    }
    if (jj_2_118(2147483647)) {
      psl_name_extension();
    } else {
      ;
    }
  }

  final public void psl_pure_literal() throws ParseException, ZamiaException {
    if (jj_2_119(2147483647)) {
      psl_numeric_literal();
    } else {
      switch (jj_nt.kind) {
      case psl_character_literal:
        jj_consume_token(psl_character_literal);
        break;
      case psl_bit_string_literal:
        jj_consume_token(psl_bit_string_literal);
        break;
      case psl_string_literal:
        jj_consume_token(psl_string_literal);
        break;
      case PSL_NULL:
        jj_consume_token(PSL_NULL);
        break;
      default:
        jj_la1[298] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_numeric_literal() throws ParseException, ZamiaException {
    if (jj_2_120(2147483647)) {
      psl_physical_literal();
    } else {
      switch (jj_nt.kind) {
      case psl_based_literal:
      case psl_decimal_literal:
        psl_abstract_literal();
        break;
      default:
        jj_la1[299] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_physical_literal() throws ParseException, ZamiaException {
    psl_abstract_literal();
    psl_name();
  }

  final public void psl_name() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case psl_basic_identifier:
    case psl_extended_identifier:
      psl_identifier();
      break;
    case psl_string_literal:
      jj_consume_token(psl_string_literal);
      break;
    default:
      jj_la1[300] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_121(2147483647)) {
      psl_signature();
    } else {
      ;
    }
    if (jj_2_122(2147483647)) {
      psl_name_extension();
    } else {
      ;
    }
  }

  final public void psl_pure_name() throws ParseException, ZamiaException {
    psl_identifier();
    if (jj_2_123(2147483647)) {
      psl_signature();
    } else {
      ;
    }
    if (jj_2_124(2147483647)) {
      psl_name_extension();
    } else {
      ;
    }
  }

  final public void psl_name_extension() throws ParseException, ZamiaException {
    if (jj_2_127(2147483647)) {
      jj_consume_token(PSL_TICK);
      jj_consume_token(PSL_RANGE);
      if (jj_2_125(2147483647)) {
        jj_consume_token(PSL_LPAREN);
        psl_expression();
        jj_consume_token(PSL_RPAREN);
      } else {
        ;
      }
    } else if (jj_2_128(2147483647)) {
      jj_consume_token(PSL_TICK);
      psl_identifier();
      if (jj_2_126(2147483647)) {
        jj_consume_token(PSL_LPAREN);
        psl_expression();
        jj_consume_token(PSL_RPAREN);
      } else {
        ;
      }
    } else if (jj_2_129(2147483647)) {
      jj_consume_token(PSL_TICK);
      jj_consume_token(PSL_LPAREN);
      psl_expression();
      jj_consume_token(PSL_RPAREN);
    } else if (jj_2_130(2147483647)) {
      jj_consume_token(PSL_TICK);
      psl_aggregate();
    } else {
      switch (jj_nt.kind) {
      case PSL_PERIOD:
        jj_consume_token(PSL_PERIOD);
        psl_suffix();
        break;
      default:
        jj_la1[303] = jj_gen;
        if (jj_2_131(2147483647)) {
          jj_consume_token(PSL_LPAREN);
          psl_range();
          label_61:
          while (true) {
            switch (jj_nt.kind) {
            case PSL_COMMA:
              ;
              break;
            default:
              jj_la1[301] = jj_gen;
              break label_61;
            }
            jj_consume_token(PSL_COMMA);
            psl_range();
          }
          jj_consume_token(PSL_RPAREN);
        } else if (jj_2_132(2147483647)) {
          jj_consume_token(PSL_LPAREN);
          psl_expression();
          label_62:
          while (true) {
            switch (jj_nt.kind) {
            case PSL_COMMA:
              ;
              break;
            default:
              jj_la1[302] = jj_gen;
              break label_62;
            }
            jj_consume_token(PSL_COMMA);
            psl_expression();
          }
          jj_consume_token(PSL_RPAREN);
        } else {
          switch (jj_nt.kind) {
          case PSL_LPAREN:
            jj_consume_token(PSL_LPAREN);
            psl_association_list();
            jj_consume_token(PSL_RPAREN);
            break;
          default:
            jj_la1[304] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    if (jj_2_133(2147483647)) {
      psl_name_extension();
    } else {
      ;
    }
  }

  final public void psl_suffix() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case psl_basic_identifier:
    case psl_extended_identifier:
      psl_identifier();
      break;
    case psl_character_literal:
      jj_consume_token(psl_character_literal);
      break;
    case psl_string_literal:
      jj_consume_token(psl_string_literal);
      break;
    case PSL_ALL:
      jj_consume_token(PSL_ALL);
      break;
    default:
      jj_la1[305] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_association_list() throws ParseException, ZamiaException {
    psl_association_element();
    label_63:
    while (true) {
      switch (jj_nt.kind) {
      case PSL_COMMA:
        ;
        break;
      default:
        jj_la1[306] = jj_gen;
        break label_63;
      }
      jj_consume_token(PSL_COMMA);
      psl_association_element();
    }
  }

  final public void psl_association_element() throws ParseException, ZamiaException {
    if (jj_2_134(2147483647)) {
      psl_formal_part();
      jj_consume_token(PSL_FOLLOWS);
    } else {
      ;
    }
    psl_actual_part();
  }

  final public void psl_formal_part() throws ParseException, ZamiaException {
    if (jj_2_135(2147483647)) {
      psl_name();
      jj_consume_token(PSL_LPAREN);
      psl_name();
      jj_consume_token(PSL_RPAREN);
    } else {
      switch (jj_nt.kind) {
      case psl_basic_identifier:
      case psl_extended_identifier:
      case psl_string_literal:
        psl_name();
        break;
      default:
        jj_la1[307] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_actual_part() throws ParseException, ZamiaException {
    psl_actual_designator();
  }

  final public void psl_actual_designator() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_OPEN:
      jj_consume_token(PSL_OPEN);
      break;
    case psl_character_literal:
    case PSL_NOT:
    case PSL_NEW:
    case PSL_ABS:
    case PSL_NULL:
    case psl_based_literal:
    case psl_decimal_literal:
    case psl_bit_string_literal:
    case psl_basic_identifier:
    case psl_extended_identifier:
    case psl_string_literal:
    case PSL_ADD:
    case PSL_SUB:
    case PSL_LPAREN:
      psl_expression();
      break;
    default:
      jj_la1[308] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_signature() throws ParseException, ZamiaException {
    jj_consume_token(PSL_LBRACKET);
    if (jj_2_138(2147483647)) {
      psl_name();
      label_64:
      while (true) {
        if (jj_2_136(2147483647)) {
          ;
        } else {
          break label_64;
        }
        jj_consume_token(PSL_COMMA);
        psl_name();
      }
      if (jj_2_137(2147483647)) {
        jj_consume_token(PSL_RETURN);
        psl_name();
      } else {
        ;
      }
    } else {
      switch (jj_nt.kind) {
      case PSL_RETURN:
        jj_consume_token(PSL_RETURN);
        psl_name();
        break;
      default:
        jj_la1[309] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(PSL_RBRACKET);
  }

  final public void psl_abstract_literal() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case psl_decimal_literal:
      jj_consume_token(psl_decimal_literal);
      break;
    case psl_based_literal:
      jj_consume_token(psl_based_literal);
      break;
    default:
      jj_la1[310] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_aggregate() throws ParseException, ZamiaException {
    jj_consume_token(PSL_LPAREN);
    psl_element_association();
    label_65:
    while (true) {
      switch (jj_nt.kind) {
      case PSL_COMMA:
        ;
        break;
      default:
        jj_la1[311] = jj_gen;
        break label_65;
      }
      jj_consume_token(PSL_COMMA);
      psl_element_association();
    }
    jj_consume_token(PSL_RPAREN);
  }

  final public void psl_element_association() throws ParseException, ZamiaException {
    if (jj_2_139(2147483647)) {
      choices();
      jj_consume_token(PSL_FOLLOWS);
    } else {
      ;
    }
    psl_expression();
  }

  final public void psl_choices() throws ParseException, ZamiaException {
    psl_choice();
    label_66:
    while (true) {
      switch (jj_nt.kind) {
      case PSL_PIPE:
        ;
        break;
      default:
        jj_la1[312] = jj_gen;
        break label_66;
      }
      jj_consume_token(PSL_PIPE);
      psl_choice();
    }
  }

  final public void psl_choice() throws ParseException, ZamiaException {
    if (jj_2_140(2147483647)) {
      psl_range();
    } else {
      switch (jj_nt.kind) {
      case PSL_OTHERS:
        jj_consume_token(PSL_OTHERS);
        break;
      case psl_character_literal:
      case PSL_NOT:
      case PSL_NEW:
      case PSL_ABS:
      case PSL_NULL:
      case psl_based_literal:
      case psl_decimal_literal:
      case psl_bit_string_literal:
      case psl_basic_identifier:
      case psl_extended_identifier:
      case psl_string_literal:
      case PSL_ADD:
      case PSL_SUB:
      case PSL_LPAREN:
        psl_simple_expression();
        break;
      default:
        jj_la1[313] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void psl_direction() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case PSL_TO:
      jj_consume_token(PSL_TO);
      break;
    case PSL_DOWNTO:
      jj_consume_token(PSL_DOWNTO);
      break;
    default:
      jj_la1[314] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void psl_identifier() throws ParseException, ZamiaException {
    switch (jj_nt.kind) {
    case psl_basic_identifier:
      jj_consume_token(psl_basic_identifier);
      break;
    case psl_extended_identifier:
      jj_consume_token(psl_extended_identifier);
      break;
    default:
      jj_la1[315] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  void error_skipto(int kind, String message, ParseException e) throws ParseException {
  erm.addError (new ZamiaException (message+"\u005cn"+e, new SourceLocation(sf, getLocation(e.currentToken.next))));
  Token t;
  do
  {
    t = getNextToken();
  } while ((t.kind != kind) && t.kind != EOF);
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_3R_389() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_348()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_349()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_3R_359()) return true;
    return false;
  }

  private boolean jj_3_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(301)) {
    jj_scanpos = xsp;
    if (jj_scan_token(324)) {
    jj_scanpos = xsp;
    if (jj_scan_token(325)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_116() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_358()) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_scan_token(PSL_LBRACKET)) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(276)) {
    jj_scanpos = xsp;
    if (jj_scan_token(285)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_357()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_3R_325()) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_3R_356()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(psl_string_literal)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_387()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_388()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_355()) return true;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_114() {
    if (jj_3R_125()) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(based_literal)) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_scan_token(PSL_RANGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_406()) {
    jj_scanpos = xsp;
    if (jj_3R_407()) return true;
    }
    return false;
  }

  private boolean jj_3_113() {
    if (jj_3R_125()) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_scan_token(decimal_literal)) return true;
    return false;
  }

  private boolean jj_3_112() {
    if (jj_3R_125()) return true;
    if (jj_3R_125()) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_3R_354()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) return true;
    }
    return false;
  }

  private boolean jj_3_111() {
    if (jj_3R_127()) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_472() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_471() {
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_470() {
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_3R_352()) return true;
    return false;
  }

  private boolean jj_3R_469() {
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_350()) return true;
    return false;
  }

  private boolean jj_3R_468() {
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) {
    jj_scanpos = xsp;
    if (jj_3R_274()) {
    jj_scanpos = xsp;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_467() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_408() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_467()) {
    jj_scanpos = xsp;
    if (jj_3R_468()) {
    jj_scanpos = xsp;
    if (jj_3R_469()) {
    jj_scanpos = xsp;
    if (jj_3R_470()) {
    jj_scanpos = xsp;
    if (jj_3R_471()) {
    jj_scanpos = xsp;
    if (jj_3R_472()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_188()) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_408()) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_408()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_409()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_3R_125()) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    }
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_3R_327()) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_456() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_456()) jj_scanpos = xsp;
    if (jj_3R_125()) return true;
    xsp = jj_scanpos;
    if (jj_3_110()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_scan_token(string_literal)) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_scan_token(bit_string_literal)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_scan_token(PSL_EXP)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(PSL_NEW)) return true;
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_106() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(285)) {
    jj_scanpos = xsp;
    if (jj_scan_token(276)) {
    jj_scanpos = xsp;
    if (jj_scan_token(181)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_scan_token(character_literal)) return true;
    return false;
  }

  private boolean jj_3_105() {
    if (jj_scan_token(psl_string_literal)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_scan_token(PSL_NEW)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(PSL_EXP)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_320()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_319()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_318()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_121()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_317()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(PSL_NOT)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(PSL_ABS)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(287)) {
    jj_scanpos = xsp;
    if (jj_scan_token(288)) {
    jj_scanpos = xsp;
    if (jj_scan_token(177)) {
    jj_scanpos = xsp;
    if (jj_scan_token(178)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(PSL_UNION)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_3R_119()) return true;
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_120()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(289)) {
    jj_scanpos = xsp;
    if (jj_scan_token(290)) {
    jj_scanpos = xsp;
    if (jj_scan_token(291)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(string_literal)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_241() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(289)) {
    jj_scanpos = xsp;
    if (jj_scan_token(290)) {
    jj_scanpos = xsp;
    if (jj_scan_token(291)) return true;
    }
    }
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(289)) {
    jj_scanpos = xsp;
    if (jj_scan_token(290)) return true;
    }
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_239()) jj_scanpos = xsp;
    if (jj_3R_240()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_241()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_297()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_296()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(PSL_IMPLIFF)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_3R_458()) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_458() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(172)) {
    jj_scanpos = xsp;
    if (jj_scan_token(173)) {
    jj_scanpos = xsp;
    if (jj_scan_token(174)) {
    jj_scanpos = xsp;
    if (jj_scan_token(175)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_3R_127()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_486() {
    if (jj_scan_token(ROR)) return true;
    return false;
  }

  private boolean jj_3R_485() {
    if (jj_scan_token(ROL)) return true;
    return false;
  }

  private boolean jj_3R_484() {
    if (jj_scan_token(SRA)) return true;
    return false;
  }

  private boolean jj_3R_483() {
    if (jj_scan_token(SLA)) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_482() {
    if (jj_scan_token(SRL)) return true;
    return false;
  }

  private boolean jj_3R_421() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_481()) {
    jj_scanpos = xsp;
    if (jj_3R_482()) {
    jj_scanpos = xsp;
    if (jj_3R_483()) {
    jj_scanpos = xsp;
    if (jj_3R_484()) {
    jj_scanpos = xsp;
    if (jj_3R_485()) {
    jj_scanpos = xsp;
    if (jj_3R_486()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_481() {
    if (jj_scan_token(SLL)) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_421()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(292)) {
    jj_scanpos = xsp;
    if (jj_scan_token(293)) {
    jj_scanpos = xsp;
    if (jj_scan_token(297)) {
    jj_scanpos = xsp;
    if (jj_scan_token(295)) {
    jj_scanpos = xsp;
    if (jj_scan_token(296)) {
    jj_scanpos = xsp;
    if (jj_scan_token(294)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_118()) return true;
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_346()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_323()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_593() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(PSL_IMPLIF)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_427() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_425() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_592() {
    if (jj_scan_token(PSL_SUFFNONOVERLAP)) return true;
    if (jj_3R_476()) return true;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_scan_token(LO)) return true;
    return false;
  }

  private boolean jj_3R_233() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(169)) return true;
    }
    }
    }
    }
    }
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_423() {
    if (jj_scan_token(NEQ)) return true;
    return false;
  }

  private boolean jj_3R_347() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_422()) {
    jj_scanpos = xsp;
    if (jj_3R_423()) {
    jj_scanpos = xsp;
    if (jj_3R_424()) {
    jj_scanpos = xsp;
    if (jj_3R_425()) {
    jj_scanpos = xsp;
    if (jj_3R_426()) {
    jj_scanpos = xsp;
    if (jj_3R_427()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_232()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_3R_347()) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_262()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_263()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_586() {
    if (jj_scan_token(PSL_TO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(215)) {
    jj_scanpos = xsp;
    if (jj_3R_593()) return true;
    }
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_384() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(306)) {
    jj_scanpos = xsp;
    if (jj_scan_token(307)) return true;
    }
    if (jj_3R_383()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(PSL_COUNTONES)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(PSL_NONDET_VECTOR)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_313()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(PSL_NONDET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_313()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(PSL_ONEHOT0)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(PSL_ONEHOT)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_581() {
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(PSL_ISUNKNOWN)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(PSL_ENDED)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_311()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_312()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(PSL_PREV)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(PSL_FELL)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_580() {
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(PSL_ROSE)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(PSL_STABLE)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_222()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(PSL_NEXT)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(XNOR)) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(NOR)) return true;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(NAND)) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_571() {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_586()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_501() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_570() {
    if (jj_3R_571()) return true;
    return false;
  }

  private boolean jj_3R_591() {
    if (jj_scan_token(PSL_SUFFOVERLAP)) return true;
    if (jj_3R_476()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(PSL_LBRACE)) return true;
    if (jj_3R_383()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PSL_RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_158()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_159()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_503() {
    if (jj_scan_token(PSL_AT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_532() {
    if (jj_scan_token(PSL_FOLLOWS)) return true;
    if (jj_3R_571()) return true;
    return false;
  }

  private boolean jj_3R_531() {
    if (jj_scan_token(PSL_EQ)) return true;
    if (jj_3R_571()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_530() {
    if (jj_scan_token(PSL_REPNON)) return true;
    if (jj_3R_571()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_529() {
    if (jj_scan_token(PSL_REPSTAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_570()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_500() {
    if (jj_3R_311()) return true;
    return false;
  }

  private boolean jj_3R_502() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_529()) {
    jj_scanpos = xsp;
    if (jj_scan_token(315)) {
    jj_scanpos = xsp;
    if (jj_3R_530()) {
    jj_scanpos = xsp;
    if (jj_3R_531()) {
    jj_scanpos = xsp;
    if (jj_3R_532()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_507() {
    if (jj_scan_token(PSL_WITHIN)) return true;
    if (jj_3R_453()) return true;
    return false;
  }

  private boolean jj_3R_506() {
    if (jj_scan_token(PSL_LAND)) return true;
    if (jj_3R_453()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_414()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_415()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_505() {
    if (jj_scan_token(PSL_CONCAT)) return true;
    if (jj_3R_453()) return true;
    return false;
  }

  private boolean jj_3R_453() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_500()) {
    jj_scanpos = xsp;
    if (jj_3R_501()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_502()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_503()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_577() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(321)) {
    jj_scanpos = xsp;
    if (jj_3R_591()) {
    jj_scanpos = xsp;
    if (jj_3R_592()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_504() {
    if (jj_scan_token(PSL_PIPE)) return true;
    if (jj_3R_453()) return true;
    return false;
  }

  private boolean jj_3R_454() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_504()) {
    jj_scanpos = xsp;
    if (jj_3R_505()) {
    jj_scanpos = xsp;
    if (jj_3R_506()) {
    jj_scanpos = xsp;
    if (jj_3R_507()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) return true;
    }
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(151)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_99()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_3R_453()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_454()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_194()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_579() {
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(323)) {
    jj_scanpos = xsp;
    if (jj_scan_token(189)) {
    jj_scanpos = xsp;
    if (jj_scan_token(195)) {
    jj_scanpos = xsp;
    if (jj_scan_token(240)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_420()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_585() {
    if (jj_scan_token(PSL_SYNC_ABORT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_578() {
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_584() {
    if (jj_scan_token(PSL_ASYNC_ABORT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_583() {
    if (jj_scan_token(PSL_ABORT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_559() {
    if (jj_scan_token(PSL_NEXT_EVENT_E)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_582() {
    if (jj_scan_token(PSL_AT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_558() {
    if (jj_scan_token(PSL_NEXT_EVENT_EEXCL)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_419()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_557() {
    if (jj_scan_token(PSL_NEXT_EVENT_A)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_556() {
    if (jj_scan_token(PSL_NEXT_EVENT_AEXCL)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_581()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_560() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_582()) {
    jj_scanpos = xsp;
    if (jj_3R_583()) {
    jj_scanpos = xsp;
    if (jj_3R_584()) {
    jj_scanpos = xsp;
    if (jj_3R_585()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_555() {
    if (jj_scan_token(PSL_NEXT_EVENT)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_547() {
    if (jj_scan_token(PSL_XEXCL)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_554() {
    if (jj_scan_token(PSL_NEXT_EVENTEXCL)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_580()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_scan_token(PERIOD)) return true;
    if (jj_3R_418()) return true;
    return false;
  }

  private boolean jj_3R_553() {
    if (jj_scan_token(PSL_NEXT_EEXCL)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(TICK)) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_552() {
    if (jj_scan_token(PSL_NEXT_E)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_551() {
    if (jj_scan_token(PSL_NEXT_AEXCL)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_scan_token(PSL_LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_550() {
    if (jj_scan_token(PSL_NEXT_A)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_549() {
    if (jj_scan_token(PSL_NEXTEXCL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_579()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_548() {
    if (jj_scan_token(PSL_NEXT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_578()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(TICK)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_546() {
    if (jj_scan_token(PSL_X)) return true;
    if (jj_scan_token(PSL_LBRACKET)) return true;
    if (jj_3R_117()) return true;
    if (jj_scan_token(PSL_RBRACKET)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_545() {
    if (jj_scan_token(PSL_EVENTUALLYEXCL)) return true;
    if (jj_3R_476()) return true;
    return false;
  }

  private boolean jj_3R_544() {
    if (jj_scan_token(PSL_NEVER)) return true;
    if (jj_3R_476()) return true;
    return false;
  }

  private boolean jj_3R_543() {
    if (jj_scan_token(PSL_ALWAYS)) return true;
    if (jj_3R_476()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_scan_token(TICK)) return true;
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(TICK)) return true;
    if (jj_scan_token(RANGE)) return true;
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_542() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_541() {
    if (jj_3R_311()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_577()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) return true;
    }
    return false;
  }

  private boolean jj_3R_540() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_476()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(TICK)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_568() {
    if (jj_scan_token(PSL_UNTIL_)) return true;
    if (jj_3R_514()) return true;
    return false;
  }

  private boolean jj_3R_567() {
    if (jj_scan_token(PSL_UNTILEXCL_)) return true;
    if (jj_3R_514()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_566() {
    if (jj_scan_token(PSL_UNTILEXCL)) return true;
    if (jj_3R_514()) return true;
    return false;
  }

  private boolean jj_3R_565() {
    if (jj_scan_token(PSL_UNTIL)) return true;
    if (jj_3R_514()) return true;
    return false;
  }

  private boolean jj_3R_514() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(162)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_540()) {
    jj_scanpos = xsp;
    if (jj_3R_541()) {
    jj_scanpos = xsp;
    if (jj_3R_542()) {
    jj_scanpos = xsp;
    if (jj_3R_543()) {
    jj_scanpos = xsp;
    if (jj_3R_544()) {
    jj_scanpos = xsp;
    if (jj_3R_545()) {
    jj_scanpos = xsp;
    if (jj_3R_546()) {
    jj_scanpos = xsp;
    if (jj_3R_547()) {
    jj_scanpos = xsp;
    if (jj_3R_548()) {
    jj_scanpos = xsp;
    if (jj_3R_549()) {
    jj_scanpos = xsp;
    if (jj_3R_550()) {
    jj_scanpos = xsp;
    if (jj_3R_551()) {
    jj_scanpos = xsp;
    if (jj_3R_552()) {
    jj_scanpos = xsp;
    if (jj_3R_553()) {
    jj_scanpos = xsp;
    if (jj_3R_554()) {
    jj_scanpos = xsp;
    if (jj_3R_555()) {
    jj_scanpos = xsp;
    if (jj_3R_556()) {
    jj_scanpos = xsp;
    if (jj_3R_557()) {
    jj_scanpos = xsp;
    if (jj_3R_558()) {
    jj_scanpos = xsp;
    if (jj_3R_559()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_560()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_scan_token(TICK)) return true;
    if (jj_scan_token(RANGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_416()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_564() {
    if (jj_scan_token(PSL_IMPLIFF)) return true;
    if (jj_3R_514()) return true;
    return false;
  }

  private boolean jj_3R_563() {
    if (jj_scan_token(PSL_IMPLIF)) return true;
    if (jj_3R_514()) return true;
    return false;
  }

  private boolean jj_3R_562() {
    if (jj_scan_token(PSL_OR)) return true;
    if (jj_3R_514()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3R_344()) return true;
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_561() {
    if (jj_scan_token(PSL_AND)) return true;
    if (jj_3R_514()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_128()) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_455() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) return true;
    }
    return false;
  }

  private boolean jj_3R_515() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_561()) {
    jj_scanpos = xsp;
    if (jj_3R_562()) {
    jj_scanpos = xsp;
    if (jj_3R_563()) {
    jj_scanpos = xsp;
    if (jj_3R_564()) {
    jj_scanpos = xsp;
    if (jj_3R_565()) {
    jj_scanpos = xsp;
    if (jj_3R_566()) {
    jj_scanpos = xsp;
    if (jj_3R_567()) {
    jj_scanpos = xsp;
    if (jj_3R_568()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_539() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_129()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_476() {
    if (jj_3R_514()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_515()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_3R_127()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_scan_token(PSL_LBRACE)) return true;
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_455()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PSL_RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(200)) {
    jj_scanpos = xsp;
    if (jj_3R_385()) return true;
    }
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_scan_token(PSL_REPORT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_scan_token(PSL_REPORT)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(151)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_scan_token(string_literal)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_368()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_513() {
    if (jj_scan_token(PSL_FORALL)) return true;
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_539()) jj_scanpos = xsp;
    if (jj_scan_token(PSL_IN)) return true;
    if (jj_3R_313()) return true;
    if (jj_scan_token(PSL_COLON)) return true;
    return false;
  }

  private boolean jj_3R_475() {
    if (jj_3R_513()) return true;
    return false;
  }

  private boolean jj_3R_411() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_475()) jj_scanpos = xsp;
    if (jj_3R_476()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(string_literal)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(EXP)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(PSL_COVER)) return true;
    if (jj_3R_383()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_156()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_scan_token(EXP)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(PSL_ASSERT)) return true;
    if (jj_3R_411()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_412()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_96()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_335()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(ABS)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_334()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) return true;
    }
    if (jj_scan_token(PSL_SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_scan_token(BODY)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_94()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_95()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_594() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_590() {
    if (jj_scan_token(OPEN)) return true;
    return false;
  }

  private boolean jj_3R_589() {
    if (jj_scan_token(CONFIGURATION)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_588() {
    if (jj_scan_token(ENTITY)) return true;
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_594()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_scan_token(DOWNTO)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_574() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_588()) {
    jj_scanpos = xsp;
    if (jj_3R_589()) {
    jj_scanpos = xsp;
    if (jj_3R_590()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_169() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) return true;
    }
    }
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    }
    return false;
  }

  private boolean jj_3R_538() {
    if (jj_3R_576()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_91()) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_537() {
    if (jj_3R_575()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(TO)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_536() {
    if (jj_scan_token(USE)) return true;
    if (jj_3R_574()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    return false;
  }

  private boolean jj_3R_512() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_536()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_537()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_538()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_91()) return true;
    if (jj_3R_92()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_521() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_520() {
    if (jj_scan_token(OTHERS)) return true;
    return false;
  }

  private boolean jj_3R_573() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_519() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_573()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_493() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_519()) {
    jj_scanpos = xsp;
    if (jj_3R_520()) {
    jj_scanpos = xsp;
    if (jj_3R_521()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(RANGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_84()) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_84()) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_84()) return true;
    if (jj_3R_84()) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_438() {
    if (jj_3R_493()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_474() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_473() {
    if (jj_3R_512()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_91()) return true;
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_444() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_442() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3R_441() {
    if (jj_3R_366()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_440() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_438()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_473()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_474()) jj_scanpos = xsp;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_364() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_440()) {
    jj_scanpos = xsp;
    if (jj_3R_441()) {
    jj_scanpos = xsp;
    if (jj_3R_442()) {
    jj_scanpos = xsp;
    if (jj_3R_443()) {
    jj_scanpos = xsp;
    if (jj_3R_444()) {
    jj_scanpos = xsp;
    if (jj_3R_445()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_3R_410()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) {
    jj_scanpos = xsp;
    if (jj_3R_333()) return true;
    }
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_364()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_364()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_365()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_141()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_292()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_524() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  private boolean jj_3R_523() {
    if (jj_scan_token(OTHERS)) return true;
    return false;
  }

  private boolean jj_3R_522() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_494() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_522()) {
    jj_scanpos = xsp;
    if (jj_3R_523()) {
    jj_scanpos = xsp;
    if (jj_3R_524()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_3R_494()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(DISCONNECT)) return true;
    if (jj_3R_439()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_438()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_3R_84()) return true;
    if (jj_scan_token(RANGE)) return true;
    if (jj_scan_token(BOX)) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_scan_token(ATTRIBUTE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(ALIAS)) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_518() {
    if (jj_scan_token(IMPURE)) return true;
    return false;
  }

  private boolean jj_3R_489() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_3R_518()) return true;
    }
    return false;
  }

  private boolean jj_3R_433() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_489()) jj_scanpos = xsp;
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_scan_token(PROCEDURE)) return true;
    if (jj_3R_437()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_432()) {
    jj_scanpos = xsp;
    if (jj_3R_433()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_447() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(UNITS)) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_492() {
    if (jj_scan_token(string_literal)) return true;
    return false;
  }

  private boolean jj_3R_491() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_437() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_491()) {
    jj_scanpos = xsp;
    if (jj_3R_492()) return true;
    }
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) jj_scanpos = xsp;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_84()) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) jj_scanpos = xsp;
    if (jj_scan_token(RETURN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_207()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_446() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_366() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_446()) jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    xsp = jj_scanpos;
    if (jj_3R_447()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_scan_token(NULL)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(ATTRIBUTE)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_379()) {
    jj_scanpos = xsp;
    if (jj_3R_380()) return true;
    }
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_scan_token(SUBTYPE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(PACKAGE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_490() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_435() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_305()) return true;
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_3R_490()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_198()) jj_scanpos = xsp;
    if (jj_scan_token(LOOP)) return true;
    if (jj_3R_199()) return true;
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(LOOP)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_434()) {
    jj_scanpos = xsp;
    if (jj_3R_435()) return true;
    }
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(USE)) return true;
    if (jj_3R_84()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_scan_token(COMPONENT)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) jj_scanpos = xsp;
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_355() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(76)) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(SIGNAL)) return true;
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_195()) jj_scanpos = xsp;
    if (jj_scan_token(IF)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(THEN)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_527() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_498() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_527()) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_scan_token(CONSTANT)) return true;
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3R_526() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_497() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_526()) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(SEVERITY)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(REPORT)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(BEGIN)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(ON)) return true;
    if (jj_3R_376()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_302()) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_301()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_3R_300()) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) jj_scanpos = xsp;
    if (jj_scan_token(WAIT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_190()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_192()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_86()) return true;
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) jj_scanpos = xsp;
    if (jj_scan_token(EXIT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(POSTPONED)) return true;
    return false;
  }

  private boolean jj_3R_528() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_499() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_528()) jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_525() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    if (jj_3R_140()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_496() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_525()) jj_scanpos = xsp;
    if (jj_scan_token(REPORT)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_194()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    if (jj_scan_token(NEXT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) jj_scanpos = xsp;
    if (jj_scan_token(REPORT)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_452() {
    if (jj_3R_499()) return true;
    return false;
  }

  private boolean jj_3R_451() {
    if (jj_3R_498()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_450() {
    if (jj_3R_497()) return true;
    return false;
  }

  private boolean jj_3R_449() {
    if (jj_3R_496()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(WHEN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(ELSE)) return true;
    return false;
  }

  private boolean jj_3R_381() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3R_449()) {
    jj_scanpos = xsp;
    if (jj_3R_450()) {
    jj_scanpos = xsp;
    if (jj_3R_451()) {
    jj_scanpos = xsp;
    if (jj_3R_452()) {
    jj_scanpos = xsp;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) {
    jj_scanpos = xsp;
    if (jj_3_82()) {
    jj_scanpos = xsp;
    if (jj_3_83()) {
    jj_scanpos = xsp;
    if (jj_3_84()) {
    jj_scanpos = xsp;
    if (jj_3_85()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_381()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_306()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(FILE)) return true;
    if (jj_3R_436()) return true;
    return false;
  }

  private boolean jj_3R_495() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_448() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_3R_495()) return true;
    }
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_3R_448()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_84()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_84()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(FOLLOWS)) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(FOLLOWS)) return true;
    return false;
  }

  private boolean jj_3R_303() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    if (jj_3R_378()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_303()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_304()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_575() {
    if (jj_scan_token(GENERIC)) return true;
    if (jj_scan_token(MAP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_194()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_576() {
    if (jj_scan_token(PORT)) return true;
    if (jj_scan_token(MAP)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_194()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(279)) {
    jj_scanpos = xsp;
    if (jj_scan_token(284)) return true;
    }
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_140() {
    if (jj_3R_127()) return true;
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(183)) return true;
    }
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_scan_token(182)) {
    jj_scanpos = xsp;
    if (jj_3R_330()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_139() {
    if (jj_3R_136()) return true;
    if (jj_scan_token(PSL_FOLLOWS)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(PSL_PIPE)) return true;
    if (jj_3R_248()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(CONFIGURATION)) return true;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(ENTITY)) return true;
    if (jj_3R_84()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_248()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_249()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(97)) jj_scanpos = xsp;
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_457() {
    if (jj_3R_508()) return true;
    if (jj_scan_token(PSL_FOLLOWS)) return true;
    return false;
  }

  private boolean jj_3R_392() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_457()) jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_392()) return true;
    return false;
  }

  private boolean jj_3_137() {
    if (jj_scan_token(PSL_RETURN)) return true;
    return false;
  }

  private boolean jj_3_136() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_392()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_393()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_436() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_245() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(273)) {
    jj_scanpos = xsp;
    if (jj_scan_token(272)) return true;
    }
    return false;
  }

  private boolean jj_3R_460() {
    if (jj_scan_token(PSL_RETURN)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_138() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_459() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(extended_identifier)) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_scan_token(PSL_RETURN)) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_459()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_460()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_scan_token(PSL_LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_395()) {
    jj_scanpos = xsp;
    if (jj_3R_396()) return true;
    }
    if (jj_scan_token(PSL_RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_587() {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_572() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(186)) {
    jj_scanpos = xsp;
    if (jj_3R_587()) return true;
    }
    return false;
  }

  private boolean jj_3R_480() {
    if (jj_scan_token(ALL)) return true;
    return false;
  }

  private boolean jj_3_135() {
    if (jj_3R_125()) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_125()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_479() {
    if (jj_scan_token(string_literal)) return true;
    return false;
  }

  private boolean jj_3R_535() {
    if (jj_3R_572()) return true;
    return false;
  }

  private boolean jj_3R_477() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_478() {
    if (jj_scan_token(character_literal)) return true;
    return false;
  }

  private boolean jj_3_134() {
    if (jj_3R_135()) return true;
    if (jj_scan_token(PSL_FOLLOWS)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_125()) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_125()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) return true;
    }
    return false;
  }

  private boolean jj_3R_418() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_477()) {
    jj_scanpos = xsp;
    if (jj_3R_478()) {
    jj_scanpos = xsp;
    if (jj_3R_479()) {
    jj_scanpos = xsp;
    if (jj_3R_480()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_534() {
    if (jj_3R_135()) return true;
    if (jj_scan_token(PSL_FOLLOWS)) return true;
    return false;
  }

  private boolean jj_3R_510() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_534()) jj_scanpos = xsp;
    if (jj_3R_535()) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_511() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_510()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    if (jj_scan_token(ASSERT)) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    }
    return false;
  }

  private boolean jj_3R_466() {
    if (jj_3R_510()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_511()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_569() {
    if (jj_3R_92()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_509() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_517() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_569()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_516() {
    if (jj_scan_token(OTHERS)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(GENERATE)) return true;
    return false;
  }

  private boolean jj_3R_488() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_516()) {
    jj_scanpos = xsp;
    if (jj_3R_517()) return true;
    }
    return false;
  }

  private boolean jj_3_132() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_134()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PSL_LPAREN)) return true;
    return false;
  }

  private boolean jj_3_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(325)) {
    jj_scanpos = xsp;
    if (jj_scan_token(324)) {
    jj_scanpos = xsp;
    if (jj_scan_token(301)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_126() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_463() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_509()) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(285)) {
    jj_scanpos = xsp;
    if (jj_scan_token(180)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_465() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_125() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_131() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_133()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PSL_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_464() {
    if (jj_scan_token(PSL_COMMA)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_533() {
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_488()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) jj_scanpos = xsp;
    if (jj_scan_token(WITH)) return true;
    return false;
  }

  private boolean jj_3_130() {
    if (jj_scan_token(PSL_TICK)) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_466()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_129() {
    if (jj_scan_token(PSL_TICK)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_508() {
    if (jj_3R_488()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_533()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_16() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_128() {
    if (jj_scan_token(PSL_TICK)) return true;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_465()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_462() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(95)) jj_scanpos = xsp;
    if (jj_scan_token(PROCESS)) return true;
    return false;
  }

  private boolean jj_3_127() {
    if (jj_scan_token(PSL_TICK)) return true;
    if (jj_scan_token(PSL_RANGE)) return true;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_129()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_464()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_461() {
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_scan_token(PSL_PERIOD)) return true;
    if (jj_3R_463()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_scan_token(BLOCK)) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_scan_token(PSL_TICK)) return true;
    if (jj_3R_322()) return true;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_scan_token(PSL_TICK)) return true;
    if (jj_scan_token(PSL_LPAREN)) return true;
    if (jj_3R_124()) return true;
    if (jj_scan_token(PSL_RPAREN)) return true;
    return false;
  }

  private boolean jj_3_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(301)) {
    jj_scanpos = xsp;
    if (jj_scan_token(324)) {
    jj_scanpos = xsp;
    if (jj_scan_token(325)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_scan_token(PSL_TICK)) return true;
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_462()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_123() {
    if (jj_scan_token(PSL_LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_scan_token(185)) return true;
    }
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_scan_token(PSL_TICK)) return true;
    if (jj_scan_token(PSL_RANGE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_461()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) {
    jj_scanpos = xsp;
    if (jj_3R_398()) {
    jj_scanpos = xsp;
    if (jj_3R_399()) {
    jj_scanpos = xsp;
    if (jj_3R_400()) {
    jj_scanpos = xsp;
    if (jj_3R_401()) {
    jj_scanpos = xsp;
    if (jj_3R_402()) {
    jj_scanpos = xsp;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_405()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(301)) {
    jj_scanpos = xsp;
    if (jj_scan_token(324)) {
    jj_scanpos = xsp;
    if (jj_scan_token(325)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_325()) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_scan_token(PSL_LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_123()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_390()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_391()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_scan_token(FOLLOWS)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_325()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(GROUP)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_scan_token(285)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_235()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_236()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_488()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_362()) return true;
    return false;
  }

  private boolean jj_3R_487() {
    if (jj_3R_92()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_245()) return true;
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_429() {
    if (jj_3R_85()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_487()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_428() {
    if (jj_scan_token(OTHERS)) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_428()) {
    jj_scanpos = xsp;
    if (jj_3R_429()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_430()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_431()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_3R_361()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public VHDL2008ParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[316];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static private int[] jj_la1_6;
  static private int[] jj_la1_7;
  static private int[] jj_la1_8;
  static private int[] jj_la1_9;
  static private int[] jj_la1_10;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
      jj_la1_init_5();
      jj_la1_init_6();
      jj_la1_init_7();
      jj_la1_init_8();
      jj_la1_init_9();
      jj_la1_init_10();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x80000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x80000,0x40000,0x40000,0x80000,0x40000,0x0,0x10000000,0x80000,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x8000000,0x0,0x2000,0x0,0x0,0x0,0x80000,0x0,0x80000,0x0,0x0,0xc0000,0x0,0xc0000,0x0,0x0,0x0,0x0,0x1000,0xc0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0xc0000,0x0,0x0,0x0,0x40800,0x0,0x8000000,0x0,0x0,0x0,0x8000000,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x4000,0x0,0x0,0x0,0x80000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x20020000,0x20020000,0x20020000,0x0,0x0,0x3f00000,0x3f00000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x40000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x1000,0x80000,0x0,0x0,0x0,0x0,0x80000,0x1000,0x0,0x2000,0x0,0x0,0x1000,0x40800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x40000,0x0,0x0,0x40000000,0x0,0x0,0x80000,0x80000,0x40800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x10000000,0x0,0x0,0x0,0x0,0x80000,0x0,0x80000,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x200400,0x200400,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x24220000,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x0,0x0,0x0,0x80000,0x800,0x220400,0x0,0x0,0x220400,0x0,0x0,0x0,0x0,0x20000,0x20000,0x20000,0x10000020,0x0,0x0,0x10000020,0x0,0x0,0x0,0x220400,0x0,0x220400,0x0,0x0,0x220400,0x220400,0x0,0x0,0x10000,0x0,0x0,0x0,0x220400,0x0,0x0,0x0,0x80000,0x80000,0x10000,0x0,0x0,0x0,0x0,0x80000,0x0,0x0,0x849,0x0,0x0,0x0,0x0,0x0,0x4000,0x0,0x49,0x8000000,0x8000000,0x49,0x0,0x0,0x0,0x10000,0x0,0x220400,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000,0x0,0x200000,0x80000000,0xc0020000,0x80000000,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x80000000,0x0,0x49,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x49,0x0,0x0,0x0,0x0,0x0,0x0,0x286,0x286,0x286,0x0,0x0,0x0,0x0,0x0,0x40,0x40,0x0,0x0,0x0,0x0,0x49,0x0,0x0,0x0,0x49,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x220400,0x0,0x0,0x0,0x220400,0x0,0x800,0x800,0x10000020,0x0,0x0,0x0,0x244a040,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x0,0x0,0x4000,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x49,0x0,0x220400,0x0,0x220400,0x244a040,0x0,0x400,0x400,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x220400,0x0,0x0,0x220400,0x0,0x400,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x130000,0x20000,0x20000,0x0,0x0,0x100000,0x10000,0x0,0x10000,0x0,0x80400000,0x80000000,0x12805803,0x12805801,0x0,0x2,0x200000,0x0,0x2,0x0,0x0,0x2,0x0,0x10,0x0,0x0,0x12990802,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x10,0x0,0x200000,0x0,0x10000,0x12805803,0x100000,0x0,0x12805801,0x0,0x2,0x0,0x0,0x2000800,0x2000800,0x2000800,0x40040,0x0,0x0,0x40040,0x100000,0x100000,0x0,0x12805001,0x2,0x12805003,0x0,0x0,0x12805803,0x12805801,0x0,0x2,0x80400000,0x80000000,0x0,0x0,0x12805803,0x0,0x200000,0x200000,0x0,0x0,0x80400000,0x0,0x0,0x10000,0x200000,0x0,0x0,0x0,0x0,0x1000000,0x40000020,0x20,0x40000020,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x12805803,0x80400000,0x0,0x0,0x0,0x0,0x4000000,0x0,0x1000,0x0,0x4000000,0x0,0x200000,0x0,0x0,0x0,0x0,0x8200,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x12805003,0x80000000,0x0,0x0,0x12805001,0x2,0x0,0x0,0x40040,0x1000,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x40000020,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x12805001,0x2,0x12805003,0x80,0x0,0x4000,0x4000,0x0,0x10004000,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x12805001,0x0,0x2,0x12805003,0x0,0x10004000,0x10004000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x18,0x0,0x0,0x0,0x0,0x8,0x10,0x0,0x0,0x80000000,0x80001000,0x80000000,0x841,0x840,0x1,0x0,0x0,0x0,0x1,0x10,0x80000000,0x1,0x0,0x80020000,0x0,0x80020000,0x85a,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x10,0x847,0x0,0x80000000,0x842,0x5,0x0,0x0,0x0,0x80000800,0x800,0x800,0x0,0x0,0x0,0x0,0x8,0x0,0x80000000,0x840,0x0,0x840,0x8,0x80000000,0x847,0x842,0x5,0x0,0x80011000,0x0,0x0,0x0,0x847,0x80000000,0x0,0x0,0x0,0x0,0x80011000,0x2,0x0,0x80000012,0x0,0x0,0x0,0x80000000,0x93020000,0x0,0x200,0x0,0x200,0x80000000,0x0,0x0,0x93020400,0x0,0x0,0x93020000,0x80000000,0x0,0x0,0x0,0x0,0x847,0x80011000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80,0x0,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80000000,0x0,0x0,0x93020000,0x80000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x93020000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x90020000,0x10020000,0x3000000,0x3000000,0x80020000,0x0,0x93020000,0x0,0x0,0x0,0x93020000,0x80020000,0x80000000,0x0,0x80000000,0x0,0x0,0x0,0x841,0x0,0x80000000,0x0,0x840,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x80007000,0x80000000,0x80000000,0x0,0x80000000,0x0,0x80000000,0x80000000,0x0,0x0,0x8000,0x0,0x80000000,0x4000,0x0,0x200,0x80000000,0x0,0x0,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x93020000,0x80000000,0x840,0x1,0x841,0x80007000,0x0,0x0,0x0,0x0,0x40,0x40,0x40,0x80000000,0x0,0x0,0x0,0x0,0x80000000,0x80020000,0x0,0x80000000,0x840,0x1,0x0,0x841,0x80000000,0x41,0x41,0x80,0x80000000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x10,0x30,0x30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x80000,0x30,0x2000000,0x30,0x0,0x200000,0x80000,0x0,0x0,0x0,0x40000,0x0,0x80000,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0xc0000,0xc0000,0x10,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x800030,0x0,0x800000,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x800030,0x0,0x800000,0x30,0x0,0x0,0x80000,0x30,0x800630,0x0,0x0,0x0,0x0,0x800030,0x0,0x80000,0x800630,0x0,0x0,0x800630,0x10,0x0,0x0,0x0,0x80000,0x0,0x800030,0x10,0x30,0x0,0x8000000,0x0,0x8000000,0x0,0x8000000,0x0,0x0,0x0,0x0,0x10,0x0,0x800000,0x800000,0x0,0x10,0x10,0x80000,0x0,0x0,0x80000,0x10,0x10,0x800000,0x80000,0x800630,0x30,0x30,0x0,0x600,0x600,0xe00,0x180,0x800030,0x30,0x80000,0x80000,0x10000000,0x800000,0x0,0x0,0x0,0x0,0x3f000,0x3f000,0x0,0x0,0x800000,0x30,0x20,0x0,0x0,0x10,0x80000,0x800630,0x40000000,0x20000000,0x40000000,0x800630,0x30,0x10,0x80000,0x10,0x0,0x800000,0x0,0x0,0x0,0x10,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000000,0x0,0x900030,0x10,0x10,0x0,0x10,0x0,0x10,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x10,0x0,0x10,0x10,0x0,0x10,0x30,0x0,0x10,0x10,0x800630,0x30,0x0,0x0,0x0,0x900030,0x800000,0x0,0x0,0x800000,0x0,0x0,0x0,0x30,0x40000,0x100000,0x2000000,0x80000,0x30,0x30,0x80000,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18,0x18,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x290006,0x290006,0x0,0x0,0x0,0x0,0x0,0x290006,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x290006,0x0,0x0,0x3d8,0x3d8,0x0,0xfc00,0xfc00,0x0,0x0,0x0,0x60000,0x290006,0x0,0x1000000,0x0,0x290006,0x0,0x200002,0x0,0x0,0x0,0x0,0x0,0x0,0x100002,0x0,0x0,0x4290006,0x2000000,0x0,0x0,0x0,0x690006,0x800020,0x0,};
   }
   private static void jj_la1_init_6() {
      jj_la1_6 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x100000,0x0,0x0,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf8010001,0x8,0x0,0x0,0x4088800,0x4088800,0x0,0x0,0x0,0x0,0x0,0x4888800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4088800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_7() {
      jj_la1_7 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700000,0x700000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8600007f,0x10000,0x1000000,0x1000000,0x8000ed80,0x8000ed80,0x0,0x0,0x0,0x0,0x0,0x8000ed80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000ed80,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_8() {
      jj_la1_8 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30930000,0x30930000,0x0,0x0,0x0,0x0,0x0,0x30930000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x30930000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x30930000,0x0,0x0,0x0,0x30930000,0x30800000,0x20100000,0x30000,0x30800000,0x0,0x0,0x0,0x0,0x30800000,0x0,0x30800000,0x30930000,0x0,0x30000,0x0,0x0,0x30930000,0x0,0x10800000,};
   }
   private static void jj_la1_init_9() {
      jj_la1_9 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x20000,0x8000,0x3000000,0x3000000,0x0,0xc00000,0xc00000,0x800,0x800,0x800,0x800,0x0,0x0,0x40000008,0x40000008,0xa006,0x2006,0x2c000410,0x2c000410,0x0,0xc0000,0xc0000,0x2006,0x0,0x20000,0x20000,0x20000,0x20000,0x20000,0x20000,0x2006,0x3000000,0x3000000,0x0,0x0,0x3f0,0x0,0x0,0x6,0x6,0xe,0x1,0x2000,0x2000,0x2000,0x20000,0x2006,0x0,0x0,0x0,0x0,0x20000,0x20000,0x0,0x2000,0x0,0x20000,0x0,0x2006,0x0,0x0,0x20000,0x0,0x2006,0x0,0x0,};
   }
   private static void jj_la1_init_10() {
      jj_la1_10 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x8,0x1,0x1,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[140];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with user supplied CharStream. */
  public VHDL2008Parser(CharStream stream) {
    token_source = new VHDL2008ParserTokenManager(stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 316; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 316; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public VHDL2008Parser(VHDL2008ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 316; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(VHDL2008ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 316; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[326];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 316; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
          if ((jj_la1_6[i] & (1<<j)) != 0) {
            la1tokens[192+j] = true;
          }
          if ((jj_la1_7[i] & (1<<j)) != 0) {
            la1tokens[224+j] = true;
          }
          if ((jj_la1_8[i] & (1<<j)) != 0) {
            la1tokens[256+j] = true;
          }
          if ((jj_la1_9[i] & (1<<j)) != 0) {
            la1tokens[288+j] = true;
          }
          if ((jj_la1_10[i] & (1<<j)) != 0) {
            la1tokens[320+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 326; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 140; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
            case 116: jj_3_117(); break;
            case 117: jj_3_118(); break;
            case 118: jj_3_119(); break;
            case 119: jj_3_120(); break;
            case 120: jj_3_121(); break;
            case 121: jj_3_122(); break;
            case 122: jj_3_123(); break;
            case 123: jj_3_124(); break;
            case 124: jj_3_125(); break;
            case 125: jj_3_126(); break;
            case 126: jj_3_127(); break;
            case 127: jj_3_128(); break;
            case 128: jj_3_129(); break;
            case 129: jj_3_130(); break;
            case 130: jj_3_131(); break;
            case 131: jj_3_132(); break;
            case 132: jj_3_133(); break;
            case 133: jj_3_134(); break;
            case 134: jj_3_135(); break;
            case 135: jj_3_136(); break;
            case 136: jj_3_137(); break;
            case 137: jj_3_138(); break;
            case 138: jj_3_139(); break;
            case 139: jj_3_140(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
